module __torch__.detectron2.export.flatten.TracingAdapter {
  parameters {
  }
  attributes {
    training = True
    _is_full_backward_hook = None
    model = <__torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN object at 0x5595a52376f0>
  }
  methods {
    method forward {
      graph(%self.1 : __torch__.detectron2.export.flatten.TracingAdapter,
            %860 : Float(3, 800, 1067, strides=[1, 3201, 3], requires_grad=0, device=cpu)):
        %7147 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self.1)
        %7148 : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads = prim::GetAttr[name="roi_heads"](%7147)
        %7086 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self.1)
        %7087 : __torch__.detectron2.modeling.proposal_generator.rpn.RPN = prim::GetAttr[name="proposal_generator"](%7086)
        %7034 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self.1)
        %7035 : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%7034)
        %6614 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self.1)
        %6615 : Tensor = prim::GetAttr[name="pixel_std"](%6614)
        %6612 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self.1)
        %6613 : Tensor = prim::GetAttr[name="pixel_mean"](%6612)
        %861 : Function = prim::Constant[name="move_device_like"]()
        %x.1 : Tensor = prim::CallFunction(%861, %860, %6613)
        %863 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/meta_arch/rcnn.py:242:0
        %864 : Float(3, 800, 1067, strides=[1, 3201, 3], requires_grad=0, device=cpu) = aten::sub(%x.1, %6613, %863) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/meta_arch/rcnn.py:242:0
        %t : Float(3, 800, 1067, strides=[1, 3201, 3], requires_grad=0, device=cpu) = aten::div(%864, %6615) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/meta_arch/rcnn.py:242:0
        %888 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:87:0
        %889 : int = aten::size(%t, %888) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:87:0
        %890 : Long(device=cpu) = prim::NumToTensor(%889)
        %900 : int = prim::Constant[value=2]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:87:0
        %901 : int = aten::size(%t, %900) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:87:0
        %902 : Long(device=cpu) = prim::NumToTensor(%901)
        %903 : Tensor[] = prim::ListConstruct(%890, %902)
        %904 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:34:0
        %image_size : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::stack(%903, %904) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:34:0
        %906 : Tensor[] = prim::ListConstruct(%image_size)
        %907 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:89:0
        %908 : Long(1, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::stack(%906, %907) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:89:0
        %909 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:89:0
        %910 : bool = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:89:0
        %max_size.1 : Long(2, strides=[1], requires_grad=0, device=cpu), %912 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::max(%908, %909, %910) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:89:0
        %913 : Long(requires_grad=0, device=cpu) = prim::Constant[value={31}]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
        %914 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
        %915 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::add(%max_size.1, %913, %914) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
        %916 : Long(requires_grad=0, device=cpu) = prim::Constant[value={32}]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
        %917 : str = prim::Constant[value="floor"]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
        %918 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::div(%915, %916, %917) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
        %919 : Long(requires_grad=0, device=cpu) = prim::Constant[value={32}]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
        %max_size : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::mul(%918, %919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
        %921 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %922 : int = prim::Constant[value=-1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %923 : Long(requires_grad=0, device=cpu) = aten::select(%max_size, %921, %922) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %924 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %925 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %926 : Long(requires_grad=0, device=cpu) = aten::select(%image_size, %924, %925) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %927 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %928 : Long(requires_grad=0, device=cpu) = aten::sub(%923, %926, %927) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %937 : int = aten::Int(%928)
        %929 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %930 : int = prim::Constant[value=-2]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %931 : Long(requires_grad=0, device=cpu) = aten::select(%max_size, %929, %930) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %932 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %933 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %934 : Long(requires_grad=0, device=cpu) = aten::select(%image_size, %932, %933) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %935 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %936 : Long(requires_grad=0, device=cpu) = aten::sub(%931, %934, %935) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
        %938 : int = aten::Int(%936)
        %939 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:4153:0
        %940 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:4153:0
        %941 : int[] = prim::ListConstruct(%939, %937, %940, %938)
        %942 : float = prim::Constant[value=0.]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:4153:0
        %943 : Float(3, 800, 1088, strides=[870400, 1088, 1], requires_grad=0, device=cpu) = aten::constant_pad_nd(%t, %941, %942) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:4153:0
        %944 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:115:0
        %batched_imgs : Float(1, 3, 800, 1088, strides=[2611200, 870400, 1088, 1], requires_grad=0, device=cpu) = aten::unsqueeze_(%943, %944) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:115:0
        %946 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:129:0
        %x.3 : Float(1, 3, 800, 1088, strides=[2611200, 870400, 1088, 1], requires_grad=0, device=cpu) = aten::contiguous(%batched_imgs, %946) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:129:0
        %7420 : (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor) = prim::CallMethod[name="forward"](%7035, %x.3)
        %7380 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu), %7381 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu), %7382 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu), %7383 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %7384 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %7385 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %7386 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %7387 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu), %7388 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %7389 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %7390 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu) = prim::TupleUnpack(%7420)
        %7421 : Tensor = prim::CallMethod[name="forward"](%7087, %7380, %7381, %7382, %7383, %7384, %7385, %7386, %7387, %7388, %image_size)
        %7422 : (Tensor, Tensor, Tensor, Tensor) = prim::CallMethod[name="forward"](%7148, %7380, %7421, %7381, %7382, %7389, %image_size, %7390)
        %7416 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu), %7417 : Long(2, strides=[2], requires_grad=0, device=cpu), %7418 : Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu), %7419 : Float(2, strides=[1], requires_grad=0, device=cpu) = prim::TupleUnpack(%7422)
        %6418 : (Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu), Long(2, strides=[2], requires_grad=0, device=cpu), Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu), Float(2, strides=[1], requires_grad=0, device=cpu), Long(2, strides=[1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%7416, %7417, %7418, %7419, %image_size)
        return (%6418)
  
    }
  }
  submodules {
    module __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN {
      parameters {
      }
      attributes {
        pixel_mean = ...
        pixel_std = ...
        training = False
        _is_full_backward_hook = None
        backbone = <__torch__.detectron2.modeling.backbone.fpn.FPN object at 0x5595a520bad0>
        proposal_generator = <__torch__.detectron2.modeling.proposal_generator.rpn.RPN object at 0x5595a521da80>
        roi_heads = <__torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads object at 0x5595a5257120>
      }
      methods {
      }
      submodules {
        module __torch__.detectron2.modeling.backbone.fpn.FPN {
          parameters {
          }
          attributes {
            training = False
            _is_full_backward_hook = None
            fpn_lateral2 = <__torch__.detectron2.layers.wrappers.Conv2d object at 0x5595a4cea8e0>
            fpn_output2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d object at 0x5595a4cea7d0>
            fpn_lateral3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d object at 0x5595a601e4b0>
            fpn_output3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d object at 0x5595a4cec4c0>
            fpn_lateral4 = <__torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d object at 0x5595a4ce7000>
            fpn_output4 = <__torch__.detectron2.layers.wrappers.___torch_mangle_4.Conv2d object at 0x5595a4cea4a0>
            fpn_lateral5 = <__torch__.detectron2.layers.wrappers.___torch_mangle_5.Conv2d object at 0x5595a7469110>
            fpn_output5 = <__torch__.detectron2.layers.wrappers.___torch_mangle_6.Conv2d object at 0x5595a2cd5ad0>
            top_block = <__torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool object at 0x5595a6a529c0>
            bottom_up = <__torch__.detectron2.modeling.backbone.resnet.ResNet object at 0x5595a52108c0>
          }
          methods {
            method forward {
              graph(%self.3 : __torch__.detectron2.modeling.backbone.fpn.FPN,
                    %x.3 : Float(1, 3, 800, 1088, strides=[2611200, 870400, 1088, 1], requires_grad=0, device=cpu)):
                %1 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%self.3)
                %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="fpn_output2"](%self.3)
                %3 : __torch__.detectron2.layers.wrappers.Conv2d = prim::GetAttr[name="fpn_lateral2"](%self.3)
                %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="fpn_output3"](%self.3)
                %5 : __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d = prim::GetAttr[name="fpn_lateral3"](%self.3)
                %6 : __torch__.detectron2.layers.wrappers.___torch_mangle_4.Conv2d = prim::GetAttr[name="fpn_output4"](%self.3)
                %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d = prim::GetAttr[name="fpn_lateral4"](%self.3)
                %8 : __torch__.detectron2.layers.wrappers.___torch_mangle_6.Conv2d = prim::GetAttr[name="fpn_output5"](%self.3)
                %9 : __torch__.detectron2.layers.wrappers.___torch_mangle_5.Conv2d = prim::GetAttr[name="fpn_lateral5"](%self.3)
                %10 : __torch__.detectron2.modeling.backbone.resnet.ResNet = prim::GetAttr[name="bottom_up"](%self.3)
                %48 : (Tensor, Tensor, Tensor, Tensor) = prim::CallMethod[name="forward"](%10, %x.3)
                %13 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu), %14 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu), %15 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu), %16 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = prim::TupleUnpack(%48)
                %49 : Tensor = prim::CallMethod[name="forward"](%9, %13)
                %50 : Tensor = prim::CallMethod[name="forward"](%8, %49)
                %19 : NoneType = prim::Constant(), scope: __module.model.backbone
                %20 : float = prim::Constant[value=2.](), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
                %21 : float = prim::Constant[value=2.](), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
                %22 : float[] = prim::ListConstruct(%20, %21), scope: __module.model.backbone
                %top_down_features.1 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::upsample_nearest2d(%49, %19, %22), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
                %51 : Tensor = prim::CallMethod[name="forward"](%7, %14)
                %25 : int = prim::Constant[value=1](), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/fpn.py:155:0
                %x.107 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add(%51, %top_down_features.1, %25), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/fpn.py:155:0
                %52 : Tensor = prim::CallMethod[name="forward"](%6, %x.107)
                %28 : NoneType = prim::Constant(), scope: __module.model.backbone
                %29 : float = prim::Constant[value=2.](), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
                %30 : float = prim::Constant[value=2.](), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
                %31 : float[] = prim::ListConstruct(%29, %30), scope: __module.model.backbone
                %top_down_features.3 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::upsample_nearest2d(%x.107, %28, %31), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
                %53 : Tensor = prim::CallMethod[name="forward"](%5, %15)
                %34 : int = prim::Constant[value=1](), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/fpn.py:155:0
                %x.109 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::add(%53, %top_down_features.3, %34), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/fpn.py:155:0
                %54 : Tensor = prim::CallMethod[name="forward"](%4, %x.109)
                %37 : NoneType = prim::Constant(), scope: __module.model.backbone
                %38 : float = prim::Constant[value=2.](), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
                %39 : float = prim::Constant[value=2.](), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
                %40 : float[] = prim::ListConstruct(%38, %39), scope: __module.model.backbone
                %top_down_features : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::upsample_nearest2d(%x.109, %37, %40), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
                %55 : Tensor = prim::CallMethod[name="forward"](%3, %16)
                %43 : int = prim::Constant[value=1](), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/fpn.py:155:0
                %x.111 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::add(%55, %top_down_features, %43), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/fpn.py:155:0
                %56 : Tensor = prim::CallMethod[name="forward"](%2, %x.111)
                %57 : Tensor = prim::CallMethod[name="forward"](%1, %50)
                %47 : (Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu), Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu), Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%56, %54, %52, %50, %50, %50, %50, %57, %50, %50, %50)
                return (%47)
          
            }
          }
          submodules {
            module __torch__.detectron2.layers.wrappers.Conv2d {
              parameters {
                weight = ...
                bias = ...
              }
              attributes {
                weight = ...
                bias = ...
                training = False
                _is_full_backward_hook = None
              }
              methods {
                method forward {
                  graph(%self.273 : __torch__.detectron2.layers.wrappers.Conv2d,
                        %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                    %2 : Tensor = prim::GetAttr[name="bias"](%self.273)
                    %3 : Tensor = prim::GetAttr[name="weight"](%self.273)
                    %4 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2
                    %7 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2
                    %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2
                    %13 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %14 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2
                    %17 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %18 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %20 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %lateral_features : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    return (%lateral_features)
              
                }
              }
              submodules {
              }
            }
            module __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d {
              parameters {
                weight = ...
                bias = ...
              }
              attributes {
                weight = ...
                bias = ...
                training = False
                _is_full_backward_hook = None
              }
              methods {
                method forward {
                  graph(%self.275 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d,
                        %x.111 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                    %2 : Tensor = prim::GetAttr[name="bias"](%self.275)
                    %3 : Tensor = prim::GetAttr[name="weight"](%self.275)
                    %4 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.backbone/__module.model.backbone.fpn_output2
                    %7 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.backbone/__module.model.backbone.fpn_output2
                    %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.backbone/__module.model.backbone.fpn_output2
                    %13 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %14 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.backbone/__module.model.backbone.fpn_output2
                    %17 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %18 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %20 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %feature_map.1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.111, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    return (%feature_map.1)
              
                }
              }
              submodules {
              }
            }
            module __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d {
              parameters {
                weight = ...
                bias = ...
              }
              attributes {
                weight = ...
                bias = ...
                training = False
                _is_full_backward_hook = None
              }
              methods {
                method forward {
                  graph(%self.269 : __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d,
                        %1 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                    %2 : Tensor = prim::GetAttr[name="bias"](%self.269)
                    %3 : Tensor = prim::GetAttr[name="weight"](%self.269)
                    %4 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3
                    %7 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3
                    %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3
                    %13 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %14 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3
                    %17 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %18 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %20 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %lateral_features.3 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    return (%lateral_features.3)
              
                }
              }
              submodules {
              }
            }
            module __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d {
              parameters {
                weight = ...
                bias = ...
              }
              attributes {
                weight = ...
                bias = ...
                training = False
                _is_full_backward_hook = None
              }
              methods {
                method forward {
                  graph(%self.271 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d,
                        %x.109 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu)):
                    %2 : Tensor = prim::GetAttr[name="bias"](%self.271)
                    %3 : Tensor = prim::GetAttr[name="weight"](%self.271)
                    %4 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.backbone/__module.model.backbone.fpn_output3
                    %7 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.backbone/__module.model.backbone.fpn_output3
                    %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.backbone/__module.model.backbone.fpn_output3
                    %13 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %14 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.backbone/__module.model.backbone.fpn_output3
                    %17 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %18 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %20 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %feature_map.3 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.109, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    return (%feature_map.3)
              
                }
              }
              submodules {
              }
            }
            module __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d {
              parameters {
                weight = ...
                bias = ...
              }
              attributes {
                weight = ...
                bias = ...
                training = False
                _is_full_backward_hook = None
              }
              methods {
                method forward {
                  graph(%self.265 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d,
                        %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                    %2 : Tensor = prim::GetAttr[name="bias"](%self.265)
                    %3 : Tensor = prim::GetAttr[name="weight"](%self.265)
                    %4 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4
                    %7 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4
                    %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4
                    %13 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %14 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4
                    %17 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %18 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %20 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %lateral_features.1 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    return (%lateral_features.1)
              
                }
              }
              submodules {
              }
            }
            module __torch__.detectron2.layers.wrappers.___torch_mangle_4.Conv2d {
              parameters {
                weight = ...
                bias = ...
              }
              attributes {
                weight = ...
                bias = ...
                training = False
                _is_full_backward_hook = None
              }
              methods {
                method forward {
                  graph(%self.267 : __torch__.detectron2.layers.wrappers.___torch_mangle_4.Conv2d,
                        %x.107 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                    %2 : Tensor = prim::GetAttr[name="bias"](%self.267)
                    %3 : Tensor = prim::GetAttr[name="weight"](%self.267)
                    %4 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.backbone/__module.model.backbone.fpn_output4
                    %7 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.backbone/__module.model.backbone.fpn_output4
                    %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.backbone/__module.model.backbone.fpn_output4
                    %13 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %14 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.backbone/__module.model.backbone.fpn_output4
                    %17 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %18 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %20 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %feature_map.5 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.107, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    return (%feature_map.5)
              
                }
              }
              submodules {
              }
            }
            module __torch__.detectron2.layers.wrappers.___torch_mangle_5.Conv2d {
              parameters {
                weight = ...
                bias = ...
              }
              attributes {
                weight = ...
                bias = ...
                training = False
                _is_full_backward_hook = None
              }
              methods {
                method forward {
                  graph(%self.261 : __torch__.detectron2.layers.wrappers.___torch_mangle_5.Conv2d,
                        %1 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu)):
                    %2 : Tensor = prim::GetAttr[name="bias"](%self.261)
                    %3 : Tensor = prim::GetAttr[name="weight"](%self.261)
                    %4 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5
                    %7 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5
                    %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5
                    %13 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %14 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5
                    %17 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %18 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %20 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %x.105 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    return (%x.105)
              
                }
              }
              submodules {
              }
            }
            module __torch__.detectron2.layers.wrappers.___torch_mangle_6.Conv2d {
              parameters {
                weight = ...
                bias = ...
              }
              attributes {
                weight = ...
                bias = ...
                training = False
                _is_full_backward_hook = None
              }
              methods {
                method forward {
                  graph(%self.263 : __torch__.detectron2.layers.wrappers.___torch_mangle_6.Conv2d,
                        %1 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)):
                    %2 : Tensor = prim::GetAttr[name="bias"](%self.263)
                    %3 : Tensor = prim::GetAttr[name="weight"](%self.263)
                    %4 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.backbone/__module.model.backbone.fpn_output5
                    %7 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.backbone/__module.model.backbone.fpn_output5
                    %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.backbone/__module.model.backbone.fpn_output5
                    %13 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %14 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.backbone/__module.model.backbone.fpn_output5
                    %17 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %18 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %20 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    %input.109 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                    return (%input.109)
              
                }
              }
              submodules {
              }
            }
            module __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool {
              parameters {
              }
              attributes {
                training = False
                _is_full_backward_hook = None
              }
              methods {
                method forward {
                  graph(%self.277 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool,
                        %1 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)):
                    %2 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.top_block # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                    %3 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.top_block # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                    %4 : int[] = prim::ListConstruct(%2, %3), scope: __module.model.backbone/__module.model.backbone.top_block
                    %5 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.top_block # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                    %6 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.top_block # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                    %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.top_block
                    %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.top_block # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                    %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.top_block # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                    %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.top_block
                    %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.top_block # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                    %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.top_block # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                    %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.top_block
                    %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.top_block # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                    %feature_map : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu) = aten::max_pool2d(%1, %4, %7, %10, %13, %14), scope: __module.model.backbone/__module.model.backbone.top_block # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                    return (%feature_map)
              
                }
              }
              submodules {
              }
            }
            module __torch__.detectron2.modeling.backbone.resnet.ResNet {
              parameters {
              }
              attributes {
                training = False
                _is_full_backward_hook = None
                stem = <__torch__.detectron2.modeling.backbone.resnet.BasicStem object at 0x5595a4ced130>
                res2 = <__torch__.torch.nn.modules.container.Sequential object at 0x5595a60376c0>
                res3 = <__torch__.torch.nn.modules.container.___torch_mangle_60.Sequential object at 0x5595a4f30c40>
                res4 = <__torch__.torch.nn.modules.container.___torch_mangle_105.Sequential object at 0x5595a4d3f2c0>
                res5 = <__torch__.torch.nn.modules.container.___torch_mangle_129.Sequential object at 0x5595a520f620>
              }
              methods {
                method forward {
                  graph(%self.5 : __torch__.detectron2.modeling.backbone.resnet.ResNet,
                        %x.3 : Float(1, 3, 800, 1088, strides=[2611200, 870400, 1088, 1], requires_grad=0, device=cpu)):
                    %2 : __torch__.torch.nn.modules.container.___torch_mangle_129.Sequential = prim::GetAttr[name="res5"](%self.5)
                    %3 : __torch__.torch.nn.modules.container.___torch_mangle_105.Sequential = prim::GetAttr[name="res4"](%self.5)
                    %4 : __torch__.torch.nn.modules.container.___torch_mangle_60.Sequential = prim::GetAttr[name="res3"](%self.5)
                    %5 : __torch__.torch.nn.modules.container.Sequential = prim::GetAttr[name="res2"](%self.5)
                    %6 : __torch__.detectron2.modeling.backbone.resnet.BasicStem = prim::GetAttr[name="stem"](%self.5)
                    %13 : Tensor = prim::CallMethod[name="forward"](%6, %x.3)
                    %14 : Tensor = prim::CallMethod[name="forward"](%5, %13)
                    %15 : Tensor = prim::CallMethod[name="forward"](%4, %14)
                    %16 : Tensor = prim::CallMethod[name="forward"](%3, %15)
                    %17 : Tensor = prim::CallMethod[name="forward"](%2, %16)
                    %12 : (Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu), Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu), Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%17, %16, %15, %14)
                    return (%12)
              
                }
              }
              submodules {
                module __torch__.detectron2.modeling.backbone.resnet.BasicStem {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                    conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d object at 0x5595a4f5d090>
                  }
                  methods {
                    method forward {
                      graph(%self.7 : __torch__.detectron2.modeling.backbone.resnet.BasicStem,
                            %x.3 : Float(1, 3, 800, 1088, strides=[2611200, 870400, 1088, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv1"](%self.7)
                        %19 : Tensor = prim::CallMethod[name="forward"](%2, %x.3)
                        %input.3 : Float(1, 64, 400, 544, strides=[13926400, 217600, 544, 1], requires_grad=0, device=cpu) = aten::relu_(%19), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:357:0
                        %5 : int = prim::Constant[value=3](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                        %6 : int = prim::Constant[value=3](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                        %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem
                        %8 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                        %9 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                        %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem
                        %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                        %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                        %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem
                        %14 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                        %15 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem
                        %17 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                        %x.7 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::max_pool2d(%input.3, %7, %10, %13, %16, %17), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
                        return (%x.7)
                  
                    }
                  }
                  submodules {
                    module __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d {
                      parameters {
                        weight = ...
                      }
                      attributes {
                        weight = ...
                        training = False
                        _is_full_backward_hook = None
                        norm = <__torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d object at 0x5595a4f5b4f0>
                      }
                      methods {
                        method forward {
                          graph(%self.9 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d,
                                %x.3 : Float(1, 3, 800, 1088, strides=[2611200, 870400, 1088, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.9)
                            %3 : Tensor = prim::GetAttr[name="weight"](%self.9)
                            %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1
                            %5 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %6 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1
                            %8 : int = prim::Constant[value=3](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %9 : int = prim::Constant[value=3](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1
                            %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1
                            %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1
                            %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %input.1 : Float(1, 64, 400, 544, strides=[13926400, 217600, 544, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.3, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                            %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.1)
                            return (%25)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d {
                          parameters {
                          }
                          attributes {
                            weight = ...
                            bias = ...
                            running_mean = ...
                            running_var = ...
                            training = False
                            _is_full_backward_hook = None
                          }
                          methods {
                            method forward {
                              graph(%self.11 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d,
                                    %input.1 : Float(1, 64, 400, 544, strides=[13926400, 217600, 544, 1], requires_grad=0, device=cpu)):
                                %2 : Tensor = prim::GetAttr[name="running_var"](%self.11)
                                %3 : Tensor = prim::GetAttr[name="running_mean"](%self.11)
                                %4 : Tensor = prim::GetAttr[name="bias"](%self.11)
                                %5 : Tensor = prim::GetAttr[name="weight"](%self.11)
                                %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1/__module.model.backbone.bottom_up.stem.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1/__module.model.backbone.bottom_up.stem.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1/__module.model.backbone.bottom_up.stem.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1/__module.model.backbone.bottom_up.stem.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                %x.5 : Float(1, 64, 400, 544, strides=[13926400, 217600, 544, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.1, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1/__module.model.backbone.bottom_up.stem.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                return (%x.5)
                          
                            }
                          }
                          submodules {
                          }
                        }
                      }
                    }
                  }
                }
                module __torch__.torch.nn.modules.container.Sequential {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                    0 = <__torch__.detectron2.modeling.backbone.resnet.BottleneckBlock object at 0x5595a4cfe1d0>
                    1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_22.BottleneckBlock object at 0x5595a6029880>
                    2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_29.BottleneckBlock object at 0x5595a60361f0>
                  }
                  methods {
                    method forward {
                      graph(%self.13 : __torch__.torch.nn.modules.container.Sequential,
                            %1 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_29.BottleneckBlock = prim::GetAttr[name="2"](%self.13)
                        %3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_22.BottleneckBlock = prim::GetAttr[name="1"](%self.13)
                        %4 : __torch__.detectron2.modeling.backbone.resnet.BottleneckBlock = prim::GetAttr[name="0"](%self.13)
                        %8 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                        %9 : Tensor = prim::CallMethod[name="forward"](%3, %8)
                        %10 : Tensor = prim::CallMethod[name="forward"](%2, %9)
                        return (%10)
                  
                    }
                  }
                  submodules {
                    module __torch__.detectron2.modeling.backbone.resnet.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_9.Conv2d object at 0x5595a4f60720>
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_11.Conv2d object at 0x5595a4ce66e0>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d object at 0x5595a4cf61e0>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d object at 0x5595a4cf9e80>
                      }
                      methods {
                        method forward {
                          graph(%self.15 : __torch__.detectron2.modeling.backbone.resnet.BottleneckBlock,
                                %1 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_9.Conv2d = prim::GetAttr[name="shortcut"](%self.15)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv3"](%self.15)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d = prim::GetAttr[name="conv2"](%self.15)
                            %5 : __torch__.detectron2.layers.wrappers.___torch_mangle_11.Conv2d = prim::GetAttr[name="conv1"](%self.15)
                            %15 : Tensor = prim::CallMethod[name="forward"](%5, %1)
                            %x.9 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%15), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %16 : Tensor = prim::CallMethod[name="forward"](%4, %x.9)
                            %x.11 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %17 : Tensor = prim::CallMethod[name="forward"](%3, %x.11)
                            %18 : Tensor = prim::CallMethod[name="forward"](%2, %1)
                            %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.7 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::add_(%17, %18, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.13 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.7), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.13)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_9.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_8.FrozenBatchNorm2d object at 0x5595a4cf0900>
                          }
                          methods {
                            method forward {
                              graph(%self.29 : __torch__.detectron2.layers.wrappers.___torch_mangle_9.Conv2d,
                                    %1 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_8.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.29)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.29)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.11 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.11)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_8.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.31 : __torch__.detectron2.layers.batch_norm.___torch_mangle_8.FrozenBatchNorm2d,
                                        %input.11 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.31)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.31)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.31)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.31)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut/__module.model.backbone.bottom_up.res2.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut/__module.model.backbone.bottom_up.res2.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut/__module.model.backbone.bottom_up.res2.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut/__module.model.backbone.bottom_up.res2.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %shortcut.1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.11, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut/__module.model.backbone.bottom_up.res2.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%shortcut.1)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_11.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_10.FrozenBatchNorm2d object at 0x5595a4cf4180>
                          }
                          methods {
                            method forward {
                              graph(%self.17 : __torch__.detectron2.layers.wrappers.___torch_mangle_11.Conv2d,
                                    %1 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_10.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.17)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.17)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.5 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.5)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_10.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.19 : __torch__.detectron2.layers.batch_norm.___torch_mangle_10.FrozenBatchNorm2d,
                                        %input.5 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.19)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.19)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.19)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.19)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1/__module.model.backbone.bottom_up.res2.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1/__module.model.backbone.bottom_up.res2.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1/__module.model.backbone.bottom_up.res2.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1/__module.model.backbone.bottom_up.res2.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.1 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.5, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1/__module.model.backbone.bottom_up.res2.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.1)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_12.FrozenBatchNorm2d object at 0x5595a4cf7ef0>
                          }
                          methods {
                            method forward {
                              graph(%self.21 : __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d,
                                    %x.9 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_12.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.21)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.21)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.7 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.9, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.7)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_12.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.23 : __torch__.detectron2.layers.batch_norm.___torch_mangle_12.FrozenBatchNorm2d,
                                        %input.7 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.23)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.23)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.23)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.23)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2/__module.model.backbone.bottom_up.res2.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2/__module.model.backbone.bottom_up.res2.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2/__module.model.backbone.bottom_up.res2.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2/__module.model.backbone.bottom_up.res2.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.3 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.7, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2/__module.model.backbone.bottom_up.res2.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.3)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_14.FrozenBatchNorm2d object at 0x5595a4cfb900>
                          }
                          methods {
                            method forward {
                              graph(%self.25 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d,
                                    %x.11 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_14.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.25)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.25)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.9 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.11, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.9)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_14.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.27 : __torch__.detectron2.layers.batch_norm.___torch_mangle_14.FrozenBatchNorm2d,
                                        %input.9 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.27)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.27)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.27)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.27)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3/__module.model.backbone.bottom_up.res2.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3/__module.model.backbone.bottom_up.res2.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3/__module.model.backbone.bottom_up.res2.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3/__module.model.backbone.bottom_up.res2.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.5 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.9, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3/__module.model.backbone.bottom_up.res2.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.5)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_22.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_17.Conv2d object at 0x5595a4cffd40>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d object at 0x5595a6021f50>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_21.Conv2d object at 0x5595a6025620>
                      }
                      methods {
                        method forward {
                          graph(%self.33 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_22.BottleneckBlock,
                                %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_21.Conv2d = prim::GetAttr[name="conv3"](%self.33)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="conv2"](%self.33)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_17.Conv2d = prim::GetAttr[name="conv1"](%self.33)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.15 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.15)
                            %x.17 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.17)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.15 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.19 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.15), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.19)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_17.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_16.FrozenBatchNorm2d object at 0x5595a6020070>
                          }
                          methods {
                            method forward {
                              graph(%self.35 : __torch__.detectron2.layers.wrappers.___torch_mangle_17.Conv2d,
                                    %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_16.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.35)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.35)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.13 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.13)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_16.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.37 : __torch__.detectron2.layers.batch_norm.___torch_mangle_16.FrozenBatchNorm2d,
                                        %input.13 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.37)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.37)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.37)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.37)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1/__module.model.backbone.bottom_up.res2.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1/__module.model.backbone.bottom_up.res2.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1/__module.model.backbone.bottom_up.res2.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1/__module.model.backbone.bottom_up.res2.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.9 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.13, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1/__module.model.backbone.bottom_up.res2.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.9)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_18.FrozenBatchNorm2d object at 0x5595a60237e0>
                          }
                          methods {
                            method forward {
                              graph(%self.39 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d,
                                    %x.15 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_18.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.39)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.39)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.15 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.15, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.15)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_18.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.41 : __torch__.detectron2.layers.batch_norm.___torch_mangle_18.FrozenBatchNorm2d,
                                        %input.15 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.41)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.41)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.41)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.41)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2/__module.model.backbone.bottom_up.res2.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2/__module.model.backbone.bottom_up.res2.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2/__module.model.backbone.bottom_up.res2.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2/__module.model.backbone.bottom_up.res2.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.11 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.15, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2/__module.model.backbone.bottom_up.res2.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.11)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_21.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_20.FrozenBatchNorm2d object at 0x5595a6026eb0>
                          }
                          methods {
                            method forward {
                              graph(%self.43 : __torch__.detectron2.layers.wrappers.___torch_mangle_21.Conv2d,
                                    %x.17 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_20.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.43)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.43)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.17 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.17, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.17)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_20.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.45 : __torch__.detectron2.layers.batch_norm.___torch_mangle_20.FrozenBatchNorm2d,
                                        %input.17 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.45)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.45)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.45)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.45)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3/__module.model.backbone.bottom_up.res2.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3/__module.model.backbone.bottom_up.res2.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3/__module.model.backbone.bottom_up.res2.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3/__module.model.backbone.bottom_up.res2.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.13 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.17, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3/__module.model.backbone.bottom_up.res2.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.13)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_29.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d object at 0x5595a60262f0>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d object at 0x5595a602dfd0>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_28.Conv2d object at 0x5595a60316a0>
                      }
                      methods {
                        method forward {
                          graph(%self.47 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_29.BottleneckBlock,
                                %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_28.Conv2d = prim::GetAttr[name="conv3"](%self.47)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d = prim::GetAttr[name="conv2"](%self.47)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d = prim::GetAttr[name="conv1"](%self.47)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.21 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.21)
                            %x.23 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.23)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.23 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.25 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.23), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.25)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_23.FrozenBatchNorm2d object at 0x5595a602c180>
                          }
                          methods {
                            method forward {
                              graph(%self.49 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d,
                                    %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_23.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.49)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.49)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.19 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.19)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_23.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.51 : __torch__.detectron2.layers.batch_norm.___torch_mangle_23.FrozenBatchNorm2d,
                                        %input.19 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.51)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.51)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.51)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.51)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1/__module.model.backbone.bottom_up.res2.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1/__module.model.backbone.bottom_up.res2.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1/__module.model.backbone.bottom_up.res2.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1/__module.model.backbone.bottom_up.res2.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.17 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.19, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1/__module.model.backbone.bottom_up.res2.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.17)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_25.FrozenBatchNorm2d object at 0x5595a602f860>
                          }
                          methods {
                            method forward {
                              graph(%self.53 : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d,
                                    %x.21 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_25.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.53)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.53)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.21 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.21, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.21)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_25.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.55 : __torch__.detectron2.layers.batch_norm.___torch_mangle_25.FrozenBatchNorm2d,
                                        %input.21 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.55)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.55)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.55)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.55)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2/__module.model.backbone.bottom_up.res2.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2/__module.model.backbone.bottom_up.res2.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2/__module.model.backbone.bottom_up.res2.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2/__module.model.backbone.bottom_up.res2.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.19 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.21, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2/__module.model.backbone.bottom_up.res2.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.19)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_28.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_27.FrozenBatchNorm2d object at 0x5595a6033820>
                          }
                          methods {
                            method forward {
                              graph(%self.57 : __torch__.detectron2.layers.wrappers.___torch_mangle_28.Conv2d,
                                    %x.23 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_27.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.57)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.57)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.23 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.23, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.23)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_27.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.59 : __torch__.detectron2.layers.batch_norm.___torch_mangle_27.FrozenBatchNorm2d,
                                        %input.23 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.59)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.59)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.59)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.59)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3/__module.model.backbone.bottom_up.res2.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3/__module.model.backbone.bottom_up.res2.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3/__module.model.backbone.bottom_up.res2.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3/__module.model.backbone.bottom_up.res2.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.21 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.23, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3/__module.model.backbone.bottom_up.res2.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.21)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                module __torch__.torch.nn.modules.container.___torch_mangle_60.Sequential {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                    0 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_38.BottleneckBlock object at 0x5595a6047aa0>
                    1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_45.BottleneckBlock object at 0x5595a6052be0>
                    2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_52.BottleneckBlock object at 0x5595a4f23d40>
                    3 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_59.BottleneckBlock object at 0x5595a4f303e0>
                  }
                  methods {
                    method forward {
                      graph(%self.61 : __torch__.torch.nn.modules.container.___torch_mangle_60.Sequential,
                            %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_59.BottleneckBlock = prim::GetAttr[name="3"](%self.61)
                        %3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_52.BottleneckBlock = prim::GetAttr[name="2"](%self.61)
                        %4 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_45.BottleneckBlock = prim::GetAttr[name="1"](%self.61)
                        %5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_38.BottleneckBlock = prim::GetAttr[name="0"](%self.61)
                        %10 : Tensor = prim::CallMethod[name="forward"](%5, %1)
                        %11 : Tensor = prim::CallMethod[name="forward"](%4, %10)
                        %12 : Tensor = prim::CallMethod[name="forward"](%3, %11)
                        %13 : Tensor = prim::CallMethod[name="forward"](%2, %12)
                        return (%13)
                  
                    }
                  }
                  submodules {
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_38.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d object at 0x5595a6037fd0>
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_33.Conv2d object at 0x5595a603cc20>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_35.Conv2d object at 0x5595a60402f0>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_37.Conv2d object at 0x5595a60437c0>
                      }
                      methods {
                        method forward {
                          graph(%self.63 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_38.BottleneckBlock,
                                %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d = prim::GetAttr[name="shortcut"](%self.63)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_37.Conv2d = prim::GetAttr[name="conv3"](%self.63)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_35.Conv2d = prim::GetAttr[name="conv2"](%self.63)
                            %5 : __torch__.detectron2.layers.wrappers.___torch_mangle_33.Conv2d = prim::GetAttr[name="conv1"](%self.63)
                            %15 : Tensor = prim::CallMethod[name="forward"](%5, %1)
                            %x.27 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%15), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %16 : Tensor = prim::CallMethod[name="forward"](%4, %x.27)
                            %x.29 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %17 : Tensor = prim::CallMethod[name="forward"](%3, %x.29)
                            %18 : Tensor = prim::CallMethod[name="forward"](%2, %1)
                            %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.31 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::add_(%17, %18, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.31 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.31), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.31)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_30.FrozenBatchNorm2d object at 0x5595a603aea0>
                          }
                          methods {
                            method forward {
                              graph(%self.77 : __torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d,
                                    %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_30.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.77)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.77)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut
                                %5 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.31 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.31)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_30.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.79 : __torch__.detectron2.layers.batch_norm.___torch_mangle_30.FrozenBatchNorm2d,
                                        %input.31 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.79)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.79)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.79)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.79)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut/__module.model.backbone.bottom_up.res3.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut/__module.model.backbone.bottom_up.res3.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut/__module.model.backbone.bottom_up.res3.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut/__module.model.backbone.bottom_up.res3.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %shortcut.3 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.31, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut/__module.model.backbone.bottom_up.res3.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%shortcut.3)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_33.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_32.FrozenBatchNorm2d object at 0x5595a603e4b0>
                          }
                          methods {
                            method forward {
                              graph(%self.65 : __torch__.detectron2.layers.wrappers.___torch_mangle_33.Conv2d,
                                    %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_32.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.65)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.65)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1
                                %5 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.25 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.25)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_32.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.67 : __torch__.detectron2.layers.batch_norm.___torch_mangle_32.FrozenBatchNorm2d,
                                        %input.25 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.67)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.67)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.67)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.67)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1/__module.model.backbone.bottom_up.res3.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1/__module.model.backbone.bottom_up.res3.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1/__module.model.backbone.bottom_up.res3.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1/__module.model.backbone.bottom_up.res3.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.25 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.25, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1/__module.model.backbone.bottom_up.res3.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.25)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_35.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_34.FrozenBatchNorm2d object at 0x5595a60419d0>
                          }
                          methods {
                            method forward {
                              graph(%self.69 : __torch__.detectron2.layers.wrappers.___torch_mangle_35.Conv2d,
                                    %x.27 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_34.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.69)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.69)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.27 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.27, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.27)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_34.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.71 : __torch__.detectron2.layers.batch_norm.___torch_mangle_34.FrozenBatchNorm2d,
                                        %input.27 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.71)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.71)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.71)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.71)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2/__module.model.backbone.bottom_up.res3.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2/__module.model.backbone.bottom_up.res3.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2/__module.model.backbone.bottom_up.res3.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2/__module.model.backbone.bottom_up.res3.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.27 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.27, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2/__module.model.backbone.bottom_up.res3.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.27)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_37.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_36.FrozenBatchNorm2d object at 0x5595a60450d0>
                          }
                          methods {
                            method forward {
                              graph(%self.73 : __torch__.detectron2.layers.wrappers.___torch_mangle_37.Conv2d,
                                    %x.29 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_36.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.73)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.73)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.29 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.29, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.29)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_36.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.75 : __torch__.detectron2.layers.batch_norm.___torch_mangle_36.FrozenBatchNorm2d,
                                        %input.29 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.75)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.75)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.75)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.75)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3/__module.model.backbone.bottom_up.res3.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3/__module.model.backbone.bottom_up.res3.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3/__module.model.backbone.bottom_up.res3.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3/__module.model.backbone.bottom_up.res3.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.29 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.29, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3/__module.model.backbone.bottom_up.res3.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.29)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_45.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_40.Conv2d object at 0x5595a6046ec0>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_42.Conv2d object at 0x5595a604c010>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_44.Conv2d object at 0x5595a604f4e0>
                      }
                      methods {
                        method forward {
                          graph(%self.81 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_45.BottleneckBlock,
                                %1 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_44.Conv2d = prim::GetAttr[name="conv3"](%self.81)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_42.Conv2d = prim::GetAttr[name="conv2"](%self.81)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_40.Conv2d = prim::GetAttr[name="conv1"](%self.81)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.33 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.33)
                            %x.35 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.35)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.39 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.37 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.39), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.37)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_40.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_39.FrozenBatchNorm2d object at 0x5595a6049fa0>
                          }
                          methods {
                            method forward {
                              graph(%self.83 : __torch__.detectron2.layers.wrappers.___torch_mangle_40.Conv2d,
                                    %1 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_39.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.83)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.83)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.33 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.33)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_39.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.85 : __torch__.detectron2.layers.batch_norm.___torch_mangle_39.FrozenBatchNorm2d,
                                        %input.33 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.85)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.85)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.85)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.85)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1/__module.model.backbone.bottom_up.res3.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1/__module.model.backbone.bottom_up.res3.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1/__module.model.backbone.bottom_up.res3.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1/__module.model.backbone.bottom_up.res3.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.33 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.33, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1/__module.model.backbone.bottom_up.res3.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.33)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_42.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_41.FrozenBatchNorm2d object at 0x5595a604d6f0>
                          }
                          methods {
                            method forward {
                              graph(%self.87 : __torch__.detectron2.layers.wrappers.___torch_mangle_42.Conv2d,
                                    %x.33 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_41.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.87)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.87)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.35 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.33, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.35)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_41.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.89 : __torch__.detectron2.layers.batch_norm.___torch_mangle_41.FrozenBatchNorm2d,
                                        %input.35 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.89)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.89)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.89)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.89)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2/__module.model.backbone.bottom_up.res3.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2/__module.model.backbone.bottom_up.res3.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2/__module.model.backbone.bottom_up.res3.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2/__module.model.backbone.bottom_up.res3.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.35 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.35, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2/__module.model.backbone.bottom_up.res3.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.35)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_44.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_43.FrozenBatchNorm2d object at 0x5595a6050bc0>
                          }
                          methods {
                            method forward {
                              graph(%self.91 : __torch__.detectron2.layers.wrappers.___torch_mangle_44.Conv2d,
                                    %x.35 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_43.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.91)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.91)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.37 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.35, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.37)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_43.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.93 : __torch__.detectron2.layers.batch_norm.___torch_mangle_43.FrozenBatchNorm2d,
                                        %input.37 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.93)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.93)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.93)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.93)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3/__module.model.backbone.bottom_up.res3.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3/__module.model.backbone.bottom_up.res3.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3/__module.model.backbone.bottom_up.res3.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3/__module.model.backbone.bottom_up.res3.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.37 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.37, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3/__module.model.backbone.bottom_up.res3.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.37)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_52.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_47.Conv2d object at 0x5595a60501b0>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_49.Conv2d object at 0x5595a4f1c810>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_51.Conv2d object at 0x5595a4f1fce0>
                      }
                      methods {
                        method forward {
                          graph(%self.95 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_52.BottleneckBlock,
                                %1 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_51.Conv2d = prim::GetAttr[name="conv3"](%self.95)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_49.Conv2d = prim::GetAttr[name="conv2"](%self.95)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_47.Conv2d = prim::GetAttr[name="conv1"](%self.95)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.39 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.39)
                            %x.41 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.41)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.47 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.43 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.47), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.43)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_47.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_46.FrozenBatchNorm2d object at 0x5595a4f1a810>
                          }
                          methods {
                            method forward {
                              graph(%self.97 : __torch__.detectron2.layers.wrappers.___torch_mangle_47.Conv2d,
                                    %1 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_46.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.97)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.97)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.39 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.39)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_46.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.99 : __torch__.detectron2.layers.batch_norm.___torch_mangle_46.FrozenBatchNorm2d,
                                        %input.39 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.99)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.99)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.99)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.99)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1/__module.model.backbone.bottom_up.res3.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1/__module.model.backbone.bottom_up.res3.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1/__module.model.backbone.bottom_up.res3.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1/__module.model.backbone.bottom_up.res3.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.41 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.39, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1/__module.model.backbone.bottom_up.res3.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.41)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_49.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_48.FrozenBatchNorm2d object at 0x5595a4f1def0>
                          }
                          methods {
                            method forward {
                              graph(%self.101 : __torch__.detectron2.layers.wrappers.___torch_mangle_49.Conv2d,
                                    %x.39 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_48.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.101)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.101)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.41 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.39, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.41)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_48.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.103 : __torch__.detectron2.layers.batch_norm.___torch_mangle_48.FrozenBatchNorm2d,
                                        %input.41 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.103)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.103)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.103)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.103)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2/__module.model.backbone.bottom_up.res3.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2/__module.model.backbone.bottom_up.res3.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2/__module.model.backbone.bottom_up.res3.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2/__module.model.backbone.bottom_up.res3.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.43 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.41, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2/__module.model.backbone.bottom_up.res3.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.43)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_51.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_50.FrozenBatchNorm2d object at 0x5595a4f213c0>
                          }
                          methods {
                            method forward {
                              graph(%self.105 : __torch__.detectron2.layers.wrappers.___torch_mangle_51.Conv2d,
                                    %x.41 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_50.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.105)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.105)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.43 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.41, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.43)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_50.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.107 : __torch__.detectron2.layers.batch_norm.___torch_mangle_50.FrozenBatchNorm2d,
                                        %input.43 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.107)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.107)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.107)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.107)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3/__module.model.backbone.bottom_up.res3.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3/__module.model.backbone.bottom_up.res3.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3/__module.model.backbone.bottom_up.res3.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3/__module.model.backbone.bottom_up.res3.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.45 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.43, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3/__module.model.backbone.bottom_up.res3.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.45)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_59.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_54.Conv2d object at 0x5595a4f209a0>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_56.Conv2d object at 0x5595a4f286a0>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_58.Conv2d object at 0x5595a4f2c380>
                      }
                      methods {
                        method forward {
                          graph(%self.109 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_59.BottleneckBlock,
                                %1 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_58.Conv2d = prim::GetAttr[name="conv3"](%self.109)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_56.Conv2d = prim::GetAttr[name="conv2"](%self.109)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_54.Conv2d = prim::GetAttr[name="conv1"](%self.109)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.45 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.45)
                            %x.47 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.47)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.55 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.49 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.55), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.49)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_54.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_53.FrozenBatchNorm2d object at 0x5595a4f26650>
                          }
                          methods {
                            method forward {
                              graph(%self.111 : __torch__.detectron2.layers.wrappers.___torch_mangle_54.Conv2d,
                                    %1 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_53.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.111)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.111)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.45 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.45)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_53.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.113 : __torch__.detectron2.layers.batch_norm.___torch_mangle_53.FrozenBatchNorm2d,
                                        %input.45 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.113)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.113)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.113)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.113)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1/__module.model.backbone.bottom_up.res3.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1/__module.model.backbone.bottom_up.res3.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1/__module.model.backbone.bottom_up.res3.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1/__module.model.backbone.bottom_up.res3.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.49 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.45, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1/__module.model.backbone.bottom_up.res3.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.49)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_56.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_55.FrozenBatchNorm2d object at 0x5595a4f29d80>
                          }
                          methods {
                            method forward {
                              graph(%self.115 : __torch__.detectron2.layers.wrappers.___torch_mangle_56.Conv2d,
                                    %x.45 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_55.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.115)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.115)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.47 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.45, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.47)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_55.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.117 : __torch__.detectron2.layers.batch_norm.___torch_mangle_55.FrozenBatchNorm2d,
                                        %input.47 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.117)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.117)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.117)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.117)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2/__module.model.backbone.bottom_up.res3.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2/__module.model.backbone.bottom_up.res3.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2/__module.model.backbone.bottom_up.res3.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2/__module.model.backbone.bottom_up.res3.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.51 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.47, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2/__module.model.backbone.bottom_up.res3.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.51)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_58.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_57.FrozenBatchNorm2d object at 0x5595a4f2da60>
                          }
                          methods {
                            method forward {
                              graph(%self.119 : __torch__.detectron2.layers.wrappers.___torch_mangle_58.Conv2d,
                                    %x.47 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_57.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.119)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.119)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.49 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.47, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.49)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_57.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.121 : __torch__.detectron2.layers.batch_norm.___torch_mangle_57.FrozenBatchNorm2d,
                                        %input.49 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.121)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.121)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.121)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.121)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3/__module.model.backbone.bottom_up.res3.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3/__module.model.backbone.bottom_up.res3.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3/__module.model.backbone.bottom_up.res3.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3/__module.model.backbone.bottom_up.res3.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.53 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.49, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3/__module.model.backbone.bottom_up.res3.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.53)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                module __torch__.torch.nn.modules.container.___torch_mangle_105.Sequential {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                    0 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_69.BottleneckBlock object at 0x5595a4f40ec0>
                    1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_76.BottleneckBlock object at 0x5595a4d0cc60>
                    2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_83.BottleneckBlock object at 0x5595a60334e0>
                    3 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_90.BottleneckBlock object at 0x5595a4d27820>
                    4 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_97.BottleneckBlock object at 0x5595a4d33100>
                    5 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_104.BottleneckBlock object at 0x5595a4d3ea00>
                  }
                  methods {
                    method forward {
                      graph(%self.123 : __torch__.torch.nn.modules.container.___torch_mangle_105.Sequential,
                            %1 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_104.BottleneckBlock = prim::GetAttr[name="5"](%self.123)
                        %3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_97.BottleneckBlock = prim::GetAttr[name="4"](%self.123)
                        %4 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_90.BottleneckBlock = prim::GetAttr[name="3"](%self.123)
                        %5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_83.BottleneckBlock = prim::GetAttr[name="2"](%self.123)
                        %6 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_76.BottleneckBlock = prim::GetAttr[name="1"](%self.123)
                        %7 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_69.BottleneckBlock = prim::GetAttr[name="0"](%self.123)
                        %14 : Tensor = prim::CallMethod[name="forward"](%7, %1)
                        %15 : Tensor = prim::CallMethod[name="forward"](%6, %14)
                        %16 : Tensor = prim::CallMethod[name="forward"](%5, %15)
                        %17 : Tensor = prim::CallMethod[name="forward"](%4, %16)
                        %18 : Tensor = prim::CallMethod[name="forward"](%3, %17)
                        %19 : Tensor = prim::CallMethod[name="forward"](%2, %18)
                        return (%19)
                  
                    }
                  }
                  submodules {
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_69.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_62.Conv2d object at 0x5595a4f2d040>
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_64.Conv2d object at 0x5595a4f36470>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_66.Conv2d object at 0x5595a4f39940>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_68.Conv2d object at 0x5595a4f3ce10>
                      }
                      methods {
                        method forward {
                          graph(%self.125 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_69.BottleneckBlock,
                                %1 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_62.Conv2d = prim::GetAttr[name="shortcut"](%self.125)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_68.Conv2d = prim::GetAttr[name="conv3"](%self.125)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_66.Conv2d = prim::GetAttr[name="conv2"](%self.125)
                            %5 : __torch__.detectron2.layers.wrappers.___torch_mangle_64.Conv2d = prim::GetAttr[name="conv1"](%self.125)
                            %15 : Tensor = prim::CallMethod[name="forward"](%5, %1)
                            %x.51 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%15), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %16 : Tensor = prim::CallMethod[name="forward"](%4, %x.51)
                            %x.53 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %17 : Tensor = prim::CallMethod[name="forward"](%3, %x.53)
                            %18 : Tensor = prim::CallMethod[name="forward"](%2, %1)
                            %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.63 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%17, %18, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.55 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.63), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.55)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_62.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_61.FrozenBatchNorm2d object at 0x5595a4f34600>
                          }
                          methods {
                            method forward {
                              graph(%self.139 : __torch__.detectron2.layers.wrappers.___torch_mangle_62.Conv2d,
                                    %1 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_61.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.139)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.139)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut
                                %5 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.57 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.57)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_61.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.141 : __torch__.detectron2.layers.batch_norm.___torch_mangle_61.FrozenBatchNorm2d,
                                        %input.57 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.141)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.141)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.141)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.141)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut/__module.model.backbone.bottom_up.res4.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut/__module.model.backbone.bottom_up.res4.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut/__module.model.backbone.bottom_up.res4.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut/__module.model.backbone.bottom_up.res4.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %shortcut.5 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.57, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut/__module.model.backbone.bottom_up.res4.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%shortcut.5)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_64.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_63.FrozenBatchNorm2d object at 0x5595a4f37b50>
                          }
                          methods {
                            method forward {
                              graph(%self.127 : __torch__.detectron2.layers.wrappers.___torch_mangle_64.Conv2d,
                                    %1 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_63.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.127)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.127)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1
                                %5 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.51 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.51)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_63.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.129 : __torch__.detectron2.layers.batch_norm.___torch_mangle_63.FrozenBatchNorm2d,
                                        %input.51 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.129)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.129)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.129)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.129)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1/__module.model.backbone.bottom_up.res4.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1/__module.model.backbone.bottom_up.res4.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1/__module.model.backbone.bottom_up.res4.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1/__module.model.backbone.bottom_up.res4.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.57 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.51, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1/__module.model.backbone.bottom_up.res4.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.57)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_66.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_65.FrozenBatchNorm2d object at 0x5595a4f3b020>
                          }
                          methods {
                            method forward {
                              graph(%self.131 : __torch__.detectron2.layers.wrappers.___torch_mangle_66.Conv2d,
                                    %x.51 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_65.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.131)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.131)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.53 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.51, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.53)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_65.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.133 : __torch__.detectron2.layers.batch_norm.___torch_mangle_65.FrozenBatchNorm2d,
                                        %input.53 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.133)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.133)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.133)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.133)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2/__module.model.backbone.bottom_up.res4.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2/__module.model.backbone.bottom_up.res4.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2/__module.model.backbone.bottom_up.res4.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2/__module.model.backbone.bottom_up.res4.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.59 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.53, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2/__module.model.backbone.bottom_up.res4.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.59)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_68.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_67.FrozenBatchNorm2d object at 0x5595a4f3e4f0>
                          }
                          methods {
                            method forward {
                              graph(%self.135 : __torch__.detectron2.layers.wrappers.___torch_mangle_68.Conv2d,
                                    %x.53 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_67.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.135)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.135)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.55 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.53, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.55)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_67.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.137 : __torch__.detectron2.layers.batch_norm.___torch_mangle_67.FrozenBatchNorm2d,
                                        %input.55 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.137)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.137)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.137)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.137)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3/__module.model.backbone.bottom_up.res4.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3/__module.model.backbone.bottom_up.res4.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3/__module.model.backbone.bottom_up.res4.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3/__module.model.backbone.bottom_up.res4.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.61 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.55, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3/__module.model.backbone.bottom_up.res4.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.61)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_76.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_71.Conv2d object at 0x5595a4f402e0>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_73.Conv2d object at 0x5595a4f46ee0>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_75.Conv2d object at 0x5595a4f4a3b0>
                      }
                      methods {
                        method forward {
                          graph(%self.143 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_76.BottleneckBlock,
                                %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_75.Conv2d = prim::GetAttr[name="conv3"](%self.143)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_73.Conv2d = prim::GetAttr[name="conv2"](%self.143)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_71.Conv2d = prim::GetAttr[name="conv1"](%self.143)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.57 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.57)
                            %x.59 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.59)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.71 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.61 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.71), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.61)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_71.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_70.FrozenBatchNorm2d object at 0x5595a4f435f0>
                          }
                          methods {
                            method forward {
                              graph(%self.145 : __torch__.detectron2.layers.wrappers.___torch_mangle_71.Conv2d,
                                    %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_70.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.145)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.145)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.59 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.59)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_70.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.147 : __torch__.detectron2.layers.batch_norm.___torch_mangle_70.FrozenBatchNorm2d,
                                        %input.59 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.147)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.147)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.147)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.147)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1/__module.model.backbone.bottom_up.res4.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1/__module.model.backbone.bottom_up.res4.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1/__module.model.backbone.bottom_up.res4.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1/__module.model.backbone.bottom_up.res4.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.65 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.59, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1/__module.model.backbone.bottom_up.res4.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.65)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_73.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_72.FrozenBatchNorm2d object at 0x5595a4f485c0>
                          }
                          methods {
                            method forward {
                              graph(%self.149 : __torch__.detectron2.layers.wrappers.___torch_mangle_73.Conv2d,
                                    %x.57 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_72.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.149)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.149)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.61 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.57, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.61)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_72.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.151 : __torch__.detectron2.layers.batch_norm.___torch_mangle_72.FrozenBatchNorm2d,
                                        %input.61 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.151)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.151)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.151)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.151)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2/__module.model.backbone.bottom_up.res4.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2/__module.model.backbone.bottom_up.res4.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2/__module.model.backbone.bottom_up.res4.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2/__module.model.backbone.bottom_up.res4.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.67 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.61, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2/__module.model.backbone.bottom_up.res4.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.67)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_75.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_74.FrozenBatchNorm2d object at 0x5595a4f4ba90>
                          }
                          methods {
                            method forward {
                              graph(%self.153 : __torch__.detectron2.layers.wrappers.___torch_mangle_75.Conv2d,
                                    %x.59 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_74.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.153)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.153)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.63 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.59, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.63)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_74.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.155 : __torch__.detectron2.layers.batch_norm.___torch_mangle_74.FrozenBatchNorm2d,
                                        %input.63 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.155)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.155)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.155)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.155)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3/__module.model.backbone.bottom_up.res4.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3/__module.model.backbone.bottom_up.res4.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3/__module.model.backbone.bottom_up.res4.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3/__module.model.backbone.bottom_up.res4.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.69 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.63, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3/__module.model.backbone.bottom_up.res4.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.69)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_83.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_78.Conv2d object at 0x5595a4f4b080>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_80.Conv2d object at 0x5595a2e6cad0>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_82.Conv2d object at 0x5595a4d16af0>
                      }
                      methods {
                        method forward {
                          graph(%self.157 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_83.BottleneckBlock,
                                %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_82.Conv2d = prim::GetAttr[name="conv3"](%self.157)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_80.Conv2d = prim::GetAttr[name="conv2"](%self.157)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_78.Conv2d = prim::GetAttr[name="conv1"](%self.157)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.63 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.63)
                            %x.65 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.65)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.79 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.67 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.79), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.67)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_78.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_77.FrozenBatchNorm2d object at 0x5595a2e6b630>
                          }
                          methods {
                            method forward {
                              graph(%self.159 : __torch__.detectron2.layers.wrappers.___torch_mangle_78.Conv2d,
                                    %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_77.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.159)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.159)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.65 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.65)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_77.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.161 : __torch__.detectron2.layers.batch_norm.___torch_mangle_77.FrozenBatchNorm2d,
                                        %input.65 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.161)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.161)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.161)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.161)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1/__module.model.backbone.bottom_up.res4.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1/__module.model.backbone.bottom_up.res4.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1/__module.model.backbone.bottom_up.res4.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1/__module.model.backbone.bottom_up.res4.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.73 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.65, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1/__module.model.backbone.bottom_up.res4.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.73)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_80.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_79.FrozenBatchNorm2d object at 0x5595a4d14d00>
                          }
                          methods {
                            method forward {
                              graph(%self.163 : __torch__.detectron2.layers.wrappers.___torch_mangle_80.Conv2d,
                                    %x.63 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_79.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.163)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.163)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.67 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.63, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.67)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_79.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.165 : __torch__.detectron2.layers.batch_norm.___torch_mangle_79.FrozenBatchNorm2d,
                                        %input.67 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.165)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.165)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.165)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.165)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2/__module.model.backbone.bottom_up.res4.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2/__module.model.backbone.bottom_up.res4.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2/__module.model.backbone.bottom_up.res4.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2/__module.model.backbone.bottom_up.res4.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.75 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.67, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2/__module.model.backbone.bottom_up.res4.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.75)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_82.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_81.FrozenBatchNorm2d object at 0x5595a4d181d0>
                          }
                          methods {
                            method forward {
                              graph(%self.167 : __torch__.detectron2.layers.wrappers.___torch_mangle_82.Conv2d,
                                    %x.65 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_81.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.167)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.167)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.69 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.65, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.69)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_81.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.169 : __torch__.detectron2.layers.batch_norm.___torch_mangle_81.FrozenBatchNorm2d,
                                        %input.69 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.169)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.169)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.169)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.169)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3/__module.model.backbone.bottom_up.res4.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3/__module.model.backbone.bottom_up.res4.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3/__module.model.backbone.bottom_up.res4.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3/__module.model.backbone.bottom_up.res4.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.77 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.69, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3/__module.model.backbone.bottom_up.res4.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.77)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_90.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_85.Conv2d object at 0x5595a4d177b0>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_87.Conv2d object at 0x5595a4d202f0>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_89.Conv2d object at 0x5595a4d237c0>
                      }
                      methods {
                        method forward {
                          graph(%self.171 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_90.BottleneckBlock,
                                %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_89.Conv2d = prim::GetAttr[name="conv3"](%self.171)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_87.Conv2d = prim::GetAttr[name="conv2"](%self.171)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_85.Conv2d = prim::GetAttr[name="conv1"](%self.171)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.69 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.69)
                            %x.71 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.71)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.87 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.73 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.87), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.73)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_85.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_84.FrozenBatchNorm2d object at 0x5595a4d1e1e0>
                          }
                          methods {
                            method forward {
                              graph(%self.173 : __torch__.detectron2.layers.wrappers.___torch_mangle_85.Conv2d,
                                    %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_84.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.173)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.173)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.71 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.71)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_84.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.175 : __torch__.detectron2.layers.batch_norm.___torch_mangle_84.FrozenBatchNorm2d,
                                        %input.71 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.175)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.175)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.175)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.175)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1/__module.model.backbone.bottom_up.res4.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1/__module.model.backbone.bottom_up.res4.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1/__module.model.backbone.bottom_up.res4.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1/__module.model.backbone.bottom_up.res4.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.81 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.71, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1/__module.model.backbone.bottom_up.res4.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.81)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_87.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_86.FrozenBatchNorm2d object at 0x5595a4d219d0>
                          }
                          methods {
                            method forward {
                              graph(%self.177 : __torch__.detectron2.layers.wrappers.___torch_mangle_87.Conv2d,
                                    %x.69 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_86.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.177)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.177)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.73 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.69, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.73)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_86.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.179 : __torch__.detectron2.layers.batch_norm.___torch_mangle_86.FrozenBatchNorm2d,
                                        %input.73 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.179)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.179)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.179)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.179)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2/__module.model.backbone.bottom_up.res4.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2/__module.model.backbone.bottom_up.res4.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2/__module.model.backbone.bottom_up.res4.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2/__module.model.backbone.bottom_up.res4.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.83 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.73, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2/__module.model.backbone.bottom_up.res4.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.83)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_89.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_88.FrozenBatchNorm2d object at 0x5595a4d24ea0>
                          }
                          methods {
                            method forward {
                              graph(%self.181 : __torch__.detectron2.layers.wrappers.___torch_mangle_89.Conv2d,
                                    %x.71 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_88.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.181)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.181)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.75 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.71, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.75)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_88.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.183 : __torch__.detectron2.layers.batch_norm.___torch_mangle_88.FrozenBatchNorm2d,
                                        %input.75 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.183)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.183)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.183)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.183)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3/__module.model.backbone.bottom_up.res4.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3/__module.model.backbone.bottom_up.res4.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3/__module.model.backbone.bottom_up.res4.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3/__module.model.backbone.bottom_up.res4.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.85 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.75, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3/__module.model.backbone.bottom_up.res4.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.85)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_97.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_92.Conv2d object at 0x5595a4d24480>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_94.Conv2d object at 0x5595a4d2bbd0>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_96.Conv2d object at 0x5595a4d2f0a0>
                      }
                      methods {
                        method forward {
                          graph(%self.185 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_97.BottleneckBlock,
                                %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_96.Conv2d = prim::GetAttr[name="conv3"](%self.185)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_94.Conv2d = prim::GetAttr[name="conv2"](%self.185)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_92.Conv2d = prim::GetAttr[name="conv1"](%self.185)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.75 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.75)
                            %x.77 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.77)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.95 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.79 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.79)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_92.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_91.FrozenBatchNorm2d object at 0x5595a4d29cf0>
                          }
                          methods {
                            method forward {
                              graph(%self.187 : __torch__.detectron2.layers.wrappers.___torch_mangle_92.Conv2d,
                                    %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_91.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.187)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.187)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.77 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.77)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_91.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.189 : __torch__.detectron2.layers.batch_norm.___torch_mangle_91.FrozenBatchNorm2d,
                                        %input.77 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.189)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.189)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.189)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.189)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1/__module.model.backbone.bottom_up.res4.4.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1/__module.model.backbone.bottom_up.res4.4.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1/__module.model.backbone.bottom_up.res4.4.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1/__module.model.backbone.bottom_up.res4.4.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.89 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.77, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1/__module.model.backbone.bottom_up.res4.4.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.89)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_94.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_93.FrozenBatchNorm2d object at 0x5595a4d2d2b0>
                          }
                          methods {
                            method forward {
                              graph(%self.191 : __torch__.detectron2.layers.wrappers.___torch_mangle_94.Conv2d,
                                    %x.75 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_93.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.191)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.191)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.79 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.75, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.79)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_93.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.193 : __torch__.detectron2.layers.batch_norm.___torch_mangle_93.FrozenBatchNorm2d,
                                        %input.79 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.193)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.193)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.193)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.193)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2/__module.model.backbone.bottom_up.res4.4.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2/__module.model.backbone.bottom_up.res4.4.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2/__module.model.backbone.bottom_up.res4.4.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2/__module.model.backbone.bottom_up.res4.4.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.91 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.79, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2/__module.model.backbone.bottom_up.res4.4.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.91)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_96.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_95.FrozenBatchNorm2d object at 0x5595a4d30780>
                          }
                          methods {
                            method forward {
                              graph(%self.195 : __torch__.detectron2.layers.wrappers.___torch_mangle_96.Conv2d,
                                    %x.77 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_95.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.195)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.195)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.81 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.77, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.81)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_95.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.197 : __torch__.detectron2.layers.batch_norm.___torch_mangle_95.FrozenBatchNorm2d,
                                        %input.81 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.197)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.197)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.197)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.197)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3/__module.model.backbone.bottom_up.res4.4.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3/__module.model.backbone.bottom_up.res4.4.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3/__module.model.backbone.bottom_up.res4.4.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3/__module.model.backbone.bottom_up.res4.4.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.93 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.81, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3/__module.model.backbone.bottom_up.res4.4.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.93)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_104.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_99.Conv2d object at 0x5595a4d2fd60>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_101.Conv2d object at 0x5595a4d374b0>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_103.Conv2d object at 0x5595a4d3a990>
                      }
                      methods {
                        method forward {
                          graph(%self.199 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_104.BottleneckBlock,
                                %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_103.Conv2d = prim::GetAttr[name="conv3"](%self.199)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_101.Conv2d = prim::GetAttr[name="conv2"](%self.199)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_99.Conv2d = prim::GetAttr[name="conv1"](%self.199)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.81 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.81)
                            %x.83 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.83)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.103 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.85 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.103), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.85)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_99.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_98.FrozenBatchNorm2d object at 0x5595a4d355d0>
                          }
                          methods {
                            method forward {
                              graph(%self.201 : __torch__.detectron2.layers.wrappers.___torch_mangle_99.Conv2d,
                                    %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_98.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.201)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.201)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.83 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.83)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_98.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.203 : __torch__.detectron2.layers.batch_norm.___torch_mangle_98.FrozenBatchNorm2d,
                                        %input.83 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.203)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.203)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.203)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.203)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1/__module.model.backbone.bottom_up.res4.5.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1/__module.model.backbone.bottom_up.res4.5.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1/__module.model.backbone.bottom_up.res4.5.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1/__module.model.backbone.bottom_up.res4.5.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.97 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.83, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1/__module.model.backbone.bottom_up.res4.5.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.97)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_101.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_100.FrozenBatchNorm2d object at 0x5595a4d38b90>
                          }
                          methods {
                            method forward {
                              graph(%self.205 : __torch__.detectron2.layers.wrappers.___torch_mangle_101.Conv2d,
                                    %x.81 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_100.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.205)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.205)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.85 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.81, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.85)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_100.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.207 : __torch__.detectron2.layers.batch_norm.___torch_mangle_100.FrozenBatchNorm2d,
                                        %input.85 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.207)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.207)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.207)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.207)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2/__module.model.backbone.bottom_up.res4.5.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2/__module.model.backbone.bottom_up.res4.5.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2/__module.model.backbone.bottom_up.res4.5.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2/__module.model.backbone.bottom_up.res4.5.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.99 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.85, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2/__module.model.backbone.bottom_up.res4.5.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.99)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_103.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_102.FrozenBatchNorm2d object at 0x5595a4d3c070>
                          }
                          methods {
                            method forward {
                              graph(%self.209 : __torch__.detectron2.layers.wrappers.___torch_mangle_103.Conv2d,
                                    %x.83 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_102.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.209)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.209)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.87 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.83, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.87)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_102.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.211 : __torch__.detectron2.layers.batch_norm.___torch_mangle_102.FrozenBatchNorm2d,
                                        %input.87 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.211)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.211)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.211)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.211)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3/__module.model.backbone.bottom_up.res4.5.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3/__module.model.backbone.bottom_up.res4.5.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3/__module.model.backbone.bottom_up.res4.5.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3/__module.model.backbone.bottom_up.res4.5.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.101 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.87, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3/__module.model.backbone.bottom_up.res4.5.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.101)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                module __torch__.torch.nn.modules.container.___torch_mangle_129.Sequential {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                    0 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_114.BottleneckBlock object at 0x5595a51f6c00>
                    1 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_121.BottleneckBlock object at 0x5595a52036d0>
                    2 = <__torch__.detectron2.modeling.backbone.resnet.___torch_mangle_128.BottleneckBlock object at 0x5595a520edf0>
                  }
                  methods {
                    method forward {
                      graph(%self.213 : __torch__.torch.nn.modules.container.___torch_mangle_129.Sequential,
                            %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_128.BottleneckBlock = prim::GetAttr[name="2"](%self.213)
                        %3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_121.BottleneckBlock = prim::GetAttr[name="1"](%self.213)
                        %4 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_114.BottleneckBlock = prim::GetAttr[name="0"](%self.213)
                        %8 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                        %9 : Tensor = prim::CallMethod[name="forward"](%3, %8)
                        %10 : Tensor = prim::CallMethod[name="forward"](%2, %9)
                        return (%10)
                  
                    }
                  }
                  submodules {
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_114.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        shortcut = <__torch__.detectron2.layers.wrappers.___torch_mangle_107.Conv2d object at 0x5595a4d40a20>
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_109.Conv2d object at 0x5595a4d44860>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_111.Conv2d object at 0x5595a4d47d40>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_113.Conv2d object at 0x5595a4d4b220>
                      }
                      methods {
                        method forward {
                          graph(%self.215 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_114.BottleneckBlock,
                                %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_107.Conv2d = prim::GetAttr[name="shortcut"](%self.215)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_113.Conv2d = prim::GetAttr[name="conv3"](%self.215)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_111.Conv2d = prim::GetAttr[name="conv2"](%self.215)
                            %5 : __torch__.detectron2.layers.wrappers.___torch_mangle_109.Conv2d = prim::GetAttr[name="conv1"](%self.215)
                            %15 : Tensor = prim::CallMethod[name="forward"](%5, %1)
                            %x.87 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%15), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %16 : Tensor = prim::CallMethod[name="forward"](%4, %x.87)
                            %x.89 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %17 : Tensor = prim::CallMethod[name="forward"](%3, %x.89)
                            %18 : Tensor = prim::CallMethod[name="forward"](%2, %1)
                            %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.111 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::add_(%17, %18, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.91 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out.111), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.91)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_107.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_106.FrozenBatchNorm2d object at 0x5595a4d42b60>
                          }
                          methods {
                            method forward {
                              graph(%self.229 : __torch__.detectron2.layers.wrappers.___torch_mangle_107.Conv2d,
                                    %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_106.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.229)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.229)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut
                                %5 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.95 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.95)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_106.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.231 : __torch__.detectron2.layers.batch_norm.___torch_mangle_106.FrozenBatchNorm2d,
                                        %input.95 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.231)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.231)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.231)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.231)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut/__module.model.backbone.bottom_up.res5.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut/__module.model.backbone.bottom_up.res5.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut/__module.model.backbone.bottom_up.res5.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut/__module.model.backbone.bottom_up.res5.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %shortcut : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.95, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut/__module.model.backbone.bottom_up.res5.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%shortcut)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_109.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_108.FrozenBatchNorm2d object at 0x5595a4d45f40>
                          }
                          methods {
                            method forward {
                              graph(%self.217 : __torch__.detectron2.layers.wrappers.___torch_mangle_109.Conv2d,
                                    %1 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_108.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.217)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.217)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1
                                %5 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.89 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.89)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_108.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.219 : __torch__.detectron2.layers.batch_norm.___torch_mangle_108.FrozenBatchNorm2d,
                                        %input.89 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.219)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.219)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.219)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.219)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1/__module.model.backbone.bottom_up.res5.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1/__module.model.backbone.bottom_up.res5.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1/__module.model.backbone.bottom_up.res5.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1/__module.model.backbone.bottom_up.res5.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.105 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.89, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1/__module.model.backbone.bottom_up.res5.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.105)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_111.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_110.FrozenBatchNorm2d object at 0x5595a4d49420>
                          }
                          methods {
                            method forward {
                              graph(%self.221 : __torch__.detectron2.layers.wrappers.___torch_mangle_111.Conv2d,
                                    %x.87 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_110.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.221)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.221)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.91 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.87, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.91)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_110.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.223 : __torch__.detectron2.layers.batch_norm.___torch_mangle_110.FrozenBatchNorm2d,
                                        %input.91 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.223)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.223)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.223)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.223)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2/__module.model.backbone.bottom_up.res5.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2/__module.model.backbone.bottom_up.res5.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2/__module.model.backbone.bottom_up.res5.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2/__module.model.backbone.bottom_up.res5.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.107 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.91, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2/__module.model.backbone.bottom_up.res5.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.107)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_113.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_112.FrozenBatchNorm2d object at 0x5595a4d4c900>
                          }
                          methods {
                            method forward {
                              graph(%self.225 : __torch__.detectron2.layers.wrappers.___torch_mangle_113.Conv2d,
                                    %x.89 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_112.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.225)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.225)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.93 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.89, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.93)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_112.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.227 : __torch__.detectron2.layers.batch_norm.___torch_mangle_112.FrozenBatchNorm2d,
                                        %input.93 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.227)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.227)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.227)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.227)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3/__module.model.backbone.bottom_up.res5.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3/__module.model.backbone.bottom_up.res5.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3/__module.model.backbone.bottom_up.res5.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3/__module.model.backbone.bottom_up.res5.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.109 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.93, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3/__module.model.backbone.bottom_up.res5.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.109)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_121.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_116.Conv2d object at 0x5595a51f6020>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_118.Conv2d object at 0x5595a51fafd0>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_120.Conv2d object at 0x5595a51fe4b0>
                      }
                      methods {
                        method forward {
                          graph(%self.233 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_121.BottleneckBlock,
                                %1 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_120.Conv2d = prim::GetAttr[name="conv3"](%self.233)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_118.Conv2d = prim::GetAttr[name="conv2"](%self.233)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_116.Conv2d = prim::GetAttr[name="conv1"](%self.233)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.93 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.93)
                            %x.95 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.95)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out.119 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.97 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out.119), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.97)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_116.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_115.FrozenBatchNorm2d object at 0x5595a51f9100>
                          }
                          methods {
                            method forward {
                              graph(%self.235 : __torch__.detectron2.layers.wrappers.___torch_mangle_116.Conv2d,
                                    %1 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_115.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.235)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.235)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.97 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.97)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_115.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.237 : __torch__.detectron2.layers.batch_norm.___torch_mangle_115.FrozenBatchNorm2d,
                                        %input.97 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.237)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.237)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.237)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.237)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1/__module.model.backbone.bottom_up.res5.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1/__module.model.backbone.bottom_up.res5.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1/__module.model.backbone.bottom_up.res5.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1/__module.model.backbone.bottom_up.res5.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.113 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.97, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1/__module.model.backbone.bottom_up.res5.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.113)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_118.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_117.FrozenBatchNorm2d object at 0x5595a51fc6b0>
                          }
                          methods {
                            method forward {
                              graph(%self.239 : __torch__.detectron2.layers.wrappers.___torch_mangle_118.Conv2d,
                                    %x.93 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_117.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.239)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.239)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.99 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.93, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.99)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_117.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.241 : __torch__.detectron2.layers.batch_norm.___torch_mangle_117.FrozenBatchNorm2d,
                                        %input.99 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.241)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.241)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.241)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.241)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2/__module.model.backbone.bottom_up.res5.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2/__module.model.backbone.bottom_up.res5.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2/__module.model.backbone.bottom_up.res5.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2/__module.model.backbone.bottom_up.res5.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.115 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.99, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2/__module.model.backbone.bottom_up.res5.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.115)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_120.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_119.FrozenBatchNorm2d object at 0x5595a51ffb90>
                          }
                          methods {
                            method forward {
                              graph(%self.243 : __torch__.detectron2.layers.wrappers.___torch_mangle_120.Conv2d,
                                    %x.95 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_119.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.243)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.243)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.101 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.95, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.101)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_119.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.245 : __torch__.detectron2.layers.batch_norm.___torch_mangle_119.FrozenBatchNorm2d,
                                        %input.101 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.245)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.245)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.245)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.245)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3/__module.model.backbone.bottom_up.res5.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3/__module.model.backbone.bottom_up.res5.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3/__module.model.backbone.bottom_up.res5.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3/__module.model.backbone.bottom_up.res5.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.117 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.101, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3/__module.model.backbone.bottom_up.res5.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.117)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                    module __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_128.BottleneckBlock {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                        conv1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_123.Conv2d object at 0x5595a51ff180>
                        conv2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_125.Conv2d object at 0x5595a52078a0>
                        conv3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_127.Conv2d object at 0x5595a520ad80>
                      }
                      methods {
                        method forward {
                          graph(%self.247 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_128.BottleneckBlock,
                                %1 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu)):
                            %2 : __torch__.detectron2.layers.wrappers.___torch_mangle_127.Conv2d = prim::GetAttr[name="conv3"](%self.247)
                            %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_125.Conv2d = prim::GetAttr[name="conv2"](%self.247)
                            %4 : __torch__.detectron2.layers.wrappers.___torch_mangle_123.Conv2d = prim::GetAttr[name="conv1"](%self.247)
                            %13 : Tensor = prim::CallMethod[name="forward"](%4, %1)
                            %x.99 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%13), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
                            %14 : Tensor = prim::CallMethod[name="forward"](%3, %x.99)
                            %x.101 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%14), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
                            %15 : Tensor = prim::CallMethod[name="forward"](%2, %x.101)
                            %10 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %out : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::add_(%15, %1, %10), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
                            %x.103 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
                            return (%x.103)
                      
                        }
                      }
                      submodules {
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_123.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_122.FrozenBatchNorm2d object at 0x5595a5205b30>
                          }
                          methods {
                            method forward {
                              graph(%self.249 : __torch__.detectron2.layers.wrappers.___torch_mangle_123.Conv2d,
                                    %1 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_122.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.249)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.249)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.103 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.103)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_122.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.251 : __torch__.detectron2.layers.batch_norm.___torch_mangle_122.FrozenBatchNorm2d,
                                        %input.103 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.251)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.251)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.251)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.251)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1/__module.model.backbone.bottom_up.res5.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1/__module.model.backbone.bottom_up.res5.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1/__module.model.backbone.bottom_up.res5.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1/__module.model.backbone.bottom_up.res5.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.121 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.103, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1/__module.model.backbone.bottom_up.res5.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.121)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_125.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_124.FrozenBatchNorm2d object at 0x5595a5208f80>
                          }
                          methods {
                            method forward {
                              graph(%self.253 : __torch__.detectron2.layers.wrappers.___torch_mangle_125.Conv2d,
                                    %x.99 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_124.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.253)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.253)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2
                                %8 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.105 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.99, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.105)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_124.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.255 : __torch__.detectron2.layers.batch_norm.___torch_mangle_124.FrozenBatchNorm2d,
                                        %input.105 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.255)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.255)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.255)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.255)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2/__module.model.backbone.bottom_up.res5.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2/__module.model.backbone.bottom_up.res5.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2/__module.model.backbone.bottom_up.res5.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2/__module.model.backbone.bottom_up.res5.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.123 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.105, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2/__module.model.backbone.bottom_up.res5.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.123)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                        module __torch__.detectron2.layers.wrappers.___torch_mangle_127.Conv2d {
                          parameters {
                            weight = ...
                          }
                          attributes {
                            weight = ...
                            training = False
                            _is_full_backward_hook = None
                            norm = <__torch__.detectron2.layers.batch_norm.___torch_mangle_126.FrozenBatchNorm2d object at 0x5595a520c460>
                          }
                          methods {
                            method forward {
                              graph(%self.257 : __torch__.detectron2.layers.wrappers.___torch_mangle_127.Conv2d,
                                    %x.101 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu)):
                                %2 : __torch__.detectron2.layers.batch_norm.___torch_mangle_126.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%self.257)
                                %3 : Tensor = prim::GetAttr[name="weight"](%self.257)
                                %4 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3
                                %5 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %6 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3
                                %8 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %9 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3
                                %11 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %12 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3
                                %14 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %15 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %16 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3
                                %18 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %19 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %20 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %21 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %22 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %input.107 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.101, %3, %4, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                                %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.107)
                                return (%25)
                          
                            }
                          }
                          submodules {
                            module __torch__.detectron2.layers.batch_norm.___torch_mangle_126.FrozenBatchNorm2d {
                              parameters {
                              }
                              attributes {
                                weight = ...
                                bias = ...
                                running_mean = ...
                                running_var = ...
                                training = False
                                _is_full_backward_hook = None
                              }
                              methods {
                                method forward {
                                  graph(%self.259 : __torch__.detectron2.layers.batch_norm.___torch_mangle_126.FrozenBatchNorm2d,
                                        %input.107 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu)):
                                    %2 : Tensor = prim::GetAttr[name="running_var"](%self.259)
                                    %3 : Tensor = prim::GetAttr[name="running_mean"](%self.259)
                                    %4 : Tensor = prim::GetAttr[name="bias"](%self.259)
                                    %5 : Tensor = prim::GetAttr[name="weight"](%self.259)
                                    %6 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3/__module.model.backbone.bottom_up.res5.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %7 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3/__module.model.backbone.bottom_up.res5.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %8 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3/__module.model.backbone.bottom_up.res5.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %9 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3/__module.model.backbone.bottom_up.res5.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    %out.125 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.107, %5, %4, %3, %2, %6, %7, %8, %9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3/__module.model.backbone.bottom_up.res5.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
                                    return (%out.125)
                              
                                }
                              }
                              submodules {
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        module __torch__.detectron2.modeling.proposal_generator.rpn.RPN {
          parameters {
          }
          attributes {
            training = False
            _is_full_backward_hook = None
            rpn_head = <__torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead object at 0x5595a521b0e0>
            anchor_generator = <__torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator object at 0x5595a521c970>
          }
          methods {
            method forward {
              graph(%self.279 : __torch__.detectron2.modeling.proposal_generator.rpn.RPN,
                    %4 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu),
                    %5 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu),
                    %6 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu),
                    %7 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu),
                    %8 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu),
                    %9 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu),
                    %10 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu),
                    %11 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu),
                    %18 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu),
                    %image_size : Long(2, strides=[1], requires_grad=0, device=cpu)):
                %1 : __torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead = prim::GetAttr[name="rpn_head"](%self.279)
                %2 : __torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator = prim::GetAttr[name="anchor_generator"](%self.279)
                %1984 : (Tensor, Tensor, Tensor, Tensor, Tensor) = prim::CallMethod[name="forward"](%2, %4, %5, %6, %7, %8, %9, %10, %11)
                %12 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu), %13 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu), %14 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu), %15 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu), %16 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = prim::TupleUnpack(%1984)
                %1985 : (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor) = prim::CallMethod[name="forward"](%1, %4, %5, %6, %18, %11)
                %19 : Float(1, 3, 200, 272, strides=[163200, 54400, 272, 1], requires_grad=0, device=cpu), %20 : Float(1, 3, 100, 136, strides=[40800, 13600, 136, 1], requires_grad=0, device=cpu), %21 : Float(1, 3, 50, 68, strides=[10200, 3400, 68, 1], requires_grad=0, device=cpu), %22 : Float(1, 3, 25, 34, strides=[2550, 850, 34, 1], requires_grad=0, device=cpu), %23 : Float(1, 3, 13, 17, strides=[663, 221, 17, 1], requires_grad=0, device=cpu), %24 : Float(1, 12, 200, 272, strides=[652800, 54400, 272, 1], requires_grad=0, device=cpu), %25 : Float(1, 12, 100, 136, strides=[163200, 13600, 136, 1], requires_grad=0, device=cpu), %26 : Float(1, 12, 50, 68, strides=[40800, 3400, 68, 1], requires_grad=0, device=cpu), %27 : Float(1, 12, 25, 34, strides=[10200, 850, 34, 1], requires_grad=0, device=cpu), %28 : Float(1, 12, 13, 17, strides=[2652, 221, 17, 1], requires_grad=0, device=cpu) = prim::TupleUnpack(%1985)
                %29 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %30 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %31 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %32 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %33 : int[] = prim::ListConstruct(%29, %30, %31, %32), scope: __module.model.proposal_generator
                %34 : Float(1, 200, 272, 3, strides=[163200, 272, 1, 54400], requires_grad=0, device=cpu) = aten::permute(%19, %33), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %35 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %36 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %logits_i.1 : Float(1, 163200, strides=[163200, 1], requires_grad=0, device=cpu) = aten::flatten(%34, %35, %36), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %38 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %39 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %40 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %41 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %42 : int[] = prim::ListConstruct(%38, %39, %40, %41), scope: __module.model.proposal_generator
                %43 : Float(1, 100, 136, 3, strides=[40800, 136, 1, 13600], requires_grad=0, device=cpu) = aten::permute(%20, %42), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %44 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %45 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %logits_i.3 : Float(1, 40800, strides=[40800, 1], requires_grad=0, device=cpu) = aten::flatten(%43, %44, %45), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %47 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %48 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %49 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %50 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %51 : int[] = prim::ListConstruct(%47, %48, %49, %50), scope: __module.model.proposal_generator
                %52 : Float(1, 50, 68, 3, strides=[10200, 68, 1, 3400], requires_grad=0, device=cpu) = aten::permute(%21, %51), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %53 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %54 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %logits_i.5 : Float(1, 10200, strides=[10200, 1], requires_grad=0, device=cpu) = aten::flatten(%52, %53, %54), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %56 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %57 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %58 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %59 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %60 : int[] = prim::ListConstruct(%56, %57, %58, %59), scope: __module.model.proposal_generator
                %61 : Float(1, 25, 34, 3, strides=[2550, 34, 1, 850], requires_grad=0, device=cpu) = aten::permute(%22, %60), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %62 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %63 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %logits_i.7 : Float(1, 2550, strides=[2550, 1], requires_grad=0, device=cpu) = aten::flatten(%61, %62, %63), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %65 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %66 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %67 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %68 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %69 : int[] = prim::ListConstruct(%65, %66, %67, %68), scope: __module.model.proposal_generator
                %70 : Float(1, 13, 17, 3, strides=[663, 17, 1, 221], requires_grad=0, device=cpu) = aten::permute(%23, %69), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %71 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %72 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %logits_i : Float(1, 663, strides=[663, 1], requires_grad=0, device=cpu) = aten::flatten(%70, %71, %72), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
                %74 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %75 : int = aten::size(%24, %74), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %76 : Long(device=cpu) = prim::NumToTensor(%75), scope: __module.model.proposal_generator
                %77 : int = aten::Int(%76), scope: __module.model.proposal_generator
                %93 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %94 : int = aten::size(%24, %93), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %95 : Long(device=cpu) = prim::NumToTensor(%94), scope: __module.model.proposal_generator
                %96 : int = aten::Int(%95), scope: __module.model.proposal_generator
                %109 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %110 : int = aten::size(%24, %109), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %111 : Long(device=cpu) = prim::NumToTensor(%110), scope: __module.model.proposal_generator
                %112 : int = aten::Int(%111), scope: __module.model.proposal_generator
                %113 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %114 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %115 : int[] = prim::ListConstruct(%77, %113, %114, %96, %112), scope: __module.model.proposal_generator
                %116 : Float(1, 3, 4, 200, 272, strides=[652800, 217600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::view(%24, %115), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %117 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %118 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %119 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %120 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %121 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %122 : int[] = prim::ListConstruct(%117, %118, %119, %120, %121), scope: __module.model.proposal_generator
                %123 : Float(1, 200, 272, 3, 4, strides=[652800, 272, 1, 217600, 54400], requires_grad=0, device=cpu) = aten::permute(%116, %122), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %124 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %125 : int = prim::Constant[value=-2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %pred_anchor_deltas_i.1 : Float(1, 163200, 4, strides=[652800, 4, 1], requires_grad=0, device=cpu) = aten::flatten(%123, %124, %125), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %127 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %128 : int = aten::size(%25, %127), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %129 : Long(device=cpu) = prim::NumToTensor(%128), scope: __module.model.proposal_generator
                %130 : int = aten::Int(%129), scope: __module.model.proposal_generator
                %146 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %147 : int = aten::size(%25, %146), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %148 : Long(device=cpu) = prim::NumToTensor(%147), scope: __module.model.proposal_generator
                %149 : int = aten::Int(%148), scope: __module.model.proposal_generator
                %162 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %163 : int = aten::size(%25, %162), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %164 : Long(device=cpu) = prim::NumToTensor(%163), scope: __module.model.proposal_generator
                %165 : int = aten::Int(%164), scope: __module.model.proposal_generator
                %166 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %167 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %168 : int[] = prim::ListConstruct(%130, %166, %167, %149, %165), scope: __module.model.proposal_generator
                %169 : Float(1, 3, 4, 100, 136, strides=[163200, 54400, 13600, 136, 1], requires_grad=0, device=cpu) = aten::view(%25, %168), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %170 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %171 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %172 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %173 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %174 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %175 : int[] = prim::ListConstruct(%170, %171, %172, %173, %174), scope: __module.model.proposal_generator
                %176 : Float(1, 100, 136, 3, 4, strides=[163200, 136, 1, 54400, 13600], requires_grad=0, device=cpu) = aten::permute(%169, %175), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %177 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %178 : int = prim::Constant[value=-2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %pred_anchor_deltas_i.3 : Float(1, 40800, 4, strides=[163200, 4, 1], requires_grad=0, device=cpu) = aten::flatten(%176, %177, %178), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %180 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %181 : int = aten::size(%26, %180), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %182 : Long(device=cpu) = prim::NumToTensor(%181), scope: __module.model.proposal_generator
                %183 : int = aten::Int(%182), scope: __module.model.proposal_generator
                %199 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %200 : int = aten::size(%26, %199), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %201 : Long(device=cpu) = prim::NumToTensor(%200), scope: __module.model.proposal_generator
                %202 : int = aten::Int(%201), scope: __module.model.proposal_generator
                %215 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %216 : int = aten::size(%26, %215), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %217 : Long(device=cpu) = prim::NumToTensor(%216), scope: __module.model.proposal_generator
                %218 : int = aten::Int(%217), scope: __module.model.proposal_generator
                %219 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %220 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %221 : int[] = prim::ListConstruct(%183, %219, %220, %202, %218), scope: __module.model.proposal_generator
                %222 : Float(1, 3, 4, 50, 68, strides=[40800, 13600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::view(%26, %221), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %223 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %224 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %225 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %226 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %227 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %228 : int[] = prim::ListConstruct(%223, %224, %225, %226, %227), scope: __module.model.proposal_generator
                %229 : Float(1, 50, 68, 3, 4, strides=[40800, 68, 1, 13600, 3400], requires_grad=0, device=cpu) = aten::permute(%222, %228), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %230 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %231 : int = prim::Constant[value=-2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %pred_anchor_deltas_i.5 : Float(1, 10200, 4, strides=[40800, 4, 1], requires_grad=0, device=cpu) = aten::flatten(%229, %230, %231), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %233 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %234 : int = aten::size(%27, %233), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %235 : Long(device=cpu) = prim::NumToTensor(%234), scope: __module.model.proposal_generator
                %236 : int = aten::Int(%235), scope: __module.model.proposal_generator
                %252 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %253 : int = aten::size(%27, %252), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %254 : Long(device=cpu) = prim::NumToTensor(%253), scope: __module.model.proposal_generator
                %255 : int = aten::Int(%254), scope: __module.model.proposal_generator
                %268 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %269 : int = aten::size(%27, %268), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %270 : Long(device=cpu) = prim::NumToTensor(%269), scope: __module.model.proposal_generator
                %271 : int = aten::Int(%270), scope: __module.model.proposal_generator
                %272 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %273 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %274 : int[] = prim::ListConstruct(%236, %272, %273, %255, %271), scope: __module.model.proposal_generator
                %275 : Float(1, 3, 4, 25, 34, strides=[10200, 3400, 850, 34, 1], requires_grad=0, device=cpu) = aten::view(%27, %274), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %276 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %277 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %278 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %279 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %280 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %281 : int[] = prim::ListConstruct(%276, %277, %278, %279, %280), scope: __module.model.proposal_generator
                %282 : Float(1, 25, 34, 3, 4, strides=[10200, 34, 1, 3400, 850], requires_grad=0, device=cpu) = aten::permute(%275, %281), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %283 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %284 : int = prim::Constant[value=-2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %pred_anchor_deltas_i.7 : Float(1, 2550, 4, strides=[10200, 4, 1], requires_grad=0, device=cpu) = aten::flatten(%282, %283, %284), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %286 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %287 : int = aten::size(%28, %286), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %288 : Long(device=cpu) = prim::NumToTensor(%287), scope: __module.model.proposal_generator
                %289 : int = aten::Int(%288), scope: __module.model.proposal_generator
                %305 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %306 : int = aten::size(%28, %305), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %307 : Long(device=cpu) = prim::NumToTensor(%306), scope: __module.model.proposal_generator
                %308 : int = aten::Int(%307), scope: __module.model.proposal_generator
                %321 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %322 : int = aten::size(%28, %321), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %323 : Long(device=cpu) = prim::NumToTensor(%322), scope: __module.model.proposal_generator
                %324 : int = aten::Int(%323), scope: __module.model.proposal_generator
                %325 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %326 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %327 : int[] = prim::ListConstruct(%289, %325, %326, %308, %324), scope: __module.model.proposal_generator
                %328 : Float(1, 3, 4, 13, 17, strides=[2652, 884, 221, 17, 1], requires_grad=0, device=cpu) = aten::view(%28, %327), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %329 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %330 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %331 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %332 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %333 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %334 : int[] = prim::ListConstruct(%329, %330, %331, %332, %333), scope: __module.model.proposal_generator
                %335 : Float(1, 13, 17, 3, 4, strides=[2652, 17, 1, 884, 221], requires_grad=0, device=cpu) = aten::permute(%328, %334), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %336 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %337 : int = prim::Constant[value=-2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %pred_anchor_deltas_i : Float(1, 663, 4, strides=[2652, 4, 1], requires_grad=0, device=cpu) = aten::flatten(%335, %336, %337), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
                %339 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:534:0
                %340 : int = aten::size(%pred_anchor_deltas_i.1, %339), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:534:0
                %N : Long(device=cpu) = prim::NumToTensor(%340), scope: __module.model.proposal_generator
                %342 : int = aten::Int(%N), scope: __module.model.proposal_generator
                %343 : int = aten::Int(%N), scope: __module.model.proposal_generator
                %344 : int = aten::Int(%N), scope: __module.model.proposal_generator
                %345 : int = aten::Int(%N), scope: __module.model.proposal_generator
                %346 : int = aten::Int(%N), scope: __module.model.proposal_generator
                %347 : int = aten::Int(%N), scope: __module.model.proposal_generator
                %348 : int = aten::Int(%N), scope: __module.model.proposal_generator
                %349 : int = aten::Int(%N), scope: __module.model.proposal_generator
                %350 : int = aten::Int(%N), scope: __module.model.proposal_generator
                %351 : int = aten::Int(%N), scope: __module.model.proposal_generator
                %358 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
                %359 : int = aten::size(%12, %358), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
                %B.1 : Long(device=cpu) = prim::NumToTensor(%359), scope: __module.model.proposal_generator
                %361 : int = aten::Int(%B.1), scope: __module.model.proposal_generator
                %362 : int = aten::Int(%B.1), scope: __module.model.proposal_generator
                %363 : int = aten::Int(%B.1), scope: __module.model.proposal_generator
                %364 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
                %365 : int[] = prim::ListConstruct(%364, %363), scope: __module.model.proposal_generator
                %deltas.1 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_anchor_deltas_i.1, %365), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
                %367 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %368 : Float(1, 163200, 4, strides=[652800, 4, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%12, %367), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %369 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %370 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %371 : int[] = prim::ListConstruct(%351, %369, %370), scope: __module.model.proposal_generator
                %372 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %373 : Float(1, 163200, 4, strides=[652800, 4, 1], requires_grad=0, device=cpu) = aten::expand(%368, %371, %372), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %374 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %375 : int[] = prim::ListConstruct(%374, %362), scope: __module.model.proposal_generator
                %boxes.1 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%373, %375), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %377 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %378 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %379 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %380 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %deltas.3 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%deltas.1, %377, %378, %379, %380), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %382 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %383 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %384 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %385 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %boxes.3 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.1, %382, %383, %384, %385), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %387 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %388 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %389 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %390 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %391 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %387, %388, %389, %390), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %392 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %393 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %394 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%391, %392, %393), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %395 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %396 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %397 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %398 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %399 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %395, %396, %397, %398), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %400 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %401 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %402 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%399, %400, %401), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %403 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %widths.1 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::sub(%394, %402, %403), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %405 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %406 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %407 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %408 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %409 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %405, %406, %407, %408), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %410 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %411 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %412 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%409, %410, %411), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %413 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %414 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %415 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %416 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %417 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %413, %414, %415, %416), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %418 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %419 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %420 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%417, %418, %419), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %421 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %heights.1 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::sub(%412, %420, %421), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %423 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %424 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %425 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %426 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %427 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %423, %424, %425, %426), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %428 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %429 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %430 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%427, %428, %429), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %431 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %432 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths.1, %431), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %433 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %ctr_x.1 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::add(%430, %432, %433), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %435 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %436 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %437 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %438 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %439 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %435, %436, %437, %438), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %440 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %441 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %442 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%439, %440, %441), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %443 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %444 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights.1, %443), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %445 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %ctr_y.1 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::add(%442, %444, %445), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %447 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %448 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %449 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %450 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %451 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.3, %447, %448, %449, %450), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %452 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %453 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %454 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %455 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %456 : Float(163200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%451, %452, %453, %454, %455), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %457 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %dx.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%456, %457), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %459 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %460 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %461 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %462 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %463 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.3, %459, %460, %461, %462), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %464 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %465 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %466 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %467 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %468 : Float(163200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%463, %464, %465, %466, %467), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %469 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %dy.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%468, %469), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %471 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %472 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %473 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %474 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %475 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.3, %471, %472, %473, %474), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %476 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %477 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %478 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %479 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %480 : Float(163200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%475, %476, %477, %478, %479), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %481 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %dw.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%480, %481), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %483 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %484 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %485 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %486 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %487 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.3, %483, %484, %485, %486), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %488 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %489 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %490 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %491 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %492 : Float(163200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%487, %488, %489, %490, %491), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %493 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %dh.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%492, %493), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %495 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %496 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %dw.3 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.1, %495, %496), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %498 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %499 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %dh.3 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.1, %498, %499), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %501 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %502 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %503 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %504 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %505 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.1, %501, %502, %503, %504), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %506 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %507 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%505, %506), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %508 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx.1, %507), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %509 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %510 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %511 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %512 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %513 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x.1, %509, %510, %511, %512), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %514 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %515 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%513, %514), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %516 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %pred_ctr_x.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%508, %515, %516), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %518 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %519 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %520 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %521 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %522 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.1, %518, %519, %520, %521), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %523 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %524 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%522, %523), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %525 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy.1, %524), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %526 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %527 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %528 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %529 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %530 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y.1, %526, %527, %528, %529), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %531 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %532 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%530, %531), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %533 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %pred_ctr_y.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%525, %532, %533), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %535 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw.3), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %536 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %537 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %538 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %539 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %540 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.1, %536, %537, %538, %539), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %541 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %542 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%540, %541), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %pred_w.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%535, %542), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %544 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh.3), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %545 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %546 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %547 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %548 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %549 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.1, %545, %546, %547, %548), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %550 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %551 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%549, %550), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %pred_h.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%544, %551), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %553 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %554 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.1, %553), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %555 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %x1.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x.1, %554, %555), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %557 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %558 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.1, %557), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %559 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %y1.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y.1, %558, %559), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %561 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %562 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.1, %561), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %563 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %x2.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x.1, %562, %563), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %565 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %566 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.1, %565), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %567 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %y2.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y.1, %566, %567), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %569 : Tensor[] = prim::ListConstruct(%x1.1, %y1.1, %x2.1, %y2.1), scope: __module.model.proposal_generator
                %570 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %pred_boxes.1 : Float(163200, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%569, %570), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %572 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %573 : int = aten::size(%deltas.3, %572), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %574 : Long(device=cpu) = prim::NumToTensor(%573), scope: __module.model.proposal_generator
                %575 : int = aten::Int(%574), scope: __module.model.proposal_generator
                %576 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %577 : int = aten::size(%deltas.3, %576), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %578 : Long(device=cpu) = prim::NumToTensor(%577), scope: __module.model.proposal_generator
                %579 : int = aten::Int(%578), scope: __module.model.proposal_generator
                %580 : int[] = prim::ListConstruct(%575, %579), scope: __module.model.proposal_generator
                %proposals_i.1 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes.1, %580), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %582 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
                %583 : int[] = prim::ListConstruct(%350, %582, %361), scope: __module.model.proposal_generator
                %proposals_i.11 : Float(1, 163200, 4, strides=[652800, 4, 1], requires_grad=0, device=cpu) = aten::view(%proposals_i.1, %583), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
                %585 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
                %586 : int = aten::size(%13, %585), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
                %B.3 : Long(device=cpu) = prim::NumToTensor(%586), scope: __module.model.proposal_generator
                %588 : int = aten::Int(%B.3), scope: __module.model.proposal_generator
                %589 : int = aten::Int(%B.3), scope: __module.model.proposal_generator
                %590 : int = aten::Int(%B.3), scope: __module.model.proposal_generator
                %591 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
                %592 : int[] = prim::ListConstruct(%591, %590), scope: __module.model.proposal_generator
                %deltas.5 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_anchor_deltas_i.3, %592), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
                %594 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %595 : Float(1, 40800, 4, strides=[163200, 4, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%13, %594), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %596 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %597 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %598 : int[] = prim::ListConstruct(%349, %596, %597), scope: __module.model.proposal_generator
                %599 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %600 : Float(1, 40800, 4, strides=[163200, 4, 1], requires_grad=0, device=cpu) = aten::expand(%595, %598, %599), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %601 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %602 : int[] = prim::ListConstruct(%601, %589), scope: __module.model.proposal_generator
                %boxes.5 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%600, %602), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %604 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %605 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %606 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %607 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %deltas.7 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%deltas.5, %604, %605, %606, %607), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %609 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %610 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %611 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %612 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %boxes.7 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.5, %609, %610, %611, %612), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %614 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %615 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %616 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %617 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %618 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %614, %615, %616, %617), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %619 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %620 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %621 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%618, %619, %620), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %622 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %623 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %624 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %625 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %626 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %622, %623, %624, %625), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %627 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %628 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %629 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%626, %627, %628), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %630 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %widths.3 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::sub(%621, %629, %630), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %632 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %633 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %634 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %635 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %636 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %632, %633, %634, %635), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %637 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %638 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %639 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%636, %637, %638), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %640 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %641 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %642 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %643 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %644 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %640, %641, %642, %643), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %645 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %646 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %647 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%644, %645, %646), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %648 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %heights.3 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::sub(%639, %647, %648), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %650 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %651 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %652 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %653 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %654 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %650, %651, %652, %653), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %655 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %656 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %657 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%654, %655, %656), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %658 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %659 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths.3, %658), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %660 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %ctr_x.3 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::add(%657, %659, %660), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %662 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %663 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %664 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %665 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %666 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %662, %663, %664, %665), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %667 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %668 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %669 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%666, %667, %668), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %670 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %671 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights.3, %670), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %672 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %ctr_y.3 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::add(%669, %671, %672), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %674 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %675 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %676 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %677 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %678 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.7, %674, %675, %676, %677), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %679 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %680 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %681 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %682 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %683 : Float(40800, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%678, %679, %680, %681, %682), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %684 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %dx.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%683, %684), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %686 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %687 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %688 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %689 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %690 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.7, %686, %687, %688, %689), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %691 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %692 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %693 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %694 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %695 : Float(40800, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%690, %691, %692, %693, %694), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %696 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %dy.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%695, %696), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %698 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %699 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %700 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %701 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %702 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.7, %698, %699, %700, %701), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %703 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %704 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %705 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %706 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %707 : Float(40800, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%702, %703, %704, %705, %706), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %708 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %dw.5 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%707, %708), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %710 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %711 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %712 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %713 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %714 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.7, %710, %711, %712, %713), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %715 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %716 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %717 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %718 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %719 : Float(40800, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%714, %715, %716, %717, %718), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %720 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %dh.5 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%719, %720), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %722 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %723 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %dw.7 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.5, %722, %723), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %725 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %726 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %dh.7 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.5, %725, %726), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %728 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %729 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %730 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %731 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %732 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.3, %728, %729, %730, %731), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %733 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %734 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%732, %733), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %735 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx.3, %734), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %736 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %737 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %738 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %739 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %740 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x.3, %736, %737, %738, %739), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %741 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %742 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%740, %741), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %743 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %pred_ctr_x.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%735, %742, %743), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %745 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %746 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %747 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %748 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %749 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.3, %745, %746, %747, %748), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %750 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %751 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%749, %750), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %752 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy.3, %751), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %753 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %754 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %755 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %756 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %757 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y.3, %753, %754, %755, %756), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %758 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %759 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%757, %758), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %760 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %pred_ctr_y.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%752, %759, %760), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %762 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw.7), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %763 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %764 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %765 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %766 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %767 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.3, %763, %764, %765, %766), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %768 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %769 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%767, %768), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %pred_w.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%762, %769), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %771 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh.7), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %772 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %773 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %774 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %775 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %776 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.3, %772, %773, %774, %775), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %777 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %778 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%776, %777), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %pred_h.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%771, %778), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %780 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %781 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.3, %780), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %782 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %x1.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x.3, %781, %782), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %784 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %785 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.3, %784), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %786 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %y1.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y.3, %785, %786), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %788 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %789 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.3, %788), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %790 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %x2.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x.3, %789, %790), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %792 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %793 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.3, %792), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %794 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %y2.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y.3, %793, %794), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %796 : Tensor[] = prim::ListConstruct(%x1.3, %y1.3, %x2.3, %y2.3), scope: __module.model.proposal_generator
                %797 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %pred_boxes.3 : Float(40800, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%796, %797), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %799 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %800 : int = aten::size(%deltas.7, %799), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %801 : Long(device=cpu) = prim::NumToTensor(%800), scope: __module.model.proposal_generator
                %802 : int = aten::Int(%801), scope: __module.model.proposal_generator
                %803 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %804 : int = aten::size(%deltas.7, %803), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %805 : Long(device=cpu) = prim::NumToTensor(%804), scope: __module.model.proposal_generator
                %806 : int = aten::Int(%805), scope: __module.model.proposal_generator
                %807 : int[] = prim::ListConstruct(%802, %806), scope: __module.model.proposal_generator
                %proposals_i.3 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes.3, %807), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %809 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
                %810 : int[] = prim::ListConstruct(%348, %809, %588), scope: __module.model.proposal_generator
                %proposals_i.13 : Float(1, 40800, 4, strides=[163200, 4, 1], requires_grad=0, device=cpu) = aten::view(%proposals_i.3, %810), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
                %812 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
                %813 : int = aten::size(%14, %812), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
                %B.5 : Long(device=cpu) = prim::NumToTensor(%813), scope: __module.model.proposal_generator
                %815 : int = aten::Int(%B.5), scope: __module.model.proposal_generator
                %816 : int = aten::Int(%B.5), scope: __module.model.proposal_generator
                %817 : int = aten::Int(%B.5), scope: __module.model.proposal_generator
                %818 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
                %819 : int[] = prim::ListConstruct(%818, %817), scope: __module.model.proposal_generator
                %deltas.9 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_anchor_deltas_i.5, %819), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
                %821 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %822 : Float(1, 10200, 4, strides=[40800, 4, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%14, %821), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %823 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %824 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %825 : int[] = prim::ListConstruct(%347, %823, %824), scope: __module.model.proposal_generator
                %826 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %827 : Float(1, 10200, 4, strides=[40800, 4, 1], requires_grad=0, device=cpu) = aten::expand(%822, %825, %826), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %828 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %829 : int[] = prim::ListConstruct(%828, %816), scope: __module.model.proposal_generator
                %boxes.9 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%827, %829), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %831 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %832 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %833 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %834 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %deltas.11 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%deltas.9, %831, %832, %833, %834), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %836 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %837 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %838 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %839 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %boxes.11 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.9, %836, %837, %838, %839), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %841 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %842 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %843 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %844 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %845 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %841, %842, %843, %844), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %846 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %847 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %848 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%845, %846, %847), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %849 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %850 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %851 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %852 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %853 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %849, %850, %851, %852), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %854 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %855 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %856 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%853, %854, %855), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %857 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %widths.5 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::sub(%848, %856, %857), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %859 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %860 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %861 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %862 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %863 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %859, %860, %861, %862), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %864 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %865 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %866 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%863, %864, %865), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %867 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %868 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %869 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %870 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %871 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %867, %868, %869, %870), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %872 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %873 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %874 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%871, %872, %873), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %875 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %heights.5 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::sub(%866, %874, %875), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %877 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %878 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %879 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %880 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %881 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %877, %878, %879, %880), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %882 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %883 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %884 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%881, %882, %883), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %885 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %886 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths.5, %885), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %887 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %ctr_x.5 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::add(%884, %886, %887), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %889 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %890 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %891 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %892 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %893 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %889, %890, %891, %892), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %894 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %895 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %896 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%893, %894, %895), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %897 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %898 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights.5, %897), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %899 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %ctr_y.5 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::add(%896, %898, %899), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %901 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %902 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %903 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %904 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %905 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.11, %901, %902, %903, %904), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %906 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %907 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %908 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %909 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %910 : Float(10200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%905, %906, %907, %908, %909), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %911 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %dx.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%910, %911), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %913 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %914 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %915 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %916 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %917 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.11, %913, %914, %915, %916), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %918 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %919 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %920 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %921 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %922 : Float(10200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%917, %918, %919, %920, %921), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %923 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %dy.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%922, %923), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %925 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %926 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %927 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %928 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %929 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.11, %925, %926, %927, %928), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %930 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %931 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %932 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %933 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %934 : Float(10200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%929, %930, %931, %932, %933), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %935 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %dw.9 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%934, %935), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %937 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %938 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %939 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %940 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %941 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.11, %937, %938, %939, %940), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %942 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %943 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %944 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %945 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %946 : Float(10200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%941, %942, %943, %944, %945), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %947 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %dh.9 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%946, %947), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %949 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %950 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %dw.11 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.9, %949, %950), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %952 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %953 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %dh.11 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.9, %952, %953), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %955 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %956 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %957 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %958 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %959 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.5, %955, %956, %957, %958), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %960 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %961 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%959, %960), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %962 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx.5, %961), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %963 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %964 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %965 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %966 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %967 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x.5, %963, %964, %965, %966), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %968 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %969 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%967, %968), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %970 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %pred_ctr_x.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%962, %969, %970), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %972 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %973 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %974 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %975 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %976 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.5, %972, %973, %974, %975), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %977 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %978 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%976, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %979 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy.5, %978), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %980 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %981 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %982 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %983 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %984 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y.5, %980, %981, %982, %983), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %985 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %986 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %987 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %pred_ctr_y.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%979, %986, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %989 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw.11), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %990 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %991 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %992 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %993 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %994 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.5, %990, %991, %992, %993), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %995 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %996 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%994, %995), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %pred_w.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%989, %996), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %998 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh.11), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %999 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1000 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1001 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1002 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1003 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.5, %999, %1000, %1001, %1002), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1004 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1005 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1003, %1004), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %pred_h.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%998, %1005), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1007 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %1008 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.5, %1007), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %1009 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %x1.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x.5, %1008, %1009), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %1011 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %1012 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.5, %1011), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %1013 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %y1.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y.5, %1012, %1013), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %1015 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %1016 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.5, %1015), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %1017 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %x2.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x.5, %1016, %1017), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %1019 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %1020 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.5, %1019), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %1021 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %y2.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y.5, %1020, %1021), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %1023 : Tensor[] = prim::ListConstruct(%x1.5, %y1.5, %x2.5, %y2.5), scope: __module.model.proposal_generator
                %1024 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %pred_boxes.5 : Float(10200, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%1023, %1024), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %1026 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1027 : int = aten::size(%deltas.11, %1026), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1028 : Long(device=cpu) = prim::NumToTensor(%1027), scope: __module.model.proposal_generator
                %1029 : int = aten::Int(%1028), scope: __module.model.proposal_generator
                %1030 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1031 : int = aten::size(%deltas.11, %1030), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1032 : Long(device=cpu) = prim::NumToTensor(%1031), scope: __module.model.proposal_generator
                %1033 : int = aten::Int(%1032), scope: __module.model.proposal_generator
                %1034 : int[] = prim::ListConstruct(%1029, %1033), scope: __module.model.proposal_generator
                %proposals_i.5 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes.5, %1034), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1036 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
                %1037 : int[] = prim::ListConstruct(%346, %1036, %815), scope: __module.model.proposal_generator
                %proposals_i.15 : Float(1, 10200, 4, strides=[40800, 4, 1], requires_grad=0, device=cpu) = aten::view(%proposals_i.5, %1037), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
                %1039 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
                %1040 : int = aten::size(%15, %1039), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
                %B.7 : Long(device=cpu) = prim::NumToTensor(%1040), scope: __module.model.proposal_generator
                %1042 : int = aten::Int(%B.7), scope: __module.model.proposal_generator
                %1043 : int = aten::Int(%B.7), scope: __module.model.proposal_generator
                %1044 : int = aten::Int(%B.7), scope: __module.model.proposal_generator
                %1045 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
                %1046 : int[] = prim::ListConstruct(%1045, %1044), scope: __module.model.proposal_generator
                %deltas.13 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_anchor_deltas_i.7, %1046), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
                %1048 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1049 : Float(1, 2550, 4, strides=[10200, 4, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%15, %1048), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1050 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1051 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1052 : int[] = prim::ListConstruct(%345, %1050, %1051), scope: __module.model.proposal_generator
                %1053 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1054 : Float(1, 2550, 4, strides=[10200, 4, 1], requires_grad=0, device=cpu) = aten::expand(%1049, %1052, %1053), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1055 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1056 : int[] = prim::ListConstruct(%1055, %1043), scope: __module.model.proposal_generator
                %boxes.13 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1054, %1056), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1058 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %1059 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %1060 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %1061 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %deltas.15 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%deltas.13, %1058, %1059, %1060, %1061), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %1063 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %1064 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %1065 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %1066 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %boxes.15 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.13, %1063, %1064, %1065, %1066), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %1068 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1069 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1070 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1071 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1072 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %1068, %1069, %1070, %1071), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1073 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1074 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1075 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1072, %1073, %1074), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1076 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1077 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1078 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1079 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1080 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %1076, %1077, %1078, %1079), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1081 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1082 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1083 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1080, %1081, %1082), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1084 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %widths.7 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1075, %1083, %1084), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1086 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1087 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1088 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1089 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1090 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %1086, %1087, %1088, %1089), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1091 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1092 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1093 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1090, %1091, %1092), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1094 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1095 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1096 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1097 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1098 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %1094, %1095, %1096, %1097), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1099 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1100 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1101 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1098, %1099, %1100), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1102 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %heights.7 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1093, %1101, %1102), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1104 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1105 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1106 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1107 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1108 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %1104, %1105, %1106, %1107), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1109 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1110 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1111 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1108, %1109, %1110), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1112 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1113 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths.7, %1112), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1114 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %ctr_x.7 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::add(%1111, %1113, %1114), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1116 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1117 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1118 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1119 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1120 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %1116, %1117, %1118, %1119), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1121 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1122 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1123 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1120, %1121, %1122), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1124 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1125 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights.7, %1124), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1126 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %ctr_y.7 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::add(%1123, %1125, %1126), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1128 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1129 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1130 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1131 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1132 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.15, %1128, %1129, %1130, %1131), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1133 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1134 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1135 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1136 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1137 : Float(2550, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1132, %1133, %1134, %1135, %1136), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1138 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %dx.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1137, %1138), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1140 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1141 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1142 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1143 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1144 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.15, %1140, %1141, %1142, %1143), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1145 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1146 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1147 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1148 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1149 : Float(2550, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1144, %1145, %1146, %1147, %1148), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1150 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %dy.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1149, %1150), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1152 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1153 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1154 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1155 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1156 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.15, %1152, %1153, %1154, %1155), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1157 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1158 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1159 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1160 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1161 : Float(2550, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1156, %1157, %1158, %1159, %1160), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1162 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %dw.13 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1161, %1162), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1164 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1165 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1166 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1167 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1168 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.15, %1164, %1165, %1166, %1167), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1169 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1170 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1171 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1172 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1173 : Float(2550, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1168, %1169, %1170, %1171, %1172), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1174 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %dh.13 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1173, %1174), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1176 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1177 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %dw.15 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.13, %1176, %1177), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %1179 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1180 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %dh.15 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.13, %1179, %1180), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %1182 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1183 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1184 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1185 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1186 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.7, %1182, %1183, %1184, %1185), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1187 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1188 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1186, %1187), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1189 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx.7, %1188), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1190 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1191 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1192 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1193 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1194 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x.7, %1190, %1191, %1192, %1193), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1195 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1196 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1194, %1195), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1197 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %pred_ctr_x.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1189, %1196, %1197), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1199 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1200 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1201 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1202 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1203 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.7, %1199, %1200, %1201, %1202), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1204 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1205 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1203, %1204), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1206 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy.7, %1205), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1207 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1208 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1209 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1210 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1211 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y.7, %1207, %1208, %1209, %1210), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1212 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1213 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1211, %1212), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1214 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %pred_ctr_y.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1206, %1213, %1214), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1216 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw.15), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1217 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1218 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1219 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1220 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1221 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.7, %1217, %1218, %1219, %1220), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1222 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1223 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1221, %1222), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %pred_w.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1216, %1223), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1225 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh.15), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1226 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1227 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1228 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1229 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1230 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.7, %1226, %1227, %1228, %1229), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1231 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1232 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1230, %1231), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %pred_h.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1225, %1232), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1234 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %1235 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.7, %1234), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %1236 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %x1.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x.7, %1235, %1236), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %1238 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %1239 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.7, %1238), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %1240 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %y1.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y.7, %1239, %1240), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %1242 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %1243 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.7, %1242), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %1244 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %x2.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x.7, %1243, %1244), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %1246 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %1247 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.7, %1246), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %1248 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %y2.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y.7, %1247, %1248), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %1250 : Tensor[] = prim::ListConstruct(%x1.7, %y1.7, %x2.7, %y2.7), scope: __module.model.proposal_generator
                %1251 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %pred_boxes.7 : Float(2550, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%1250, %1251), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %1253 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1254 : int = aten::size(%deltas.15, %1253), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1255 : Long(device=cpu) = prim::NumToTensor(%1254), scope: __module.model.proposal_generator
                %1256 : int = aten::Int(%1255), scope: __module.model.proposal_generator
                %1257 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1258 : int = aten::size(%deltas.15, %1257), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1259 : Long(device=cpu) = prim::NumToTensor(%1258), scope: __module.model.proposal_generator
                %1260 : int = aten::Int(%1259), scope: __module.model.proposal_generator
                %1261 : int[] = prim::ListConstruct(%1256, %1260), scope: __module.model.proposal_generator
                %proposals_i.7 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes.7, %1261), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1263 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
                %1264 : int[] = prim::ListConstruct(%344, %1263, %1042), scope: __module.model.proposal_generator
                %proposals_i.17 : Float(1, 2550, 4, strides=[10200, 4, 1], requires_grad=0, device=cpu) = aten::view(%proposals_i.7, %1264), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
                %1266 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
                %1267 : int = aten::size(%16, %1266), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
                %B : Long(device=cpu) = prim::NumToTensor(%1267), scope: __module.model.proposal_generator
                %1269 : int = aten::Int(%B), scope: __module.model.proposal_generator
                %1270 : int = aten::Int(%B), scope: __module.model.proposal_generator
                %1271 : int = aten::Int(%B), scope: __module.model.proposal_generator
                %1272 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
                %1273 : int[] = prim::ListConstruct(%1272, %1271), scope: __module.model.proposal_generator
                %deltas.17 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_anchor_deltas_i, %1273), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
                %1275 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1276 : Float(1, 663, 4, strides=[2652, 4, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%16, %1275), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1277 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1278 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1279 : int[] = prim::ListConstruct(%343, %1277, %1278), scope: __module.model.proposal_generator
                %1280 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1281 : Float(1, 663, 4, strides=[2652, 4, 1], requires_grad=0, device=cpu) = aten::expand(%1276, %1279, %1280), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1282 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1283 : int[] = prim::ListConstruct(%1282, %1270), scope: __module.model.proposal_generator
                %boxes.17 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1281, %1283), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
                %1285 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %1286 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %1287 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %1288 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %deltas.19 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%deltas.17, %1285, %1286, %1287, %1288), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %1290 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %1291 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %1292 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %1293 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %boxes.19 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.17, %1290, %1291, %1292, %1293), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %1295 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1296 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1297 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1298 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1299 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %1295, %1296, %1297, %1298), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1300 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1301 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1302 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1299, %1300, %1301), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1303 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1304 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1305 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1306 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1307 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %1303, %1304, %1305, %1306), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1308 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1309 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1310 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1307, %1308, %1309), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1311 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %widths.9 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1302, %1310, %1311), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %1313 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1314 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1315 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1316 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1317 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %1313, %1314, %1315, %1316), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1318 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1319 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1320 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1317, %1318, %1319), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1321 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1322 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1323 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1324 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1325 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %1321, %1322, %1323, %1324), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1326 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1327 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1328 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1325, %1326, %1327), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1329 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %heights.9 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1320, %1328, %1329), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %1331 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1332 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1333 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1334 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1335 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %1331, %1332, %1333, %1334), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1336 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1337 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1338 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1335, %1336, %1337), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1339 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1340 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths.9, %1339), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1341 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %ctr_x.9 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::add(%1338, %1340, %1341), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %1343 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1344 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1345 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1346 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1347 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %1343, %1344, %1345, %1346), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1348 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1349 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1350 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1347, %1348, %1349), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1351 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1352 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights.9, %1351), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1353 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %ctr_y.9 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::add(%1350, %1352, %1353), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %1355 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1356 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1357 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1358 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1359 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.19, %1355, %1356, %1357, %1358), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1360 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1361 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1362 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1363 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1364 : Float(663, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1359, %1360, %1361, %1362, %1363), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1365 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %dx.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1364, %1365), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %1367 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1368 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1369 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1370 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1371 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.19, %1367, %1368, %1369, %1370), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1372 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1373 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1374 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1375 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1376 : Float(663, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1371, %1372, %1373, %1374, %1375), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1377 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %dy.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1376, %1377), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %1379 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1380 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1381 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1382 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1383 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.19, %1379, %1380, %1381, %1382), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1384 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1385 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1386 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1387 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1388 : Float(663, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1383, %1384, %1385, %1386, %1387), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1389 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %dw.17 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1388, %1389), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %1391 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1392 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1393 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1394 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1395 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.19, %1391, %1392, %1393, %1394), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1396 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1397 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1398 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1399 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1400 : Float(663, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1395, %1396, %1397, %1398, %1399), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1401 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %dh.17 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1400, %1401), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %1403 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1404 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %dw.19 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.17, %1403, %1404), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %1406 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1407 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %dh.19 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.17, %1406, %1407), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %1409 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1410 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1411 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1412 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1413 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.9, %1409, %1410, %1411, %1412), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1414 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1415 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1413, %1414), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1416 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx.9, %1415), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1417 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1418 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1419 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1420 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1421 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x.9, %1417, %1418, %1419, %1420), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1422 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1423 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1421, %1422), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1424 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %pred_ctr_x.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1416, %1423, %1424), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %1426 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1427 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1428 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1429 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1430 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.9, %1426, %1427, %1428, %1429), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1431 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1432 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1430, %1431), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1433 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy.9, %1432), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1434 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1435 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1436 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1437 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1438 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y.9, %1434, %1435, %1436, %1437), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1439 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1440 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1438, %1439), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1441 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %pred_ctr_y.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1433, %1440, %1441), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %1443 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw.19), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1444 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1445 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1446 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1447 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1448 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.9, %1444, %1445, %1446, %1447), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1449 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1450 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1448, %1449), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %pred_w.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1443, %1450), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %1452 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh.19), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1453 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1454 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1455 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1456 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1457 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.9, %1453, %1454, %1455, %1456), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1458 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1459 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1457, %1458), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %pred_h.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1452, %1459), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %1461 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %1462 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.9, %1461), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %1463 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %x1.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x.9, %1462, %1463), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %1465 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %1466 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.9, %1465), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %1467 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %y1.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y.9, %1466, %1467), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %1469 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %1470 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.9, %1469), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %1471 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %x2.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x.9, %1470, %1471), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %1473 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %1474 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.9, %1473), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %1475 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %y2.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y.9, %1474, %1475), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %1477 : Tensor[] = prim::ListConstruct(%x1.9, %y1.9, %x2.9, %y2.9), scope: __module.model.proposal_generator
                %1478 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %pred_boxes.9 : Float(663, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%1477, %1478), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %1480 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1481 : int = aten::size(%deltas.19, %1480), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1482 : Long(device=cpu) = prim::NumToTensor(%1481), scope: __module.model.proposal_generator
                %1483 : int = aten::Int(%1482), scope: __module.model.proposal_generator
                %1484 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1485 : int = aten::size(%deltas.19, %1484), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1486 : Long(device=cpu) = prim::NumToTensor(%1485), scope: __module.model.proposal_generator
                %1487 : int = aten::Int(%1486), scope: __module.model.proposal_generator
                %1488 : int[] = prim::ListConstruct(%1483, %1487), scope: __module.model.proposal_generator
                %proposals_i.9 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes.9, %1488), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %1490 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
                %1491 : int[] = prim::ListConstruct(%342, %1490, %1269), scope: __module.model.proposal_generator
                %proposals_i : Float(1, 663, 4, strides=[2652, 4, 1], requires_grad=0, device=cpu) = aten::view(%proposals_i.9, %1491), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
                %1493 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:71:0
                %1494 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1495 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:71:0
                %1496 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:71:0
                %1497 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:71:0
                %1498 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::arange(%1493, %1494, %1495, %1496, %1497), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:71:0
                %1499 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator
                %batch_idx : Tensor = prim::CallFunction(%1499, %1498, %proposals_i.11), scope: __module.model.proposal_generator
                %1504 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
                %1505 : int = aten::size(%logits_i.1, %1504), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
                %Hi_Wi_A.1 : Long(device=cpu) = prim::NumToTensor(%1505), scope: __module.model.proposal_generator
                %1507 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1508 : int = prim::Constant[value=1000](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
                %num_proposals_i.1 : Long(requires_grad=0, device=cpu) = aten::clamp(%Hi_Wi_A.1, %1507, %1508), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
                %1510 : int = aten::Int(%num_proposals_i.1), scope: __module.model.proposal_generator
                %1511 : int = aten::Int(%num_proposals_i.1), scope: __module.model.proposal_generator
                %1512 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1513 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1514 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1515 : Float(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu), %topk_idx.1 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::topk(%logits_i.1, %1511, %1512, %1513, %1514), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1517 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1518 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1519 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1520 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1521 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::slice(%batch_idx, %1517, %1518, %1519, %1520), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1522 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1523 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1521, %1522), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1524 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1525 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1526 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1527 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1528 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1529 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1530 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1531 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%1523, %1524, %1525, %1526, %1527, %1528, %1529, %1530), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1532 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1533 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1534 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1535 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1536 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1537 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1538 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %topk_idx.3 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::to(%topk_idx.1, %1532, %1533, %1534, %1535, %1536, %1537, %1538), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1540 : Tensor?[] = prim::ListConstruct(%1531, %topk_idx.3), scope: __module.model.proposal_generator
                %1541 : Float(1, 1000, 4, strides=[4000, 4, 1], requires_grad=0, device=cpu) = aten::index(%proposals_i.11, %1540), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1542 : int[] = prim::ListConstruct(%1510), scope: __module.model.proposal_generator
                %1543 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1544 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1545 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1546 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1547 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1548 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::full(%1542, %1543, %1544, %1545, %1546, %1547), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1549 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator
                %1550 : Tensor = prim::CallFunction(%1549, %1548, %proposals_i.11), scope: __module.model.proposal_generator
                %1554 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
                %1555 : int = aten::size(%logits_i.3, %1554), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
                %Hi_Wi_A.3 : Long(device=cpu) = prim::NumToTensor(%1555), scope: __module.model.proposal_generator
                %1557 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1558 : int = prim::Constant[value=1000](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
                %num_proposals_i.3 : Long(requires_grad=0, device=cpu) = aten::clamp(%Hi_Wi_A.3, %1557, %1558), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
                %1560 : int = aten::Int(%num_proposals_i.3), scope: __module.model.proposal_generator
                %1561 : int = aten::Int(%num_proposals_i.3), scope: __module.model.proposal_generator
                %1562 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1563 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1564 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1565 : Float(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu), %topk_idx.5 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::topk(%logits_i.3, %1561, %1562, %1563, %1564), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1567 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1568 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1569 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1570 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1571 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::slice(%batch_idx, %1567, %1568, %1569, %1570), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1572 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1573 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1571, %1572), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1574 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1575 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1576 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1577 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1578 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1579 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1580 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1581 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%1573, %1574, %1575, %1576, %1577, %1578, %1579, %1580), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1582 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1583 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1584 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1585 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1586 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1587 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1588 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %topk_idx.7 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::to(%topk_idx.5, %1582, %1583, %1584, %1585, %1586, %1587, %1588), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1590 : Tensor?[] = prim::ListConstruct(%1581, %topk_idx.7), scope: __module.model.proposal_generator
                %1591 : Float(1, 1000, 4, strides=[4000, 4, 1], requires_grad=0, device=cpu) = aten::index(%proposals_i.13, %1590), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1592 : int[] = prim::ListConstruct(%1560), scope: __module.model.proposal_generator
                %1593 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1594 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1595 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1596 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1597 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1598 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::full(%1592, %1593, %1594, %1595, %1596, %1597), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1599 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator
                %1600 : Tensor = prim::CallFunction(%1599, %1598, %proposals_i.11), scope: __module.model.proposal_generator
                %1604 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
                %1605 : int = aten::size(%logits_i.5, %1604), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
                %Hi_Wi_A.5 : Long(device=cpu) = prim::NumToTensor(%1605), scope: __module.model.proposal_generator
                %1607 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1608 : int = prim::Constant[value=1000](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
                %num_proposals_i.5 : Long(requires_grad=0, device=cpu) = aten::clamp(%Hi_Wi_A.5, %1607, %1608), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
                %1610 : int = aten::Int(%num_proposals_i.5), scope: __module.model.proposal_generator
                %1611 : int = aten::Int(%num_proposals_i.5), scope: __module.model.proposal_generator
                %1612 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1613 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1614 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1615 : Float(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu), %topk_idx.9 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::topk(%logits_i.5, %1611, %1612, %1613, %1614), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1617 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1618 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1619 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1620 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1621 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::slice(%batch_idx, %1617, %1618, %1619, %1620), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1622 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1623 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1621, %1622), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1624 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1625 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1626 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1627 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1628 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1629 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1630 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1631 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%1623, %1624, %1625, %1626, %1627, %1628, %1629, %1630), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1632 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1633 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1634 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1635 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1636 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1637 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1638 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %topk_idx.11 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::to(%topk_idx.9, %1632, %1633, %1634, %1635, %1636, %1637, %1638), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1640 : Tensor?[] = prim::ListConstruct(%1631, %topk_idx.11), scope: __module.model.proposal_generator
                %1641 : Float(1, 1000, 4, strides=[4000, 4, 1], requires_grad=0, device=cpu) = aten::index(%proposals_i.15, %1640), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1642 : int[] = prim::ListConstruct(%1610), scope: __module.model.proposal_generator
                %1643 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1644 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1645 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1646 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1647 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1648 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::full(%1642, %1643, %1644, %1645, %1646, %1647), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1649 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator
                %1650 : Tensor = prim::CallFunction(%1649, %1648, %proposals_i.11), scope: __module.model.proposal_generator
                %1654 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
                %1655 : int = aten::size(%logits_i.7, %1654), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
                %Hi_Wi_A.7 : Long(device=cpu) = prim::NumToTensor(%1655), scope: __module.model.proposal_generator
                %1657 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1658 : int = prim::Constant[value=1000](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
                %num_proposals_i.7 : Long(requires_grad=0, device=cpu) = aten::clamp(%Hi_Wi_A.7, %1657, %1658), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
                %1660 : int = aten::Int(%num_proposals_i.7), scope: __module.model.proposal_generator
                %1661 : int = aten::Int(%num_proposals_i.7), scope: __module.model.proposal_generator
                %1662 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1663 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1664 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1665 : Float(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu), %topk_idx.13 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::topk(%logits_i.7, %1661, %1662, %1663, %1664), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1667 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1668 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1669 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1670 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1671 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::slice(%batch_idx, %1667, %1668, %1669, %1670), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1672 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1673 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1671, %1672), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1674 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1675 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1676 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1677 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1678 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1679 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1680 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1681 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%1673, %1674, %1675, %1676, %1677, %1678, %1679, %1680), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1682 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1683 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1684 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1685 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1686 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1687 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1688 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %topk_idx.15 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::to(%topk_idx.13, %1682, %1683, %1684, %1685, %1686, %1687, %1688), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1690 : Tensor?[] = prim::ListConstruct(%1681, %topk_idx.15), scope: __module.model.proposal_generator
                %1691 : Float(1, 1000, 4, strides=[4000, 4, 1], requires_grad=0, device=cpu) = aten::index(%proposals_i.17, %1690), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1692 : int[] = prim::ListConstruct(%1660), scope: __module.model.proposal_generator
                %1693 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1694 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1695 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1696 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1697 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1698 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::full(%1692, %1693, %1694, %1695, %1696, %1697), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1699 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator
                %1700 : Tensor = prim::CallFunction(%1699, %1698, %proposals_i.11), scope: __module.model.proposal_generator
                %1704 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
                %1705 : int = aten::size(%logits_i, %1704), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
                %Hi_Wi_A : Long(device=cpu) = prim::NumToTensor(%1705), scope: __module.model.proposal_generator
                %1707 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1708 : int = prim::Constant[value=1000](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
                %num_proposals_i : Long(requires_grad=0, device=cpu) = aten::clamp(%Hi_Wi_A, %1707, %1708), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
                %1710 : int = aten::Int(%num_proposals_i), scope: __module.model.proposal_generator
                %1711 : int = aten::Int(%num_proposals_i), scope: __module.model.proposal_generator
                %1712 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1713 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1714 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1715 : Float(1, 663, strides=[663, 1], requires_grad=0, device=cpu), %topk_idx.17 : Long(1, 663, strides=[663, 1], requires_grad=0, device=cpu) = aten::topk(%logits_i, %1711, %1712, %1713, %1714), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
                %1717 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1718 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1719 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1720 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1721 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::slice(%batch_idx, %1717, %1718, %1719, %1720), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1722 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1723 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1721, %1722), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1724 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1725 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1726 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1727 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1728 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1729 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1730 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1731 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%1723, %1724, %1725, %1726, %1727, %1728, %1729, %1730), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1732 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1733 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1734 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1735 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1736 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1737 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1738 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %topk_idx : Long(1, 663, strides=[663, 1], requires_grad=0, device=cpu) = aten::to(%topk_idx.17, %1732, %1733, %1734, %1735, %1736, %1737, %1738), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1740 : Tensor?[] = prim::ListConstruct(%1731, %topk_idx), scope: __module.model.proposal_generator
                %1741 : Float(1, 663, 4, strides=[2652, 4, 1], requires_grad=0, device=cpu) = aten::index(%proposals_i, %1740), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
                %1742 : int[] = prim::ListConstruct(%1710), scope: __module.model.proposal_generator
                %1743 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1744 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1745 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1746 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1747 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1748 : Long(663, strides=[1], requires_grad=0, device=cpu) = aten::full(%1742, %1743, %1744, %1745, %1746, %1747), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
                %1749 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator
                %1750 : Tensor = prim::CallFunction(%1749, %1748, %proposals_i.11), scope: __module.model.proposal_generator
                %1751 : Tensor[] = prim::ListConstruct(%1515, %1565, %1615, %1665, %1715), scope: __module.model.proposal_generator
                %1752 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:57:0
                %topk_scores : Float(1, 4663, strides=[4663, 1], requires_grad=0, device=cpu) = aten::cat(%1751, %1752), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:57:0
                %1754 : Tensor[] = prim::ListConstruct(%1541, %1591, %1641, %1691, %1741), scope: __module.model.proposal_generator
                %1755 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:57:0
                %topk_proposals : Float(1, 4663, 4, strides=[18652, 4, 1], requires_grad=0, device=cpu) = aten::cat(%1754, %1755), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:57:0
                %1757 : Tensor[] = prim::ListConstruct(%1550, %1600, %1650, %1700, %1750), scope: __module.model.proposal_generator
                %1758 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:57:0
                %level_ids : Long(4663, strides=[1], requires_grad=0, device=cpu) = aten::cat(%1757, %1758), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:57:0
                %1760 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:101:0
                %1761 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:101:0
                %tensor.21 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::select(%topk_proposals, %1760, %1761), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:101:0
                %1763 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %1764 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %1765 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %1766 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %tensor.23 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.21, %1763, %1764, %1765, %1766), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %1773 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:102:0
                %1774 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:102:0
                %scores_per_img.1 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::select(%topk_scores, %1773, %1774), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:102:0
                %1785 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:613:0
                %1786 : Tensor[] = aten::unbind(%image_size, %1785), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:613:0
                %h.1 : Long(requires_grad=0, device=cpu), %w.1 : Long(requires_grad=0, device=cpu) = prim::ListUnpack(%1786), scope: __module.model.proposal_generator
                %1790 : Scalar = aten::ScalarImplicit(%h.1), scope: __module.model.proposal_generator
                %1791 : Scalar = aten::ScalarImplicit(%w.1), scope: __module.model.proposal_generator
                %1792 : Scalar = aten::ScalarImplicit(%h.1), scope: __module.model.proposal_generator
                %1793 : Scalar = aten::ScalarImplicit(%w.1), scope: __module.model.proposal_generator
                %1794 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %1795 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %1796 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %1797 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %1798 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.23, %1794, %1795, %1796, %1797), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %1799 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %1800 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %1801 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1798, %1799, %1800), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %1802 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %x1.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%1801, %1802, %1793), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %1804 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %1805 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %1806 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %1807 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %1808 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.23, %1804, %1805, %1806, %1807), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %1809 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %1810 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %1811 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1808, %1809, %1810), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %1812 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %y1.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%1811, %1812, %1792), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %1814 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %1815 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %1816 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %1817 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %1818 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.23, %1814, %1815, %1816, %1817), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %1819 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %1820 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %1821 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1818, %1819, %1820), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %1822 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %x2.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%1821, %1822, %1791), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %1824 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %1825 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %1826 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %1827 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %1828 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.23, %1824, %1825, %1826, %1827), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %1829 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %1830 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %1831 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1828, %1829, %1830), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %1832 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %y2.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%1831, %1832, %1790), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %1834 : Tensor[] = prim::ListConstruct(%x1.11, %y1.11, %x2.11, %y2.11), scope: __module.model.proposal_generator
                %1835 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:197:0
                %box : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%1834, %1835), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:197:0
                %1837 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1838 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1839 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1840 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1841 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%box, %1837, %1838, %1839, %1840), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1842 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1843 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1844 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1841, %1842, %1843), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1845 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1846 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1847 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1848 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1849 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%box, %1845, %1846, %1847, %1848), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1850 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1851 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1852 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1849, %1850, %1851), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1853 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %widths.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1844, %1852, %1853), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
                %1855 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1856 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1857 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1858 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1859 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%box, %1855, %1856, %1857, %1858), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1860 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1861 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1862 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1859, %1860, %1861), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1863 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1864 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1865 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1866 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1867 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%box, %1863, %1864, %1865, %1866), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1868 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1869 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1870 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1867, %1868, %1869), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1871 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %heights.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1862, %1870, %1871), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
                %1873 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:212:0
                %1874 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::gt(%widths.11, %1873), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:212:0
                %1875 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:212:0
                %1876 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::gt(%heights.11, %1875), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:212:0
                %item.1 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::__and__(%1874, %1876), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:212:0
                %1878 : int = prim::Constant[value=11](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1879 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1880 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1881 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1882 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1883 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1884 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %item.3 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::to(%item.1, %1878, %1879, %1880, %1881, %1882, %1883, %1884), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1886 : Tensor?[] = prim::ListConstruct(%item.3), scope: __module.model.proposal_generator
                %tensor.25 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::index(%box, %1886), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1888 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %1889 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %1890 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %1891 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %tensor.27 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.25, %1888, %1889, %1890, %1891), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %1898 : int = prim::Constant[value=11](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1899 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1900 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1901 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1902 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1903 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1904 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %keep.1 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::to(%item.3, %1898, %1899, %1900, %1901, %1902, %1903, %1904), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1906 : Tensor?[] = prim::ListConstruct(%keep.1), scope: __module.model.proposal_generator
                %scores_per_img : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::index(%scores_per_img.1, %1906), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1908 : int = prim::Constant[value=11](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1909 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1910 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1911 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1912 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1913 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1914 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %keep.3 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::to(%keep.1, %1908, %1909, %1910, %1911, %1912, %1913, %1914), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1916 : Tensor?[] = prim::ListConstruct(%keep.3), scope: __module.model.proposal_generator
                %1917 : Long(4663, strides=[1], requires_grad=0, device=cpu) = aten::index(%level_ids, %1916), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
                %1926 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/nms.py:20:0
                %1927 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/nms.py:20:0
                %1928 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/nms.py:20:0
                %1929 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1930 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.27, %1926, %1927, %1928, %1929), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/nms.py:20:0
                %1931 : float = prim::Constant[value=0.69999999999999996](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
                %1932 : Function = prim::Constant[name="_batched_nms_coordinate_trick"](), scope: __module.model.proposal_generator
                %keep.5 : Tensor = prim::CallFunction(%1932, %1930, %scores_per_img, %1917, %1931), scope: __module.model.proposal_generator
                %1934 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:129:0
                %1935 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:129:0
                %1936 : int = prim::Constant[value=1000](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:129:0
                %1937 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:129:0
                %item.5 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%keep.5, %1934, %1935, %1936, %1937), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:129:0
                %1939 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1940 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1941 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1942 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %1943 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1944 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1945 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %item : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::to(%item.5, %1939, %1940, %1941, %1942, %1943, %1944, %1945), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1947 : Tensor?[] = prim::ListConstruct(%item), scope: __module.model.proposal_generator
                %tensor.29 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::index(%1930, %1947), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
                %1949 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %1950 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %1951 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %1952 : NoneType = prim::Constant(), scope: __module.model.proposal_generator
                %tensor.31 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.29, %1949, %1950, %1951, %1952), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                return (%tensor.31)
          
            }
          }
          submodules {
            module __torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead {
              parameters {
              }
              attributes {
                training = False
                _is_full_backward_hook = None
                conv = <__torch__.detectron2.layers.wrappers.___torch_mangle_130.Conv2d object at 0x5595a5213010>
                objectness_logits = <__torch__.torch.nn.modules.conv.Conv2d object at 0x5595a5216ee0>
                anchor_deltas = <__torch__.torch.nn.modules.conv.___torch_mangle_131.Conv2d object at 0x5595a5219f90>
              }
              methods {
                method forward {
                  graph(%self.283 : __torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead,
                        %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu),
                        %2 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu),
                        %3 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu),
                        %4 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu),
                        %5 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu)):
                    %6 : __torch__.torch.nn.modules.conv.___torch_mangle_131.Conv2d = prim::GetAttr[name="anchor_deltas"](%self.283)
                    %7 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="objectness_logits"](%self.283)
                    %8 : __torch__.detectron2.layers.wrappers.___torch_mangle_130.Conv2d = prim::GetAttr[name="conv"](%self.283)
                    %85 : Tensor = prim::CallMethod[name="forward"](%8, %1)
                    %86 : Tensor = prim::CallMethod[name="forward"](%7, %85)
                    %87 : Tensor = prim::CallMethod[name="forward"](%6, %85)
                    %88 : Tensor = prim::CallMethod[name="forward1"](%8, %2)
                    %89 : Tensor = prim::CallMethod[name="forward1"](%7, %88)
                    %90 : Tensor = prim::CallMethod[name="forward1"](%6, %88)
                    %91 : Tensor = prim::CallMethod[name="forward2"](%8, %3)
                    %92 : Tensor = prim::CallMethod[name="forward2"](%7, %91)
                    %93 : Tensor = prim::CallMethod[name="forward2"](%6, %91)
                    %94 : Tensor = prim::CallMethod[name="forward3"](%8, %4)
                    %95 : Tensor = prim::CallMethod[name="forward3"](%7, %94)
                    %96 : Tensor = prim::CallMethod[name="forward3"](%6, %94)
                    %97 : Tensor = prim::CallMethod[name="forward4"](%8, %5)
                    %98 : Tensor = prim::CallMethod[name="forward4"](%7, %97)
                    %99 : Tensor = prim::CallMethod[name="forward4"](%6, %97)
                    %84 : (Float(1, 3, 200, 272, strides=[163200, 54400, 272, 1], requires_grad=0, device=cpu), Float(1, 3, 100, 136, strides=[40800, 13600, 136, 1], requires_grad=0, device=cpu), Float(1, 3, 50, 68, strides=[10200, 3400, 68, 1], requires_grad=0, device=cpu), Float(1, 3, 25, 34, strides=[2550, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 3, 13, 17, strides=[663, 221, 17, 1], requires_grad=0, device=cpu), Float(1, 12, 200, 272, strides=[652800, 54400, 272, 1], requires_grad=0, device=cpu), Float(1, 12, 100, 136, strides=[163200, 13600, 136, 1], requires_grad=0, device=cpu), Float(1, 12, 50, 68, strides=[40800, 3400, 68, 1], requires_grad=0, device=cpu), Float(1, 12, 25, 34, strides=[10200, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 12, 13, 17, strides=[2652, 221, 17, 1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%86, %89, %92, %95, %98, %87, %90, %93, %96, %99)
                    return (%84)
              
                }
              }
              submodules {
                module __torch__.detectron2.layers.wrappers.___torch_mangle_130.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    activation = <__torch__.torch.nn.modules.activation.ReLU object at 0x5595a5212050>
                  }
                  methods {
                    method forward {
                      graph(%self.285 : __torch__.detectron2.layers.wrappers.___torch_mangle_130.Conv2d,
                            %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="activation"](%self.285)
                        %3 : Tensor = prim::GetAttr[name="bias"](%self.285)
                        %4 : Tensor = prim::GetAttr[name="weight"](%self.285)
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %6 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %8 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %9 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %12 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %14 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %16 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %18 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %20 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %22 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %input.111 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %4, %3, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.111)
                        return (%25)
                  
                    }
                    method forward1 {
                      graph(%self.293 : __torch__.detectron2.layers.wrappers.___torch_mangle_130.Conv2d,
                            %1 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="activation"](%self.293)
                        %3 : Tensor = prim::GetAttr[name="bias"](%self.293)
                        %4 : Tensor = prim::GetAttr[name="weight"](%self.293)
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %6 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %8 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %9 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %12 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %14 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %16 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %18 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %20 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %22 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %input.115 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %4, %3, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %25 : Tensor = prim::CallMethod[name="forward1"](%2, %input.115)
                        return (%25)
                  
                    }
                    method forward2 {
                      graph(%self.301 : __torch__.detectron2.layers.wrappers.___torch_mangle_130.Conv2d,
                            %1 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="activation"](%self.301)
                        %3 : Tensor = prim::GetAttr[name="bias"](%self.301)
                        %4 : Tensor = prim::GetAttr[name="weight"](%self.301)
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %6 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %8 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %9 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %12 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %14 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %16 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %18 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %20 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %22 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %input.119 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %4, %3, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %25 : Tensor = prim::CallMethod[name="forward2"](%2, %input.119)
                        return (%25)
                  
                    }
                    method forward3 {
                      graph(%self.309 : __torch__.detectron2.layers.wrappers.___torch_mangle_130.Conv2d,
                            %1 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="activation"](%self.309)
                        %3 : Tensor = prim::GetAttr[name="bias"](%self.309)
                        %4 : Tensor = prim::GetAttr[name="weight"](%self.309)
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %6 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %8 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %9 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %12 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %14 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %16 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %18 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %20 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %22 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %input.123 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %4, %3, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %25 : Tensor = prim::CallMethod[name="forward3"](%2, %input.123)
                        return (%25)
                  
                    }
                    method forward4 {
                      graph(%self.317 : __torch__.detectron2.layers.wrappers.___torch_mangle_130.Conv2d,
                            %1 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.torch.nn.modules.activation.ReLU = prim::GetAttr[name="activation"](%self.317)
                        %3 : Tensor = prim::GetAttr[name="bias"](%self.317)
                        %4 : Tensor = prim::GetAttr[name="weight"](%self.317)
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %6 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %8 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %9 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %12 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %14 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %16 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
                        %18 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %20 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %22 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %input.127 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %4, %3, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %25 : Tensor = prim::CallMethod[name="forward4"](%2, %input.127)
                        return (%25)
                  
                    }
                  }
                  submodules {
                    module __torch__.torch.nn.modules.activation.ReLU {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.287 : __torch__.torch.nn.modules.activation.ReLU,
                                %input.111 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                            %input.113 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu(%input.111), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv/__module.model.proposal_generator.rpn_head.conv.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                            return (%input.113)
                      
                        }
                        method forward1 {
                          graph(%self.295 : __torch__.torch.nn.modules.activation.ReLU,
                                %input.115 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu)):
                            %input.117 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu(%input.115), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv/__module.model.proposal_generator.rpn_head.conv.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                            return (%input.117)
                      
                        }
                        method forward2 {
                          graph(%self.303 : __torch__.torch.nn.modules.activation.ReLU,
                                %input.119 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                            %input.121 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu(%input.119), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv/__module.model.proposal_generator.rpn_head.conv.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                            return (%input.121)
                      
                        }
                        method forward3 {
                          graph(%self.311 : __torch__.torch.nn.modules.activation.ReLU,
                                %input.123 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)):
                            %input.125 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu(%input.123), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv/__module.model.proposal_generator.rpn_head.conv.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                            return (%input.125)
                      
                        }
                        method forward4 {
                          graph(%self.319 : __torch__.torch.nn.modules.activation.ReLU,
                                %input.127 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu)):
                            %input.129 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu) = aten::relu(%input.127), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv/__module.model.proposal_generator.rpn_head.conv.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                            return (%input.129)
                      
                        }
                      }
                      submodules {
                      }
                    }
                  }
                }
                module __torch__.torch.nn.modules.conv.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self.289 : __torch__.torch.nn.modules.conv.Conv2d,
                            %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.289)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.289)
                        %4 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %7 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %10 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %13 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %17 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %score.1 : Float(1, 3, 200, 272, strides=[163200, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        return (%score.1)
                  
                    }
                    method forward1 {
                      graph(%self.297 : __torch__.torch.nn.modules.conv.Conv2d,
                            %1 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.297)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.297)
                        %4 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %7 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %10 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %13 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %17 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %score.3 : Float(1, 3, 100, 136, strides=[40800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        return (%score.3)
                  
                    }
                    method forward2 {
                      graph(%self.305 : __torch__.torch.nn.modules.conv.Conv2d,
                            %1 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.305)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.305)
                        %4 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %7 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %10 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %13 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %17 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %score.5 : Float(1, 3, 50, 68, strides=[10200, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        return (%score.5)
                  
                    }
                    method forward3 {
                      graph(%self.313 : __torch__.torch.nn.modules.conv.Conv2d,
                            %1 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.313)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.313)
                        %4 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %7 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %10 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %13 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %17 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %score.7 : Float(1, 3, 25, 34, strides=[2550, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        return (%score.7)
                  
                    }
                    method forward4 {
                      graph(%self.321 : __torch__.torch.nn.modules.conv.Conv2d,
                            %1 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.321)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.321)
                        %4 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %7 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %10 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %13 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
                        %17 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %score : Float(1, 3, 13, 17, strides=[663, 221, 17, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        return (%score)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.conv.___torch_mangle_131.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self.291 : __torch__.torch.nn.modules.conv.___torch_mangle_131.Conv2d,
                            %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.291)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.291)
                        %4 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %7 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %10 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %13 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %17 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %x.113 : Float(1, 12, 200, 272, strides=[652800, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        return (%x.113)
                  
                    }
                    method forward1 {
                      graph(%self.299 : __torch__.torch.nn.modules.conv.___torch_mangle_131.Conv2d,
                            %1 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.299)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.299)
                        %4 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %7 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %10 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %13 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %17 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %x.115 : Float(1, 12, 100, 136, strides=[163200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        return (%x.115)
                  
                    }
                    method forward2 {
                      graph(%self.307 : __torch__.torch.nn.modules.conv.___torch_mangle_131.Conv2d,
                            %1 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.307)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.307)
                        %4 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %7 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %10 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %13 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %17 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %x.117 : Float(1, 12, 50, 68, strides=[40800, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        return (%x.117)
                  
                    }
                    method forward3 {
                      graph(%self.315 : __torch__.torch.nn.modules.conv.___torch_mangle_131.Conv2d,
                            %1 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.315)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.315)
                        %4 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %7 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %10 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %13 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %17 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %x.119 : Float(1, 12, 25, 34, strides=[10200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        return (%x.119)
                  
                    }
                    method forward4 {
                      graph(%self.323 : __torch__.torch.nn.modules.conv.___torch_mangle_131.Conv2d,
                            %1 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.323)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.323)
                        %4 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %5 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %7 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %10 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %13 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
                        %17 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        %x.121 : Float(1, 12, 13, 17, strides=[2652, 221, 17, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
                        return (%x.121)
                  
                    }
                  }
                  submodules {
                  }
                }
              }
            }
            module __torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator {
              parameters {
              }
              attributes {
                training = False
                _is_full_backward_hook = None
                cell_anchors = <__torch__.detectron2.modeling.anchor_generator.BufferList object at 0x5595a521ba50>
              }
              methods {
                method forward {
                  graph(%self.281 : __torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator,
                        %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu),
                        %2 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu),
                        %3 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu),
                        %4 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu),
                        %5 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu),
                        %6 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu),
                        %7 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu),
                        %8 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu)):
                    %9 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%self.281)
                    %10 : Tensor = prim::GetAttr[name="4"](%9)
                    %11 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%self.281)
                    %12 : Tensor = prim::GetAttr[name="3"](%11)
                    %13 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%self.281)
                    %14 : Tensor = prim::GetAttr[name="2"](%13)
                    %15 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%self.281)
                    %16 : Tensor = prim::GetAttr[name="1"](%15)
                    %17 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%self.281)
                    %18 : Tensor = prim::GetAttr[name="0"](%17)
                    %25 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %26 : int = aten::size(%1, %25), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %grid_height.1 : Long(device=cpu) = prim::NumToTensor(%26), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %28 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %29 : int = aten::size(%1, %28), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %grid_width.1 : Long(device=cpu) = prim::NumToTensor(%29), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %37 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %38 : int = aten::size(%2, %37), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %grid_height.3 : Long(device=cpu) = prim::NumToTensor(%38), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %40 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %41 : int = aten::size(%2, %40), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %grid_width.3 : Long(device=cpu) = prim::NumToTensor(%41), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %49 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %50 : int = aten::size(%3, %49), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %grid_height.5 : Long(device=cpu) = prim::NumToTensor(%50), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %52 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %53 : int = aten::size(%3, %52), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %grid_width.5 : Long(device=cpu) = prim::NumToTensor(%53), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %61 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %62 : int = aten::size(%6, %61), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %grid_height.7 : Long(device=cpu) = prim::NumToTensor(%62), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %64 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %65 : int = aten::size(%7, %64), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %grid_width.7 : Long(device=cpu) = prim::NumToTensor(%65), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %73 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %74 : int = aten::size(%8, %73), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %grid_height : Long(device=cpu) = prim::NumToTensor(%74), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %76 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %77 : int = aten::size(%8, %76), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
                    %grid_width : Long(device=cpu) = prim::NumToTensor(%77), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %79 : Long(requires_grad=0, device=cpu) = prim::Constant[value={4}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %80 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_width.1, %79), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %81 : Scalar = aten::ScalarImplicit(%80), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %82 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %83 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %84 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %85 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %86 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %87 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %88 : Float(272, strides=[1], requires_grad=0, device=cpu) = aten::arange(%82, %81, %83, %84, %85, %86, %87), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %89 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %90 : Tensor = prim::CallFunction(%89, %88, %18), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %91 : Long(requires_grad=0, device=cpu) = prim::Constant[value={4}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %92 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_height.1, %91), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %93 : Scalar = aten::ScalarImplicit(%92), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %94 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %95 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %96 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %97 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %98 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %99 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %100 : Float(200, strides=[1], requires_grad=0, device=cpu) = aten::arange(%94, %93, %95, %96, %97, %98, %99), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %101 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %102 : Tensor = prim::CallFunction(%101, %100, %18), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %103 : Tensor[] = prim::ListConstruct(%102, %90), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %104 : Tensor[] = aten::meshgrid(%103), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/functional.py:344:0
                    %shift_y.1 : Float(200, 272, strides=[1, 0], requires_grad=0, device=cpu), %shift_x.1 : Float(200, 272, strides=[0, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%104), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %107 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
                    %108 : int[] = prim::ListConstruct(%107), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %shift_x.3 : Float(54400, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_x.1, %108), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
                    %110 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
                    %111 : int[] = prim::ListConstruct(%110), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %shift_y.3 : Float(54400, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_y.1, %111), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
                    %113 : Tensor[] = prim::ListConstruct(%shift_x.3, %shift_y.3, %shift_x.3, %shift_y.3), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %114 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
                    %shifts.1 : Float(54400, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%113, %114), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
                    %116 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %117 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %118 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %119 : int[] = prim::ListConstruct(%116, %117, %118), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %120 : Float(54400, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%shifts.1, %119), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %121 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %122 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %123 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %124 : int[] = prim::ListConstruct(%121, %122, %123), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %125 : Float(1, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::view(%18, %124), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %126 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %127 : Float(54400, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::add(%120, %125, %126), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %128 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %129 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %130 : int[] = prim::ListConstruct(%128, %129), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %tensor.1 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%127, %130), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %132 : Long(requires_grad=0, device=cpu) = prim::Constant[value={8}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %133 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_width.3, %132), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %134 : Scalar = aten::ScalarImplicit(%133), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %135 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %136 : int = prim::Constant[value=8](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %137 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %138 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %139 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %140 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %141 : Float(136, strides=[1], requires_grad=0, device=cpu) = aten::arange(%135, %134, %136, %137, %138, %139, %140), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %142 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %143 : Tensor = prim::CallFunction(%142, %141, %16), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %144 : Long(requires_grad=0, device=cpu) = prim::Constant[value={8}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %145 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_height.3, %144), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %146 : Scalar = aten::ScalarImplicit(%145), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %147 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %148 : int = prim::Constant[value=8](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %149 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %150 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %151 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %152 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %153 : Float(100, strides=[1], requires_grad=0, device=cpu) = aten::arange(%147, %146, %148, %149, %150, %151, %152), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %154 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %155 : Tensor = prim::CallFunction(%154, %153, %16), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %156 : Tensor[] = prim::ListConstruct(%155, %143), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %157 : Tensor[] = aten::meshgrid(%156), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/functional.py:344:0
                    %shift_y.5 : Float(100, 136, strides=[1, 0], requires_grad=0, device=cpu), %shift_x.5 : Float(100, 136, strides=[0, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%157), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %160 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
                    %161 : int[] = prim::ListConstruct(%160), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %shift_x.7 : Float(13600, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_x.5, %161), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
                    %163 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
                    %164 : int[] = prim::ListConstruct(%163), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %shift_y.7 : Float(13600, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_y.5, %164), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
                    %166 : Tensor[] = prim::ListConstruct(%shift_x.7, %shift_y.7, %shift_x.7, %shift_y.7), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %167 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
                    %shifts.3 : Float(13600, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%166, %167), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
                    %169 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %170 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %171 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %172 : int[] = prim::ListConstruct(%169, %170, %171), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %173 : Float(13600, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%shifts.3, %172), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %174 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %175 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %176 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %177 : int[] = prim::ListConstruct(%174, %175, %176), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %178 : Float(1, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::view(%16, %177), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %179 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %180 : Float(13600, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::add(%173, %178, %179), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %181 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %182 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %183 : int[] = prim::ListConstruct(%181, %182), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %tensor.5 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%180, %183), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %185 : Long(requires_grad=0, device=cpu) = prim::Constant[value={16}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %186 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_width.5, %185), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %187 : Scalar = aten::ScalarImplicit(%186), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %188 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %189 : int = prim::Constant[value=16](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %190 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %191 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %192 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %193 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %194 : Float(68, strides=[1], requires_grad=0, device=cpu) = aten::arange(%188, %187, %189, %190, %191, %192, %193), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %195 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %196 : Tensor = prim::CallFunction(%195, %194, %14), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %197 : Long(requires_grad=0, device=cpu) = prim::Constant[value={16}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %198 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_height.5, %197), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %199 : Scalar = aten::ScalarImplicit(%198), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %200 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %201 : int = prim::Constant[value=16](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %202 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %203 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %204 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %205 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %206 : Float(50, strides=[1], requires_grad=0, device=cpu) = aten::arange(%200, %199, %201, %202, %203, %204, %205), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %207 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %208 : Tensor = prim::CallFunction(%207, %206, %14), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %209 : Tensor[] = prim::ListConstruct(%208, %196), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %210 : Tensor[] = aten::meshgrid(%209), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/functional.py:344:0
                    %shift_y.9 : Float(50, 68, strides=[1, 0], requires_grad=0, device=cpu), %shift_x.9 : Float(50, 68, strides=[0, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%210), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %213 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
                    %214 : int[] = prim::ListConstruct(%213), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %shift_x.11 : Float(3400, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_x.9, %214), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
                    %216 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
                    %217 : int[] = prim::ListConstruct(%216), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %shift_y.11 : Float(3400, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_y.9, %217), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
                    %219 : Tensor[] = prim::ListConstruct(%shift_x.11, %shift_y.11, %shift_x.11, %shift_y.11), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %220 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
                    %shifts.5 : Float(3400, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%219, %220), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
                    %222 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %223 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %224 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %225 : int[] = prim::ListConstruct(%222, %223, %224), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %226 : Float(3400, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%shifts.5, %225), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %227 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %228 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %229 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %230 : int[] = prim::ListConstruct(%227, %228, %229), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %231 : Float(1, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::view(%14, %230), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %232 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %233 : Float(3400, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::add(%226, %231, %232), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %234 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %235 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %236 : int[] = prim::ListConstruct(%234, %235), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %tensor.9 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%233, %236), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %238 : Long(requires_grad=0, device=cpu) = prim::Constant[value={32}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %239 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_width.7, %238), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %240 : Scalar = aten::ScalarImplicit(%239), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %241 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %242 : int = prim::Constant[value=32](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %243 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %244 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %245 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %246 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %247 : Float(34, strides=[1], requires_grad=0, device=cpu) = aten::arange(%241, %240, %242, %243, %244, %245, %246), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %248 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %249 : Tensor = prim::CallFunction(%248, %247, %12), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %250 : Long(requires_grad=0, device=cpu) = prim::Constant[value={32}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %251 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_height.7, %250), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %252 : Scalar = aten::ScalarImplicit(%251), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %253 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %254 : int = prim::Constant[value=32](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %255 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %256 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %257 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %258 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %259 : Float(25, strides=[1], requires_grad=0, device=cpu) = aten::arange(%253, %252, %254, %255, %256, %257, %258), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %260 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %261 : Tensor = prim::CallFunction(%260, %259, %12), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %262 : Tensor[] = prim::ListConstruct(%261, %249), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %263 : Tensor[] = aten::meshgrid(%262), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/functional.py:344:0
                    %shift_y.13 : Float(25, 34, strides=[1, 0], requires_grad=0, device=cpu), %shift_x.13 : Float(25, 34, strides=[0, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%263), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %266 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
                    %267 : int[] = prim::ListConstruct(%266), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %shift_x.15 : Float(850, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_x.13, %267), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
                    %269 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
                    %270 : int[] = prim::ListConstruct(%269), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %shift_y.15 : Float(850, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_y.13, %270), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
                    %272 : Tensor[] = prim::ListConstruct(%shift_x.15, %shift_y.15, %shift_x.15, %shift_y.15), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %273 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
                    %shifts.7 : Float(850, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%272, %273), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
                    %275 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %276 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %277 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %278 : int[] = prim::ListConstruct(%275, %276, %277), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %279 : Float(850, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%shifts.7, %278), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %280 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %281 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %282 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %283 : int[] = prim::ListConstruct(%280, %281, %282), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %284 : Float(1, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::view(%12, %283), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %285 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %286 : Float(850, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::add(%279, %284, %285), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %287 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %288 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %289 : int[] = prim::ListConstruct(%287, %288), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %tensor.13 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%286, %289), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %291 : Long(requires_grad=0, device=cpu) = prim::Constant[value={64}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %292 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_width, %291), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %293 : Scalar = aten::ScalarImplicit(%292), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %294 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %295 : int = prim::Constant[value=64](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %296 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %297 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %298 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %299 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %300 : Float(17, strides=[1], requires_grad=0, device=cpu) = aten::arange(%294, %293, %295, %296, %297, %298, %299), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
                    %301 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %302 : Tensor = prim::CallFunction(%301, %300, %10), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %303 : Long(requires_grad=0, device=cpu) = prim::Constant[value={64}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %304 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_height, %303), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %305 : Scalar = aten::ScalarImplicit(%304), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %306 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %307 : int = prim::Constant[value=64](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %308 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %309 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %310 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %311 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %312 : Float(13, strides=[1], requires_grad=0, device=cpu) = aten::arange(%306, %305, %307, %308, %309, %310, %311), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
                    %313 : Function = prim::Constant[name="move_device_like"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %314 : Tensor = prim::CallFunction(%313, %312, %10), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %315 : Tensor[] = prim::ListConstruct(%314, %302), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %316 : Tensor[] = aten::meshgrid(%315), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/functional.py:344:0
                    %shift_y.17 : Float(13, 17, strides=[1, 0], requires_grad=0, device=cpu), %shift_x.17 : Float(13, 17, strides=[0, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%316), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %319 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
                    %320 : int[] = prim::ListConstruct(%319), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %shift_x : Float(221, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_x.17, %320), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
                    %322 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
                    %323 : int[] = prim::ListConstruct(%322), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %shift_y : Float(221, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_y.17, %323), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
                    %325 : Tensor[] = prim::ListConstruct(%shift_x, %shift_y, %shift_x, %shift_y), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %326 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
                    %shifts : Float(221, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%325, %326), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
                    %328 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %329 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %330 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %331 : int[] = prim::ListConstruct(%328, %329, %330), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %332 : Float(221, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%shifts, %331), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %333 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %334 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %335 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %336 : int[] = prim::ListConstruct(%333, %334, %335), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %337 : Float(1, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::view(%10, %336), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %338 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %339 : Float(221, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::add(%332, %337, %338), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %340 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %341 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %342 : int[] = prim::ListConstruct(%340, %341), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %tensor.17 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%339, %342), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
                    %344 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %345 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %346 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %347 : NoneType = prim::Constant(), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %tensor.3 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.1, %344, %345, %346, %347), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %354 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %355 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %356 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %357 : NoneType = prim::Constant(), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %tensor.7 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.5, %354, %355, %356, %357), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %364 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %365 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %366 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %367 : NoneType = prim::Constant(), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %tensor.11 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.9, %364, %365, %366, %367), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %374 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %375 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %376 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %377 : NoneType = prim::Constant(), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %tensor.15 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.13, %374, %375, %376, %377), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %384 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %385 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %386 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %387 : NoneType = prim::Constant(), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
                    %tensor.19 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.17, %384, %385, %386, %387), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                    %394 : (Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu), Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu), Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu), Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu), Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%tensor.3, %tensor.7, %tensor.11, %tensor.15, %tensor.19)
                    return (%394)
              
                }
              }
              submodules {
                module __torch__.detectron2.modeling.anchor_generator.BufferList {
                  parameters {
                  }
                  attributes {
                    0 = ...
                    1 = ...
                    2 = ...
                    3 = ...
                    4 = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
        module __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads {
          parameters {
          }
          attributes {
            training = False
            _is_full_backward_hook = None
            box_pooler = <__torch__.detectron2.modeling.poolers.ROIPooler object at 0x5595a522afd0>
            box_head = <__torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead object at 0x5595a52344a0>
            box_predictor = <__torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers object at 0x5595a5239860>
            mask_pooler = <__torch__.detectron2.modeling.poolers.___torch_mangle_145.ROIPooler object at 0x5595a52425f0>
            mask_head = <__torch__.detectron2.modeling.roi_heads.mask_head.MaskRCNNConvUpsampleHead object at 0x5595a5256030>
          }
          methods {
            method forward {
              graph(%self.325 : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads,
                    %7 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu),
                    %8 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu),
                    %9 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu),
                    %10 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu),
                    %11 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu),
                    %image_size : Long(2, strides=[1], requires_grad=0, device=cpu),
                    %511 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)):
                %1 : __torch__.detectron2.modeling.roi_heads.mask_head.MaskRCNNConvUpsampleHead = prim::GetAttr[name="mask_head"](%self.325)
                %2 : __torch__.detectron2.modeling.poolers.___torch_mangle_145.ROIPooler = prim::GetAttr[name="mask_pooler"](%self.325)
                %3 : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%self.325)
                %4 : __torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead = prim::GetAttr[name="box_head"](%self.325)
                %5 : __torch__.detectron2.modeling.poolers.ROIPooler = prim::GetAttr[name="box_pooler"](%self.325)
                %514 : Tensor = prim::CallMethod[name="forward"](%5, %7, %8, %9, %10, %11)
                %515 : Tensor = prim::CallMethod[name="forward"](%4, %514)
                %516 : (Tensor, Tensor) = prim::CallMethod[name="forward"](%3, %515)
                %14 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu), %15 : Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu) = prim::TupleUnpack(%516)
                %16 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
                %17 : int = aten::size(%8, %16), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
                %18 : Long(device=cpu) = prim::NumToTensor(%17), scope: __module.model.roi_heads
                %19 : int = aten::Int(%18), scope: __module.model.roi_heads
                %23 : int = prim::Constant[value=6](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %24 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %25 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %26 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %deltas : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%14, %23, %24, %25, %26), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
                %28 : int = prim::Constant[value=6](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %29 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %30 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %31 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %boxes.29 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%8, %28, %29, %30, %31), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
                %33 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %34 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %35 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %36 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %37 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %33, %34, %35, %36), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %38 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %39 : int = prim::Constant[value=2](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %40 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%37, %38, %39), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %41 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %42 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %43 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %44 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %45 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %41, %42, %43, %44), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %46 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %47 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %48 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%45, %46, %47), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %49 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %widths : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::sub(%40, %48, %49), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
                %51 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %52 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %53 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %54 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %55 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %51, %52, %53, %54), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %56 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %57 : int = prim::Constant[value=3](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %58 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%55, %56, %57), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %59 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %60 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %61 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %62 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %63 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %59, %60, %61, %62), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %64 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %65 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %66 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%63, %64, %65), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %67 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %heights : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::sub(%58, %66, %67), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
                %69 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %70 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %71 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %72 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %73 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %69, %70, %71, %72), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %74 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %75 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %76 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%73, %74, %75), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %77 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %78 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths, %77), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %79 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %ctr_x : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::add(%76, %78, %79), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
                %81 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %82 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %83 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %84 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %85 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %81, %82, %83, %84), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %86 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %87 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %88 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%85, %86, %87), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %89 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %90 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights, %89), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %91 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %ctr_y : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::add(%88, %90, %91), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
                %93 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %94 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %95 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %96 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %97 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas, %93, %94, %95, %96), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %98 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %99 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %100 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %101 : int = prim::Constant[value=4](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %102 : Float(1000, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%97, %98, %99, %100, %101), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %103 : Double(requires_grad=0, device=cpu) = prim::Constant[value={10}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %dx : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%102, %103), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
                %105 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %106 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %107 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %108 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %109 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas, %105, %106, %107, %108), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %110 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %111 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %112 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %113 : int = prim::Constant[value=4](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %114 : Float(1000, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%109, %110, %111, %112, %113), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %115 : Double(requires_grad=0, device=cpu) = prim::Constant[value={10}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %dy : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%114, %115), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
                %117 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %118 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %119 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %120 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %121 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas, %117, %118, %119, %120), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %122 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %123 : int = prim::Constant[value=2](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %124 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %125 : int = prim::Constant[value=4](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %126 : Float(1000, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%121, %122, %123, %124, %125), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %127 : Double(requires_grad=0, device=cpu) = prim::Constant[value={5}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %dw.21 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%126, %127), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
                %129 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %130 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %131 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %132 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %133 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas, %129, %130, %131, %132), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %134 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %135 : int = prim::Constant[value=3](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %136 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %137 : int = prim::Constant[value=4](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %138 : Float(1000, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%133, %134, %135, %136, %137), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %139 : Double(requires_grad=0, device=cpu) = prim::Constant[value={5}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %dh.21 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%138, %139), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
                %141 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %142 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %dw : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.21, %141, %142), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
                %144 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %145 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %dh : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.21, %144, %145), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
                %147 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %148 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %149 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %150 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %151 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths, %147, %148, %149, %150), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %152 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %153 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%151, %152), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %154 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx, %153), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %155 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %156 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %157 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %158 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %159 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x, %155, %156, %157, %158), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %160 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %161 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%159, %160), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %162 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %pred_ctr_x : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%154, %161, %162), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
                %164 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %165 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %166 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %167 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %168 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights, %164, %165, %166, %167), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %169 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %170 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%168, %169), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %171 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy, %170), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %172 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %173 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %174 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %175 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %176 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y, %172, %173, %174, %175), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %177 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %178 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%176, %177), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %179 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %pred_ctr_y : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%171, %178, %179), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
                %181 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %182 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %183 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %184 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %185 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %186 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths, %182, %183, %184, %185), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %187 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %188 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%186, %187), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %pred_w : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%181, %188), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
                %190 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %191 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %192 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %193 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %194 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %195 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights, %191, %192, %193, %194), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %196 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %197 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%195, %196), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %pred_h : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%190, %197), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
                %199 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %200 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w, %199), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %201 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %x1.13 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x, %200, %201), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
                %203 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %204 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h, %203), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %205 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %y1.13 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y, %204, %205), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
                %207 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %208 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w, %207), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %209 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %x2.13 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x, %208, %209), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
                %211 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %212 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h, %211), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %213 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %y2.13 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y, %212, %213), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
                %215 : Tensor[] = prim::ListConstruct(%x1.13, %y1.13, %x2.13, %y2.13), scope: __module.model.roi_heads
                %216 : int = prim::Constant[value=-1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %pred_boxes : Float(1000, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%215, %216), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
                %218 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %219 : int = aten::size(%deltas, %218), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %220 : Long(device=cpu) = prim::NumToTensor(%219), scope: __module.model.roi_heads
                %221 : int = aten::Int(%220), scope: __module.model.roi_heads
                %222 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %223 : int = aten::size(%deltas, %222), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %224 : Long(device=cpu) = prim::NumToTensor(%223), scope: __module.model.roi_heads
                %225 : int = aten::Int(%224), scope: __module.model.roi_heads
                %226 : int[] = prim::ListConstruct(%221, %225), scope: __module.model.roi_heads
                %227 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes, %226), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
                %228 : int[] = prim::ListConstruct(%19), scope: __module.model.roi_heads
                %229 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:515:0
                %230 : Tensor[] = aten::split_with_sizes(%227, %228, %229), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:515:0
                %boxes.31 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%230), scope: __module.model.roi_heads
                %232 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
                %233 : int = aten::size(%boxes.29, %232), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
                %234 : Long(device=cpu) = prim::NumToTensor(%233), scope: __module.model.roi_heads
                %235 : int = aten::Int(%234), scope: __module.model.roi_heads
                %239 : int = prim::Constant[value=-1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1679:0
                %240 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %241 : Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::softmax(%15, %239, %240), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1679:0
                %242 : int[] = prim::ListConstruct(%235), scope: __module.model.roi_heads
                %243 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:515:0
                %244 : Tensor[] = aten::split_with_sizes(%241, %242, %243), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:515:0
                %scores.1 : Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%244), scope: __module.model.roi_heads
                %256 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
                %257 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
                %258 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
                %259 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
                %260 : Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::slice(%scores.1, %256, %257, %258, %259), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
                %261 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
                %262 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
                %263 : int = prim::Constant[value=-1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
                %264 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
                %scores.3 : Float(1000, 1, strides=[2, 1], requires_grad=0, device=cpu) = aten::slice(%260, %261, %262, %263, %264), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
                %269 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:143:0
                %270 : int = aten::size(%boxes.31, %269), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:143:0
                %271 : Long(device=cpu) = prim::NumToTensor(%270), scope: __module.model.roi_heads
                %272 : Long(requires_grad=0, device=cpu) = prim::Constant[value={4}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:575:0
                %num_bbox_reg_classes : Long(requires_grad=0, device=cpu) = aten::floor_divide(%271, %272), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:575:0
                %274 : int = aten::Int(%num_bbox_reg_classes), scope: __module.model.roi_heads
                %275 : int = prim::Constant[value=-1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:145:0
                %276 : int = prim::Constant[value=4](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:145:0
                %277 : int[] = prim::ListConstruct(%275, %276), scope: __module.model.roi_heads
                %tensor.33 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%boxes.31, %277), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:145:0
                %279 : int = prim::Constant[value=6](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %280 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %281 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %282 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %tensor.35 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.33, %279, %280, %281, %282), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %291 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:613:0
                %292 : Tensor[] = aten::unbind(%image_size, %291), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:613:0
                %h : Long(requires_grad=0, device=cpu), %w : Long(requires_grad=0, device=cpu) = prim::ListUnpack(%292), scope: __module.model.roi_heads
                %296 : Scalar = aten::ScalarImplicit(%h), scope: __module.model.roi_heads
                %297 : Scalar = aten::ScalarImplicit(%w), scope: __module.model.roi_heads
                %298 : Scalar = aten::ScalarImplicit(%h), scope: __module.model.roi_heads
                %299 : Scalar = aten::ScalarImplicit(%w), scope: __module.model.roi_heads
                %300 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %301 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %302 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %303 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %304 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.35, %300, %301, %302, %303), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %305 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %306 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %307 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%304, %305, %306), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %308 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %x1 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%307, %308, %299), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
                %310 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %311 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %312 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %313 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %314 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.35, %310, %311, %312, %313), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %315 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %316 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %317 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%314, %315, %316), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %318 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %y1 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%317, %318, %298), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
                %320 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %321 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %322 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %323 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %324 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.35, %320, %321, %322, %323), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %325 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %326 : int = prim::Constant[value=2](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %327 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%324, %325, %326), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %328 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %x2 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%327, %328, %297), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
                %330 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %331 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %332 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %333 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %334 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.35, %330, %331, %332, %333), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %335 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %336 : int = prim::Constant[value=3](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %337 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%334, %335, %336), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %338 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %y2 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%337, %338, %296), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
                %340 : Tensor[] = prim::ListConstruct(%x1, %y1, %x2, %y2), scope: __module.model.roi_heads
                %341 : int = prim::Constant[value=-1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:197:0
                %342 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%340, %341), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:197:0
                %343 : int = prim::Constant[value=-1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:147:0
                %344 : int = prim::Constant[value=4](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:147:0
                %345 : int[] = prim::ListConstruct(%343, %274, %344), scope: __module.model.roi_heads
                %boxes.33 : Float(1000, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%342, %345), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:147:0
                %347 : float = prim::Constant[value=0.050000000000000003](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:155:0
                %filter_mask.1 : Bool(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::gt(%scores.3, %347), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:155:0
                %filter_inds.1 : Long(51, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::nonzero(%filter_mask.1), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:158:0
                %352 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %353 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %354 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %355 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %356 : Long(51, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::slice(%filter_inds.1, %352, %353, %354, %355), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %357 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %358 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %359 : Long(51, strides=[2], requires_grad=0, device=cpu) = aten::select(%356, %357, %358), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %360 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %361 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %362 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::select(%boxes.33, %360, %361), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %363 : int = prim::Constant[value=4](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %364 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %365 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %366 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %367 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %368 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %369 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %370 : Long(51, strides=[2], requires_grad=0, device=cpu) = aten::to(%359, %363, %364, %365, %366, %367, %368, %369), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %371 : Tensor?[] = prim::ListConstruct(%370), scope: __module.model.roi_heads
                %boxes.35 : Float(51, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::index(%362, %371), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
                %373 : int = prim::Constant[value=11](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:0
                %374 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:0
                %375 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:0
                %376 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %377 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:0
                %378 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:0
                %379 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %filter_mask : Bool(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%filter_mask.1, %373, %374, %375, %376, %377, %378, %379), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:0
                %381 : Tensor?[] = prim::ListConstruct(%filter_mask), scope: __module.model.roi_heads
                %scores : Float(51, strides=[1], requires_grad=0, device=cpu) = aten::index(%scores.3, %381), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:0
                %383 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:166:0
                %384 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:166:0
                %385 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:166:0
                %386 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:166:0
                %387 : Long(51, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::slice(%filter_inds.1, %383, %384, %385, %386), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:166:0
                %388 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:166:0
                %389 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:166:0
                %390 : Long(51, strides=[2], requires_grad=0, device=cpu) = aten::select(%387, %388, %389), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:166:0
                %399 : int = prim::Constant[value=6](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/nms.py:20:0
                %400 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/nms.py:20:0
                %401 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/nms.py:20:0
                %402 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %boxes.37 : Float(51, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.35, %399, %400, %401, %402), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/nms.py:20:0
                %404 : float = prim::Constant[value=0.5](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
                %405 : Function = prim::Constant[name="_batched_nms_coordinate_trick"](), scope: __module.model.roi_heads
                %keep.9 : Tensor = prim::CallFunction(%405, %boxes.37, %scores, %390, %404), scope: __module.model.roi_heads
                %407 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:168:0
                %408 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:168:0
                %409 : int = prim::Constant[value=100](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:168:0
                %410 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:168:0
                %keep.11 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::slice(%keep.9, %407, %408, %409, %410), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:168:0
                %412 : int = prim::Constant[value=4](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %413 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %414 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %415 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %416 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %417 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %418 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %keep.13 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::to(%keep.11, %412, %413, %414, %415, %416, %417, %418), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %420 : Tensor?[] = prim::ListConstruct(%keep.13), scope: __module.model.roi_heads
                %tensor.37 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::index(%boxes.37, %420), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %422 : int = prim::Constant[value=4](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %423 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %424 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %425 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %426 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %427 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %428 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %keep.15 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::to(%keep.13, %422, %423, %424, %425, %426, %427, %428), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %430 : Tensor?[] = prim::ListConstruct(%keep.15), scope: __module.model.roi_heads
                %431 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::index(%scores, %430), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %432 : int = prim::Constant[value=4](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %433 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %434 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %435 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %436 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %437 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %438 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %keep : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::to(%keep.15, %432, %433, %434, %435, %436, %437, %438), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %440 : Tensor?[] = prim::ListConstruct(%keep), scope: __module.model.roi_heads
                %filter_inds : Long(2, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::index(%filter_inds.1, %440), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
                %460 : int = prim::Constant[value=6](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %461 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %462 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %463 : NoneType = prim::Constant(), scope: __module.model.roi_heads
                %tensor : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.37, %460, %461, %462, %463), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
                %485 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:177:0
                %486 : int = prim::Constant[value=0](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:177:0
                %487 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:177:0
                %488 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:177:0
                %489 : Long(2, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::slice(%filter_inds, %485, %486, %487, %488), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:177:0
                %490 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:177:0
                %491 : int = prim::Constant[value=1](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:177:0
                %492 : Long(2, strides=[2], requires_grad=0, device=cpu) = aten::select(%489, %490, %491), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:177:0
                %517 : Tensor = prim::CallMethod[name="forward"](%2, %7, %tensor, %9, %10, %511)
                %518 : Tensor = prim::CallMethod[name="forward"](%1, %517, %tensor)
                %513 : (Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu), Long(2, strides=[2], requires_grad=0, device=cpu), Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu), Float(2, strides=[1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%tensor, %492, %518, %431)
                return (%513)
          
            }
          }
          submodules {
            module __torch__.detectron2.modeling.poolers.ROIPooler {
              parameters {
              }
              attributes {
                training = False
                _is_full_backward_hook = None
                level_poolers = <__torch__.torch.nn.modules.container.ModuleList object at 0x5595a522a070>
              }
              methods {
                method forward {
                  graph(%self.327 : __torch__.detectron2.modeling.poolers.ROIPooler,
                        %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu),
                        %2 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu),
                        %3 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu),
                        %4 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu),
                        %5 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)):
                    %6 : __torch__.torch.nn.modules.container.ModuleList = prim::GetAttr[name="level_poolers"](%self.327)
                    %7 : __torch__.detectron2.layers.roi_align.___torch_mangle_134.ROIAlign = prim::GetAttr[name="3"](%6)
                    %8 : __torch__.torch.nn.modules.container.ModuleList = prim::GetAttr[name="level_poolers"](%self.327)
                    %9 : __torch__.detectron2.layers.roi_align.___torch_mangle_133.ROIAlign = prim::GetAttr[name="2"](%8)
                    %10 : __torch__.torch.nn.modules.container.ModuleList = prim::GetAttr[name="level_poolers"](%self.327)
                    %11 : __torch__.detectron2.layers.roi_align.___torch_mangle_132.ROIAlign = prim::GetAttr[name="1"](%10)
                    %12 : __torch__.torch.nn.modules.container.ModuleList = prim::GetAttr[name="level_poolers"](%self.327)
                    %13 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="0"](%12)
                    %36 : Tensor[] = prim::ListConstruct(%2), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %37 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:95:0
                    %38 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::cat(%36, %37), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:95:0
                    %39 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
                    %40 : int = aten::size(%2, %39), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
                    %41 : Long(device=cpu) = prim::NumToTensor(%40), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %45 : Tensor[] = prim::ListConstruct(%41), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %46 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:34:0
                    %47 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::stack(%45, %46), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:34:0
                    %48 : Function = prim::Constant[name="_convert_boxes_to_pooler_format"](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %pooler_fmt_boxes.1 : Tensor = prim::CallFunction(%48, %38, %47), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %50 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %51 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %52 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %53 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %54 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%2, %50, %51, %52, %53), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %55 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %56 : int = prim::Constant[value=2](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %57 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%54, %55, %56), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %58 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %59 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %60 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %61 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %62 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%2, %58, %59, %60, %61), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %63 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %64 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %65 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%62, %63, %64), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %66 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %67 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::sub(%57, %65, %66), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %68 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %69 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %70 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %71 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %72 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%2, %68, %69, %70, %71), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %73 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %74 : int = prim::Constant[value=3](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %75 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%72, %73, %74), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %76 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %77 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %78 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %79 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %80 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%2, %76, %77, %78, %79), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %81 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %82 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %83 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%80, %81, %82), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %84 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %85 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::sub(%75, %83, %84), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %86 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::mul(%67, %85), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %box_sizes.1 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::sqrt(%86), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:51:0
                    %88 : Long(requires_grad=0, device=cpu) = prim::Constant[value={224}](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %89 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::div(%box_sizes.1, %88), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %90 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1e-08}](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %91 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %92 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::add(%89, %90, %91), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %93 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::log2(%92), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %94 : Long(requires_grad=0, device=cpu) = prim::Constant[value={4}](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %95 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %96 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::add(%93, %94, %95), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %level_assignments.1 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::floor(%96), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %98 : int = prim::Constant[value=2](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:58:0
                    %99 : int = prim::Constant[value=5](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:58:0
                    %level_assignments.3 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%level_assignments.1, %98, %99), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:58:0
                    %101 : int = prim::Constant[value=4](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %102 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %103 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %104 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %105 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::to(%level_assignments.3, %101, %102, %103, %104), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %106 : Long(requires_grad=0, device=cpu) = prim::Constant[value={2}](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %107 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %level_assignments.5 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::sub(%105, %106, %107), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %121 : int = prim::Constant[value=256](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
                    %122 : int = prim::Constant[value=7](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
                    %123 : int = prim::Constant[value=7](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
                    %124 : Function = prim::Constant[name="_create_zeros"](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %output.1 : Tensor = prim::CallFunction(%124, %pooler_fmt_boxes.1, %121, %122, %123, %1), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %126 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %x.123 : Bool(1000, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments.5, %126), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %128 : Tensor[] = aten::nonzero_numpy(%x.123), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
                    %inds.1 : Long(630, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%128), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %130 : int = prim::Constant[value=4](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %131 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %132 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %133 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %134 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %135 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %136 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %inds.3 : Long(630, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.1, %130, %131, %132, %133, %134, %135, %136), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %138 : Tensor?[] = prim::ListConstruct(%inds.3), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %rois.1 : Float(630, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes.1, %138), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %198 : Tensor = prim::CallMethod[name="forward"](%13, %rois.1, %1)
                    %141 : Tensor?[] = prim::ListConstruct(%inds.3), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %142 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %output.3 : Float(1000, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.1, %141, %198, %142), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %144 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %x.125 : Bool(1000, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments.5, %144), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %146 : Tensor[] = aten::nonzero_numpy(%x.125), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
                    %inds.5 : Long(182, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%146), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %148 : int = prim::Constant[value=4](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %149 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %150 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %151 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %152 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %153 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %154 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %inds.7 : Long(182, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.5, %148, %149, %150, %151, %152, %153, %154), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %156 : Tensor?[] = prim::ListConstruct(%inds.7), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %rois.3 : Float(182, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes.1, %156), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %199 : Tensor = prim::CallMethod[name="forward"](%11, %rois.3, %3)
                    %159 : Tensor?[] = prim::ListConstruct(%inds.7), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %160 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %output.5 : Float(1000, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.3, %159, %199, %160), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %162 : int = prim::Constant[value=2](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %x.127 : Bool(1000, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments.5, %162), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %164 : Tensor[] = aten::nonzero_numpy(%x.127), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
                    %inds.9 : Long(161, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%164), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %166 : int = prim::Constant[value=4](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %167 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %168 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %169 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %170 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %171 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %172 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %inds.11 : Long(161, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.9, %166, %167, %168, %169, %170, %171, %172), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %174 : Tensor?[] = prim::ListConstruct(%inds.11), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %rois.5 : Float(161, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes.1, %174), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %200 : Tensor = prim::CallMethod[name="forward"](%9, %rois.5, %4)
                    %177 : Tensor?[] = prim::ListConstruct(%inds.11), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %178 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %output.7 : Float(1000, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.5, %177, %200, %178), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %180 : int = prim::Constant[value=3](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %x.129 : Bool(1000, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments.5, %180), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %182 : Tensor[] = aten::nonzero_numpy(%x.129), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
                    %inds.13 : Long(27, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%182), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %184 : int = prim::Constant[value=4](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %185 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %186 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %187 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %188 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %189 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %190 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %inds.15 : Long(27, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.13, %184, %185, %186, %187, %188, %189, %190), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %192 : Tensor?[] = prim::ListConstruct(%inds.15), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %rois.7 : Float(27, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes.1, %192), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %201 : Tensor = prim::CallMethod[name="forward"](%7, %rois.7, %5)
                    %195 : Tensor?[] = prim::ListConstruct(%inds.15), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
                    %196 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %input.131 : Float(1000, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.7, %195, %201, %196), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    return (%input.131)
              
                }
              }
              submodules {
                module __torch__.torch.nn.modules.container.ModuleList {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                    0 = <__torch__.detectron2.layers.roi_align.ROIAlign object at 0x5595a4f5e620>
                    1 = <__torch__.detectron2.layers.roi_align.___torch_mangle_132.ROIAlign object at 0x5595a5222e20>
                    2 = <__torch__.detectron2.layers.roi_align.___torch_mangle_133.ROIAlign object at 0x5595a5222fd0>
                    3 = <__torch__.detectron2.layers.roi_align.___torch_mangle_134.ROIAlign object at 0x5595a5228870>
                  }
                  methods {
                  }
                  submodules {
                    module __torch__.detectron2.layers.roi_align.ROIAlign {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.329 : __torch__.detectron2.layers.roi_align.ROIAlign,
                                %rois.1 : Float(630, 5, strides=[5, 1], requires_grad=0, device=cpu),
                                %2 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                            %8 : int = prim::Constant[value=6](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %9 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %10 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %11 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0
                            %boxes.21 : Float(630, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.1, %8, %9, %10, %11), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %18 : float = prim::Constant[value=0.25](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %19 : int = prim::Constant[value=7](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %20 : int = prim::Constant[value=7](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %21 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %23 : Float(630, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%2, %boxes.21, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            return (%23)
                      
                        }
                      }
                      submodules {
                      }
                    }
                    module __torch__.detectron2.layers.roi_align.___torch_mangle_132.ROIAlign {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.331 : __torch__.detectron2.layers.roi_align.___torch_mangle_132.ROIAlign,
                                %rois.3 : Float(182, 5, strides=[5, 1], requires_grad=0, device=cpu),
                                %2 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu)):
                            %8 : int = prim::Constant[value=6](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %9 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %10 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %11 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1
                            %boxes.23 : Float(182, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.3, %8, %9, %10, %11), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %18 : float = prim::Constant[value=0.125](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %19 : int = prim::Constant[value=7](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %20 : int = prim::Constant[value=7](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %21 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %23 : Float(182, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%2, %boxes.23, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            return (%23)
                      
                        }
                      }
                      submodules {
                      }
                    }
                    module __torch__.detectron2.layers.roi_align.___torch_mangle_133.ROIAlign {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.333 : __torch__.detectron2.layers.roi_align.___torch_mangle_133.ROIAlign,
                                %rois.5 : Float(161, 5, strides=[5, 1], requires_grad=0, device=cpu),
                                %2 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                            %8 : int = prim::Constant[value=6](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %9 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %10 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %11 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2
                            %boxes.25 : Float(161, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.5, %8, %9, %10, %11), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %18 : float = prim::Constant[value=0.0625](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %19 : int = prim::Constant[value=7](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %20 : int = prim::Constant[value=7](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %21 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %23 : Float(161, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%2, %boxes.25, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            return (%23)
                      
                        }
                      }
                      submodules {
                      }
                    }
                    module __torch__.detectron2.layers.roi_align.___torch_mangle_134.ROIAlign {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.335 : __torch__.detectron2.layers.roi_align.___torch_mangle_134.ROIAlign,
                                %rois.7 : Float(27, 5, strides=[5, 1], requires_grad=0, device=cpu),
                                %2 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)):
                            %8 : int = prim::Constant[value=6](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %9 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %10 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %11 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3
                            %boxes.27 : Float(27, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.7, %8, %9, %10, %11), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %18 : float = prim::Constant[value=0.03125](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %19 : int = prim::Constant[value=7](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %20 : int = prim::Constant[value=7](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %21 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %23 : Float(27, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%2, %boxes.27, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            return (%23)
                      
                        }
                      }
                      submodules {
                      }
                    }
                  }
                }
              }
            }
            module __torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead {
              parameters {
              }
              attributes {
                training = False
                _is_full_backward_hook = None
                flatten = <__torch__.torch.nn.modules.flatten.Flatten object at 0x5595a522c330>
                fc1 = <__torch__.torch.nn.modules.linear.Linear object at 0x5595a522da90>
                fc_relu1 = <__torch__.torch.nn.modules.activation.___torch_mangle_135.ReLU object at 0x5595a5230010>
                fc2 = <__torch__.torch.nn.modules.linear.___torch_mangle_136.Linear object at 0x5595a5231cf0>
                fc_relu2 = <__torch__.torch.nn.modules.activation.___torch_mangle_137.ReLU object at 0x5595a52333a0>
              }
              methods {
                method forward {
                  graph(%self.337 : __torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead,
                        %1 : Float(1000, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu)):
                    %2 : __torch__.torch.nn.modules.activation.___torch_mangle_137.ReLU = prim::GetAttr[name="fc_relu2"](%self.337)
                    %3 : __torch__.torch.nn.modules.linear.___torch_mangle_136.Linear = prim::GetAttr[name="fc2"](%self.337)
                    %4 : __torch__.torch.nn.modules.activation.___torch_mangle_135.ReLU = prim::GetAttr[name="fc_relu1"](%self.337)
                    %5 : __torch__.torch.nn.modules.linear.Linear = prim::GetAttr[name="fc1"](%self.337)
                    %6 : __torch__.torch.nn.modules.flatten.Flatten = prim::GetAttr[name="flatten"](%self.337)
                    %12 : Tensor = prim::CallMethod[name="forward"](%6, %1)
                    %13 : Tensor = prim::CallMethod[name="forward"](%5, %12)
                    %14 : Tensor = prim::CallMethod[name="forward"](%4, %13)
                    %15 : Tensor = prim::CallMethod[name="forward"](%3, %14)
                    %16 : Tensor = prim::CallMethod[name="forward"](%2, %15)
                    return (%16)
              
                }
              }
              submodules {
                module __torch__.torch.nn.modules.flatten.Flatten {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self.339 : __torch__.torch.nn.modules.flatten.Flatten,
                            %1 : Float(1000, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu)):
                        %2 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.flatten # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/flatten.py:40:0
                        %3 : int = prim::Constant[value=-1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.flatten # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/flatten.py:40:0
                        %input.133 : Float(1000, 12544, strides=[12544, 1], requires_grad=0, device=cpu) = aten::flatten(%1, %2, %3), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.flatten # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/flatten.py:40:0
                        return (%input.133)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.linear.Linear {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self.341 : __torch__.torch.nn.modules.linear.Linear,
                            %1 : Float(1000, 12544, strides=[12544, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.341)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.341)
                        %input.135 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu) = aten::linear(%1, %3, %2), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.fc1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1847:0
                        return (%input.135)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.activation.___torch_mangle_135.ReLU {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self.343 : __torch__.torch.nn.modules.activation.___torch_mangle_135.ReLU,
                            %1 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu)):
                        %input.137 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu) = aten::relu(%1), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.fc_relu1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                        return (%input.137)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.linear.___torch_mangle_136.Linear {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self.345 : __torch__.torch.nn.modules.linear.___torch_mangle_136.Linear,
                            %1 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.345)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.345)
                        %input.139 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu) = aten::linear(%1, %3, %2), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.fc2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1847:0
                        return (%input.139)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.activation.___torch_mangle_137.ReLU {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self.347 : __torch__.torch.nn.modules.activation.___torch_mangle_137.ReLU,
                            %1 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu)):
                        %input.141 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu) = aten::relu(%1), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.fc_relu2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                        return (%input.141)
                  
                    }
                  }
                  submodules {
                  }
                }
              }
            }
            module __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers {
              parameters {
              }
              attributes {
                training = False
                _is_full_backward_hook = None
                cls_score = <__torch__.torch.nn.modules.linear.___torch_mangle_138.Linear object at 0x5595a5236d60>
                bbox_pred = <__torch__.torch.nn.modules.linear.___torch_mangle_139.Linear object at 0x5595a5238a80>
              }
              methods {
                method forward {
                  graph(%self.349 : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers,
                        %1 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu)):
                    %2 : __torch__.torch.nn.modules.linear.___torch_mangle_139.Linear = prim::GetAttr[name="bbox_pred"](%self.349)
                    %3 : __torch__.torch.nn.modules.linear.___torch_mangle_138.Linear = prim::GetAttr[name="cls_score"](%self.349)
                    %7 : Tensor = prim::CallMethod[name="forward"](%3, %1)
                    %8 : Tensor = prim::CallMethod[name="forward"](%2, %1)
                    %6 : (Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu), Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%8, %7)
                    return (%6)
              
                }
              }
              submodules {
                module __torch__.torch.nn.modules.linear.___torch_mangle_138.Linear {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self.351 : __torch__.torch.nn.modules.linear.___torch_mangle_138.Linear,
                            %1 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.351)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.351)
                        %input.143 : Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::linear(%1, %3, %2), scope: __module.model.roi_heads/__module.model.roi_heads.box_predictor/__module.model.roi_heads.box_predictor.cls_score # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1847:0
                        return (%input.143)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.linear.___torch_mangle_139.Linear {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self.353 : __torch__.torch.nn.modules.linear.___torch_mangle_139.Linear,
                            %1 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.353)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.353)
                        %deltas.21 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::linear(%1, %3, %2), scope: __module.model.roi_heads/__module.model.roi_heads.box_predictor/__module.model.roi_heads.box_predictor.bbox_pred # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1847:0
                        return (%deltas.21)
                  
                    }
                  }
                  submodules {
                  }
                }
              }
            }
            module __torch__.detectron2.modeling.poolers.___torch_mangle_145.ROIPooler {
              parameters {
              }
              attributes {
                training = False
                _is_full_backward_hook = None
                level_poolers = <__torch__.torch.nn.modules.container.___torch_mangle_144.ModuleList object at 0x5595a52413a0>
              }
              methods {
                method forward {
                  graph(%self.355 : __torch__.detectron2.modeling.poolers.___torch_mangle_145.ROIPooler,
                        %1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu),
                        %tensor : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu),
                        %3 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu),
                        %4 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu),
                        %5 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)):
                    %6 : __torch__.torch.nn.modules.container.___torch_mangle_144.ModuleList = prim::GetAttr[name="level_poolers"](%self.355)
                    %7 : __torch__.detectron2.layers.roi_align.___torch_mangle_143.ROIAlign = prim::GetAttr[name="3"](%6)
                    %8 : __torch__.torch.nn.modules.container.___torch_mangle_144.ModuleList = prim::GetAttr[name="level_poolers"](%self.355)
                    %9 : __torch__.detectron2.layers.roi_align.___torch_mangle_142.ROIAlign = prim::GetAttr[name="2"](%8)
                    %10 : __torch__.torch.nn.modules.container.___torch_mangle_144.ModuleList = prim::GetAttr[name="level_poolers"](%self.355)
                    %11 : __torch__.detectron2.layers.roi_align.___torch_mangle_141.ROIAlign = prim::GetAttr[name="1"](%10)
                    %12 : __torch__.torch.nn.modules.container.___torch_mangle_144.ModuleList = prim::GetAttr[name="level_poolers"](%self.355)
                    %13 : __torch__.detectron2.layers.roi_align.___torch_mangle_140.ROIAlign = prim::GetAttr[name="0"](%12)
                    %36 : Tensor[] = prim::ListConstruct(%tensor), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %37 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:95:0
                    %38 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::cat(%36, %37), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:95:0
                    %39 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
                    %40 : int = aten::size(%tensor, %39), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
                    %41 : Long(device=cpu) = prim::NumToTensor(%40), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %45 : Tensor[] = prim::ListConstruct(%41), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %46 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:34:0
                    %47 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::stack(%45, %46), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:34:0
                    %48 : Function = prim::Constant[name="_convert_boxes_to_pooler_format"](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %pooler_fmt_boxes : Tensor = prim::CallFunction(%48, %38, %47), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %50 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %51 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %52 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %53 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %54 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor, %50, %51, %52, %53), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %55 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %56 : int = prim::Constant[value=2](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %57 : Float(2, strides=[4], requires_grad=0, device=cpu) = aten::select(%54, %55, %56), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %58 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %59 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %60 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %61 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %62 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor, %58, %59, %60, %61), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %63 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %64 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %65 : Float(2, strides=[4], requires_grad=0, device=cpu) = aten::select(%62, %63, %64), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %66 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %67 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::sub(%57, %65, %66), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %68 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %69 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %70 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %71 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %72 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor, %68, %69, %70, %71), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %73 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %74 : int = prim::Constant[value=3](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %75 : Float(2, strides=[4], requires_grad=0, device=cpu) = aten::select(%72, %73, %74), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %76 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %77 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %78 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %79 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %80 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor, %76, %77, %78, %79), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %81 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %82 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %83 : Float(2, strides=[4], requires_grad=0, device=cpu) = aten::select(%80, %81, %82), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %84 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %85 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::sub(%75, %83, %84), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %86 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::mul(%67, %85), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
                    %box_sizes : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::sqrt(%86), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:51:0
                    %88 : Long(requires_grad=0, device=cpu) = prim::Constant[value={224}](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %89 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::div(%box_sizes, %88), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %90 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1e-08}](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %91 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %92 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::add(%89, %90, %91), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %93 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::log2(%92), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %94 : Long(requires_grad=0, device=cpu) = prim::Constant[value={4}](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %95 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %96 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::add(%93, %94, %95), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %level_assignments.7 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::floor(%96), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
                    %98 : int = prim::Constant[value=2](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:58:0
                    %99 : int = prim::Constant[value=5](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:58:0
                    %level_assignments.9 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%level_assignments.7, %98, %99), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:58:0
                    %101 : int = prim::Constant[value=4](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %102 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %103 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %104 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %105 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::to(%level_assignments.9, %101, %102, %103, %104), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %106 : Long(requires_grad=0, device=cpu) = prim::Constant[value={2}](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %107 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %level_assignments : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::sub(%105, %106, %107), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
                    %121 : int = prim::Constant[value=256](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
                    %122 : int = prim::Constant[value=14](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
                    %123 : int = prim::Constant[value=14](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
                    %124 : Function = prim::Constant[name="_create_zeros"](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %output.9 : Tensor = prim::CallFunction(%124, %pooler_fmt_boxes, %121, %122, %123, %1), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %126 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %x.131 : Bool(2, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments, %126), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %128 : Tensor[] = aten::nonzero_numpy(%x.131), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
                    %inds.17 : Long(2, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%128), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %130 : int = prim::Constant[value=4](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %131 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %132 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %133 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %134 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %135 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %136 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %inds.19 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.17, %130, %131, %132, %133, %134, %135, %136), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %138 : Tensor?[] = prim::ListConstruct(%inds.19), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %rois.9 : Float(2, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes, %138), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %198 : Tensor = prim::CallMethod[name="forward"](%13, %rois.9, %1)
                    %141 : Tensor?[] = prim::ListConstruct(%inds.19), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %142 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %output.11 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.9, %141, %198, %142), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %144 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %x.133 : Bool(2, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments, %144), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %146 : Tensor[] = aten::nonzero_numpy(%x.133), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
                    %inds.21 : Long(0, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%146), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %148 : int = prim::Constant[value=4](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %149 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %150 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %151 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %152 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %153 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %154 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %inds.23 : Long(0, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.21, %148, %149, %150, %151, %152, %153, %154), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %156 : Tensor?[] = prim::ListConstruct(%inds.23), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %rois.11 : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes, %156), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %199 : Tensor = prim::CallMethod[name="forward"](%11, %rois.11, %3)
                    %159 : Tensor?[] = prim::ListConstruct(%inds.23), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %160 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %output.13 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.11, %159, %199, %160), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %162 : int = prim::Constant[value=2](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %x.135 : Bool(2, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments, %162), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %164 : Tensor[] = aten::nonzero_numpy(%x.135), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
                    %inds.25 : Long(0, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%164), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %166 : int = prim::Constant[value=4](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %167 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %168 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %169 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %170 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %171 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %172 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %inds.27 : Long(0, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.25, %166, %167, %168, %169, %170, %171, %172), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %174 : Tensor?[] = prim::ListConstruct(%inds.27), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %rois.13 : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes, %174), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %200 : Tensor = prim::CallMethod[name="forward"](%9, %rois.13, %4)
                    %177 : Tensor?[] = prim::ListConstruct(%inds.27), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %178 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %output : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.13, %177, %200, %178), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %180 : int = prim::Constant[value=3](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %x.137 : Bool(2, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments, %180), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
                    %182 : Tensor[] = aten::nonzero_numpy(%x.137), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
                    %inds.29 : Long(0, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%182), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %184 : int = prim::Constant[value=4](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %185 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %186 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %187 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %188 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %189 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %190 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %inds : Long(0, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.29, %184, %185, %186, %187, %188, %189, %190), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %192 : Tensor?[] = prim::ListConstruct(%inds), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %rois : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes, %192), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
                    %201 : Tensor = prim::CallMethod[name="forward"](%7, %rois, %5)
                    %195 : Tensor?[] = prim::ListConstruct(%inds), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
                    %196 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    %x.139 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::index_put_(%output, %195, %201, %196), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
                    return (%x.139)
              
                }
              }
              submodules {
                module __torch__.torch.nn.modules.container.___torch_mangle_144.ModuleList {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                    0 = <__torch__.detectron2.layers.roi_align.___torch_mangle_140.ROIAlign object at 0x5595a5227d90>
                    1 = <__torch__.detectron2.layers.roi_align.___torch_mangle_141.ROIAlign object at 0x5595a523d300>
                    2 = <__torch__.detectron2.layers.roi_align.___torch_mangle_142.ROIAlign object at 0x5595a523cb20>
                    3 = <__torch__.detectron2.layers.roi_align.___torch_mangle_143.ROIAlign object at 0x5595a523cca0>
                  }
                  methods {
                  }
                  submodules {
                    module __torch__.detectron2.layers.roi_align.___torch_mangle_140.ROIAlign {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.357 : __torch__.detectron2.layers.roi_align.___torch_mangle_140.ROIAlign,
                                %rois.9 : Float(2, 5, strides=[5, 1], requires_grad=0, device=cpu),
                                %2 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)):
                            %8 : int = prim::Constant[value=6](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %9 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %10 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %11 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0
                            %boxes.39 : Float(2, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.9, %8, %9, %10, %11), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %18 : float = prim::Constant[value=0.25](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %19 : int = prim::Constant[value=14](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %20 : int = prim::Constant[value=14](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %21 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %23 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%2, %boxes.39, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            return (%23)
                      
                        }
                      }
                      submodules {
                      }
                    }
                    module __torch__.detectron2.layers.roi_align.___torch_mangle_141.ROIAlign {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.359 : __torch__.detectron2.layers.roi_align.___torch_mangle_141.ROIAlign,
                                %rois.11 : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu),
                                %2 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu)):
                            %8 : int = prim::Constant[value=6](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %9 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %10 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %11 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1
                            %boxes.41 : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.11, %8, %9, %10, %11), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %18 : float = prim::Constant[value=0.125](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %19 : int = prim::Constant[value=14](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %20 : int = prim::Constant[value=14](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %21 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %23 : Float(0, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%2, %boxes.41, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            return (%23)
                      
                        }
                      }
                      submodules {
                      }
                    }
                    module __torch__.detectron2.layers.roi_align.___torch_mangle_142.ROIAlign {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.361 : __torch__.detectron2.layers.roi_align.___torch_mangle_142.ROIAlign,
                                %rois.13 : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu),
                                %2 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu)):
                            %8 : int = prim::Constant[value=6](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %9 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %10 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %11 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2
                            %boxes.43 : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.13, %8, %9, %10, %11), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %18 : float = prim::Constant[value=0.0625](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %19 : int = prim::Constant[value=14](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %20 : int = prim::Constant[value=14](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %21 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %23 : Float(0, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%2, %boxes.43, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            return (%23)
                      
                        }
                      }
                      submodules {
                      }
                    }
                    module __torch__.detectron2.layers.roi_align.___torch_mangle_143.ROIAlign {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.363 : __torch__.detectron2.layers.roi_align.___torch_mangle_143.ROIAlign,
                                %rois : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu),
                                %2 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)):
                            %8 : int = prim::Constant[value=6](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %9 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %10 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %11 : NoneType = prim::Constant(), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3
                            %boxes : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois, %8, %9, %10, %11), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
                            %18 : float = prim::Constant[value=0.03125](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %19 : int = prim::Constant[value=14](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %20 : int = prim::Constant[value=14](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %21 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            %23 : Float(0, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%2, %boxes, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
                            return (%23)
                      
                        }
                      }
                      submodules {
                      }
                    }
                  }
                }
              }
            }
            module __torch__.detectron2.modeling.roi_heads.mask_head.MaskRCNNConvUpsampleHead {
              parameters {
              }
              attributes {
                training = False
                _is_full_backward_hook = None
                mask_fcn1 = <__torch__.detectron2.layers.wrappers.___torch_mangle_147.Conv2d object at 0x5595a5245ec0>
                mask_fcn2 = <__torch__.detectron2.layers.wrappers.___torch_mangle_149.Conv2d object at 0x5595a52491d0>
                mask_fcn3 = <__torch__.detectron2.layers.wrappers.___torch_mangle_151.Conv2d object at 0x5595a524c450>
                mask_fcn4 = <__torch__.detectron2.layers.wrappers.___torch_mangle_153.Conv2d object at 0x5595a524f6d0>
                deconv = <__torch__.torch.nn.modules.conv.ConvTranspose2d object at 0x5595a5252030>
                deconv_relu = <__torch__.torch.nn.modules.activation.___torch_mangle_154.ReLU object at 0x5595a5253570>
                predictor = <__torch__.detectron2.layers.wrappers.___torch_mangle_155.Conv2d object at 0x5595a5254290>
              }
              methods {
                method forward {
                  graph(%self.365 : __torch__.detectron2.modeling.roi_heads.mask_head.MaskRCNNConvUpsampleHead,
                        %1 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu),
                        %tensor : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu)):
                    %3 : __torch__.detectron2.layers.wrappers.___torch_mangle_155.Conv2d = prim::GetAttr[name="predictor"](%self.365)
                    %4 : __torch__.torch.nn.modules.activation.___torch_mangle_154.ReLU = prim::GetAttr[name="deconv_relu"](%self.365)
                    %5 : __torch__.torch.nn.modules.conv.ConvTranspose2d = prim::GetAttr[name="deconv"](%self.365)
                    %6 : __torch__.detectron2.layers.wrappers.___torch_mangle_153.Conv2d = prim::GetAttr[name="mask_fcn4"](%self.365)
                    %7 : __torch__.detectron2.layers.wrappers.___torch_mangle_151.Conv2d = prim::GetAttr[name="mask_fcn3"](%self.365)
                    %8 : __torch__.detectron2.layers.wrappers.___torch_mangle_149.Conv2d = prim::GetAttr[name="mask_fcn2"](%self.365)
                    %9 : __torch__.detectron2.layers.wrappers.___torch_mangle_147.Conv2d = prim::GetAttr[name="mask_fcn1"](%self.365)
                    %52 : Tensor = prim::CallMethod[name="forward"](%9, %1)
                    %53 : Tensor = prim::CallMethod[name="forward"](%8, %52)
                    %54 : Tensor = prim::CallMethod[name="forward"](%7, %53)
                    %55 : Tensor = prim::CallMethod[name="forward"](%6, %54)
                    %56 : Tensor = prim::CallMethod[name="forward"](%5, %55)
                    %57 : Tensor = prim::CallMethod[name="forward"](%4, %56)
                    %58 : Tensor = prim::CallMethod[name="forward"](%3, %57)
                    %22 : Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu) = aten::sigmoid(%58), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/mask_head.py:144:0
                    %23 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
                    %24 : int = aten::size(%tensor, %23), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
                    %25 : Long(device=cpu) = prim::NumToTensor(%24), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head
                    %26 : int = aten::Int(%25), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head
                    %30 : int[] = prim::ListConstruct(%26), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head
                    %31 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:515:0
                    %32 : Tensor[] = aten::split_with_sizes(%22, %30, %31), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:515:0
                    %33 : Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%32), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head
                    return (%33)
              
                }
              }
              submodules {
                module __torch__.detectron2.layers.wrappers.___torch_mangle_147.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    activation = <__torch__.torch.nn.modules.activation.___torch_mangle_146.ReLU object at 0x5595a52459f0>
                  }
                  methods {
                    method forward {
                      graph(%self.367 : __torch__.detectron2.layers.wrappers.___torch_mangle_147.Conv2d,
                            %1 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.torch.nn.modules.activation.___torch_mangle_146.ReLU = prim::GetAttr[name="activation"](%self.367)
                        %3 : Tensor = prim::GetAttr[name="bias"](%self.367)
                        %4 : Tensor = prim::GetAttr[name="weight"](%self.367)
                        %5 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %6 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1
                        %8 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %9 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1
                        %11 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %12 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1
                        %14 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %16 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1
                        %18 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %20 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %input.145 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %4, %3, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.145)
                        return (%25)
                  
                    }
                  }
                  submodules {
                    module __torch__.torch.nn.modules.activation.___torch_mangle_146.ReLU {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.369 : __torch__.torch.nn.modules.activation.___torch_mangle_146.ReLU,
                                %input.145 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu)):
                            %x.141 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::relu(%input.145), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1/__module.model.roi_heads.mask_head.mask_fcn1.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                            return (%x.141)
                      
                        }
                      }
                      submodules {
                      }
                    }
                  }
                }
                module __torch__.detectron2.layers.wrappers.___torch_mangle_149.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    activation = <__torch__.torch.nn.modules.activation.___torch_mangle_148.ReLU object at 0x5595a5248d00>
                  }
                  methods {
                    method forward {
                      graph(%self.371 : __torch__.detectron2.layers.wrappers.___torch_mangle_149.Conv2d,
                            %1 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.torch.nn.modules.activation.___torch_mangle_148.ReLU = prim::GetAttr[name="activation"](%self.371)
                        %3 : Tensor = prim::GetAttr[name="bias"](%self.371)
                        %4 : Tensor = prim::GetAttr[name="weight"](%self.371)
                        %5 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %6 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2
                        %8 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %9 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2
                        %11 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %12 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2
                        %14 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %16 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2
                        %18 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %20 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %input.147 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %4, %3, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.147)
                        return (%25)
                  
                    }
                  }
                  submodules {
                    module __torch__.torch.nn.modules.activation.___torch_mangle_148.ReLU {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.373 : __torch__.torch.nn.modules.activation.___torch_mangle_148.ReLU,
                                %input.147 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu)):
                            %x.143 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::relu(%input.147), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2/__module.model.roi_heads.mask_head.mask_fcn2.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                            return (%x.143)
                      
                        }
                      }
                      submodules {
                      }
                    }
                  }
                }
                module __torch__.detectron2.layers.wrappers.___torch_mangle_151.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    activation = <__torch__.torch.nn.modules.activation.___torch_mangle_150.ReLU object at 0x5595a524bf80>
                  }
                  methods {
                    method forward {
                      graph(%self.375 : __torch__.detectron2.layers.wrappers.___torch_mangle_151.Conv2d,
                            %1 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.torch.nn.modules.activation.___torch_mangle_150.ReLU = prim::GetAttr[name="activation"](%self.375)
                        %3 : Tensor = prim::GetAttr[name="bias"](%self.375)
                        %4 : Tensor = prim::GetAttr[name="weight"](%self.375)
                        %5 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %6 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3
                        %8 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %9 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3
                        %11 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %12 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3
                        %14 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %16 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3
                        %18 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %20 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %input.149 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %4, %3, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.149)
                        return (%25)
                  
                    }
                  }
                  submodules {
                    module __torch__.torch.nn.modules.activation.___torch_mangle_150.ReLU {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.377 : __torch__.torch.nn.modules.activation.___torch_mangle_150.ReLU,
                                %input.149 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu)):
                            %x.145 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::relu(%input.149), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3/__module.model.roi_heads.mask_head.mask_fcn3.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                            return (%x.145)
                      
                        }
                      }
                      submodules {
                      }
                    }
                  }
                }
                module __torch__.detectron2.layers.wrappers.___torch_mangle_153.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                    activation = <__torch__.torch.nn.modules.activation.___torch_mangle_152.ReLU object at 0x5595a524f200>
                  }
                  methods {
                    method forward {
                      graph(%self.379 : __torch__.detectron2.layers.wrappers.___torch_mangle_153.Conv2d,
                            %1 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu)):
                        %2 : __torch__.torch.nn.modules.activation.___torch_mangle_152.ReLU = prim::GetAttr[name="activation"](%self.379)
                        %3 : Tensor = prim::GetAttr[name="bias"](%self.379)
                        %4 : Tensor = prim::GetAttr[name="weight"](%self.379)
                        %5 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %6 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %7 : int[] = prim::ListConstruct(%5, %6), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4
                        %8 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %9 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %10 : int[] = prim::ListConstruct(%8, %9), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4
                        %11 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %12 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %13 : int[] = prim::ListConstruct(%11, %12), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4
                        %14 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %16 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %17 : int[] = prim::ListConstruct(%15, %16), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4
                        %18 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %20 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %22 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %input.151 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %4, %3, %7, %10, %13, %14, %17, %18, %19, %20, %21, %22), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %25 : Tensor = prim::CallMethod[name="forward"](%2, %input.151)
                        return (%25)
                  
                    }
                  }
                  submodules {
                    module __torch__.torch.nn.modules.activation.___torch_mangle_152.ReLU {
                      parameters {
                      }
                      attributes {
                        training = False
                        _is_full_backward_hook = None
                      }
                      methods {
                        method forward {
                          graph(%self.381 : __torch__.torch.nn.modules.activation.___torch_mangle_152.ReLU,
                                %input.151 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu)):
                            %input.153 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::relu(%input.151), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4/__module.model.roi_heads.mask_head.mask_fcn4.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                            return (%input.153)
                      
                        }
                      }
                      submodules {
                      }
                    }
                  }
                }
                module __torch__.torch.nn.modules.conv.ConvTranspose2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self.383 : __torch__.torch.nn.modules.conv.ConvTranspose2d,
                            %1 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self.383)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self.383)
                        %4 : int = prim::Constant[value=2](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %5 : int = prim::Constant[value=2](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv
                        %7 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv
                        %10 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv
                        %13 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv
                        %17 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        %input : Float(2, 256, 28, 28, strides=[200704, 784, 28, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
                        return (%input)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.torch.nn.modules.activation.___torch_mangle_154.ReLU {
                  parameters {
                  }
                  attributes {
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self.385 : __torch__.torch.nn.modules.activation.___torch_mangle_154.ReLU,
                            %1 : Float(2, 256, 28, 28, strides=[200704, 784, 28, 1], requires_grad=0, device=cpu)):
                        %x : Float(2, 256, 28, 28, strides=[200704, 784, 28, 1], requires_grad=0, device=cpu) = aten::relu(%1), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv_relu # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
                        return (%x)
                  
                    }
                  }
                  submodules {
                  }
                }
                module __torch__.detectron2.layers.wrappers.___torch_mangle_155.Conv2d {
                  parameters {
                    weight = ...
                    bias = ...
                  }
                  attributes {
                    weight = ...
                    bias = ...
                    training = False
                    _is_full_backward_hook = None
                  }
                  methods {
                    method forward {
                      graph(%self : __torch__.detectron2.layers.wrappers.___torch_mangle_155.Conv2d,
                            %1 : Float(2, 256, 28, 28, strides=[200704, 784, 28, 1], requires_grad=0, device=cpu)):
                        %2 : Tensor = prim::GetAttr[name="bias"](%self)
                        %3 : Tensor = prim::GetAttr[name="weight"](%self)
                        %4 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %5 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %6 : int[] = prim::ListConstruct(%4, %5), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor
                        %7 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %8 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %9 : int[] = prim::ListConstruct(%7, %8), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor
                        %10 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %11 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %12 : int[] = prim::ListConstruct(%10, %11), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor
                        %13 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %14 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %15 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %16 : int[] = prim::ListConstruct(%14, %15), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor
                        %17 : int = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %18 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %19 : bool = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %20 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %21 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        %pred_mask_logits : Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu) = aten::_convolution(%1, %3, %2, %6, %9, %12, %13, %16, %17, %18, %19, %20, %21), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
                        return (%pred_mask_logits)
                  
                    }
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
