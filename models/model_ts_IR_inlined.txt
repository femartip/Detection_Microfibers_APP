graph(%self.1 : __torch__.detectron2.export.flatten.TracingAdapter,
      %1 : Float(3, 800, 1067, strides=[1, 3201, 3], requires_grad=0, device=cpu)):
  %2 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self.1)
  %3 : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads = prim::GetAttr[name="roi_heads"](%2)
  %4 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self.1)
  %5 : __torch__.detectron2.modeling.proposal_generator.rpn.RPN = prim::GetAttr[name="proposal_generator"](%4)
  %6 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self.1)
  %7 : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%6)
  %8 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self.1)
  %9 : Tensor = prim::GetAttr[name="pixel_std"](%8)
  %10 : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self.1)
  %11 : Tensor = prim::GetAttr[name="pixel_mean"](%10)
  %12 : Function = prim::Constant[name="move_device_like"]()
  %87 : NoneType = prim::Constant()
  %88 : bool = prim::Constant[value=0]()
  %89 : Device = prim::device(%11)
  %x.1 : Tensor = aten::to(%1, %89, %87, %88, %88) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %14 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/meta_arch/rcnn.py:242:0
  %15 : Float(3, 800, 1067, strides=[1, 3201, 3], requires_grad=0, device=cpu) = aten::sub(%x.1, %11, %14) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/meta_arch/rcnn.py:242:0
  %t : Float(3, 800, 1067, strides=[1, 3201, 3], requires_grad=0, device=cpu) = aten::div(%15, %9) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/meta_arch/rcnn.py:242:0
  %17 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:87:0
  %18 : int = aten::size(%t, %17) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:87:0
  %19 : Long(device=cpu) = prim::NumToTensor(%18)
  %20 : int = prim::Constant[value=2]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:87:0
  %21 : int = aten::size(%t, %20) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:87:0
  %22 : Long(device=cpu) = prim::NumToTensor(%21)
  %23 : Tensor[] = prim::ListConstruct(%19, %22)
  %24 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:34:0
  %image_size : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::stack(%23, %24) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:34:0
  %26 : Tensor[] = prim::ListConstruct(%image_size)
  %27 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:89:0
  %28 : Long(1, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::stack(%26, %27) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:89:0
  %29 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:89:0
  %30 : bool = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:89:0
  %max_size.1 : Long(2, strides=[1], requires_grad=0, device=cpu), %32 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::max(%28, %29, %30) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:89:0
  %33 : Long(requires_grad=0, device=cpu) = prim::Constant[value={31}]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
  %34 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
  %35 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::add(%max_size.1, %33, %34) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
  %36 : Long(requires_grad=0, device=cpu) = prim::Constant[value={32}]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
  %37 : str = prim::Constant[value="floor"]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
  %38 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::div(%35, %36, %37) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
  %39 : Long(requires_grad=0, device=cpu) = prim::Constant[value={32}]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
  %max_size : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::mul(%38, %39) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:101:0
  %41 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %42 : int = prim::Constant[value=-1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %43 : Long(requires_grad=0, device=cpu) = aten::select(%max_size, %41, %42) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %44 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %45 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %46 : Long(requires_grad=0, device=cpu) = aten::select(%image_size, %44, %45) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %47 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %48 : Long(requires_grad=0, device=cpu) = aten::sub(%43, %46, %47) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %49 : int = aten::Int(%48)
  %50 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %51 : int = prim::Constant[value=-2]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %52 : Long(requires_grad=0, device=cpu) = aten::select(%max_size, %50, %51) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %53 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %54 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %55 : Long(requires_grad=0, device=cpu) = aten::select(%image_size, %53, %54) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %56 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %57 : Long(requires_grad=0, device=cpu) = aten::sub(%52, %55, %56) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:114:0
  %58 : int = aten::Int(%57)
  %59 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:4153:0
  %60 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:4153:0
  %61 : int[] = prim::ListConstruct(%59, %49, %60, %58)
  %62 : float = prim::Constant[value=0.]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:4153:0
  %63 : Float(3, 800, 1088, strides=[870400, 1088, 1], requires_grad=0, device=cpu) = aten::constant_pad_nd(%t, %61, %62) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:4153:0
  %64 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:115:0
  %batched_imgs : Float(1, 3, 800, 1088, strides=[2611200, 870400, 1088, 1], requires_grad=0, device=cpu) = aten::unsqueeze_(%63, %64) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:115:0
  %66 : int = prim::Constant[value=0]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:129:0
  %x.3 : Float(1, 3, 800, 1088, strides=[2611200, 870400, 1088, 1], requires_grad=0, device=cpu) = aten::contiguous(%batched_imgs, %66) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/image_list.py:129:0
  %91 : float = prim::Constant[value=2.](), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
  %92 : NoneType = prim::Constant(), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1
  %93 : int = prim::Constant[value=2](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %94 : int = prim::Constant[value=3](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %95 : int = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %96 : bool = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %97 : int = prim::Constant[value=0](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %98 : bool = prim::Constant[value=1](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %99 : float = prim::Constant[value=1.0000000000000001e-05](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1/__module.model.backbone.bottom_up.stem.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %100 : float = prim::Constant[value=0.10000000000000001](), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1/__module.model.backbone.bottom_up.stem.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %101 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%7)
  %102 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="fpn_output2"](%7)
  %103 : __torch__.detectron2.layers.wrappers.Conv2d = prim::GetAttr[name="fpn_lateral2"](%7)
  %104 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="fpn_output3"](%7)
  %105 : __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d = prim::GetAttr[name="fpn_lateral3"](%7)
  %106 : __torch__.detectron2.layers.wrappers.___torch_mangle_4.Conv2d = prim::GetAttr[name="fpn_output4"](%7)
  %107 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d = prim::GetAttr[name="fpn_lateral4"](%7)
  %108 : __torch__.detectron2.layers.wrappers.___torch_mangle_6.Conv2d = prim::GetAttr[name="fpn_output5"](%7)
  %109 : __torch__.detectron2.layers.wrappers.___torch_mangle_5.Conv2d = prim::GetAttr[name="fpn_lateral5"](%7)
  %110 : __torch__.detectron2.modeling.backbone.resnet.ResNet = prim::GetAttr[name="bottom_up"](%7)
  %111 : __torch__.torch.nn.modules.container.___torch_mangle_129.Sequential = prim::GetAttr[name="res5"](%110)
  %112 : __torch__.torch.nn.modules.container.___torch_mangle_105.Sequential = prim::GetAttr[name="res4"](%110)
  %113 : __torch__.torch.nn.modules.container.___torch_mangle_60.Sequential = prim::GetAttr[name="res3"](%110)
  %114 : __torch__.torch.nn.modules.container.Sequential = prim::GetAttr[name="res2"](%110)
  %115 : __torch__.detectron2.modeling.backbone.resnet.BasicStem = prim::GetAttr[name="stem"](%110)
  %116 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv1"](%115)
  %117 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%116)
  %118 : Tensor = prim::GetAttr[name="weight"](%116)
  %119 : int[] = prim::ListConstruct(%93, %93), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1
  %120 : int[] = prim::ListConstruct(%94, %94), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1
  %121 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1
  %122 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1
  %input.1 : Float(1, 64, 400, 544, strides=[13926400, 217600, 544, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.3, %118, %92, %119, %120, %121, %96, %122, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %124 : Tensor = prim::GetAttr[name="running_var"](%117)
  %125 : Tensor = prim::GetAttr[name="running_mean"](%117)
  %126 : Tensor = prim::GetAttr[name="bias"](%117)
  %127 : Tensor = prim::GetAttr[name="weight"](%117)
  %x.5 : Float(1, 64, 400, 544, strides=[13926400, 217600, 544, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.1, %127, %126, %125, %124, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem/__module.model.backbone.bottom_up.stem.conv1/__module.model.backbone.bottom_up.stem.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %input.3 : Float(1, 64, 400, 544, strides=[13926400, 217600, 544, 1], requires_grad=0, device=cpu) = aten::relu_(%x.5), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:357:0
  %130 : int[] = prim::ListConstruct(%94, %94), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem
  %131 : int[] = prim::ListConstruct(%93, %93), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem
  %132 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem
  %133 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem
  %x.7 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::max_pool2d(%input.3, %130, %131, %132, %133, %96), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.stem # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
  %135 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_29.BottleneckBlock = prim::GetAttr[name="2"](%114)
  %136 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_22.BottleneckBlock = prim::GetAttr[name="1"](%114)
  %137 : __torch__.detectron2.modeling.backbone.resnet.BottleneckBlock = prim::GetAttr[name="0"](%114)
  %138 : __torch__.detectron2.layers.wrappers.___torch_mangle_9.Conv2d = prim::GetAttr[name="shortcut"](%137)
  %139 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv3"](%137)
  %140 : __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d = prim::GetAttr[name="conv2"](%137)
  %141 : __torch__.detectron2.layers.wrappers.___torch_mangle_11.Conv2d = prim::GetAttr[name="conv1"](%137)
  %142 : __torch__.detectron2.layers.batch_norm.___torch_mangle_10.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%141)
  %143 : Tensor = prim::GetAttr[name="weight"](%141)
  %144 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1
  %145 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1
  %146 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1
  %147 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1
  %input.5 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.7, %143, %92, %144, %145, %146, %96, %147, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %149 : Tensor = prim::GetAttr[name="running_var"](%142)
  %150 : Tensor = prim::GetAttr[name="running_mean"](%142)
  %151 : Tensor = prim::GetAttr[name="bias"](%142)
  %152 : Tensor = prim::GetAttr[name="weight"](%142)
  %out.1 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.5, %152, %151, %150, %149, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv1/__module.model.backbone.bottom_up.res2.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.9 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.1), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %155 : __torch__.detectron2.layers.batch_norm.___torch_mangle_12.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%140)
  %156 : Tensor = prim::GetAttr[name="weight"](%140)
  %157 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2
  %158 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2
  %159 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2
  %160 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2
  %input.7 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.9, %156, %92, %157, %158, %159, %96, %160, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %162 : Tensor = prim::GetAttr[name="running_var"](%155)
  %163 : Tensor = prim::GetAttr[name="running_mean"](%155)
  %164 : Tensor = prim::GetAttr[name="bias"](%155)
  %165 : Tensor = prim::GetAttr[name="weight"](%155)
  %out.3 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.7, %165, %164, %163, %162, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv2/__module.model.backbone.bottom_up.res2.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.11 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.3), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %168 : __torch__.detectron2.layers.batch_norm.___torch_mangle_14.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%139)
  %169 : Tensor = prim::GetAttr[name="weight"](%139)
  %170 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3
  %171 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3
  %172 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3
  %173 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3
  %input.9 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.11, %169, %92, %170, %171, %172, %96, %173, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %175 : Tensor = prim::GetAttr[name="running_var"](%168)
  %176 : Tensor = prim::GetAttr[name="running_mean"](%168)
  %177 : Tensor = prim::GetAttr[name="bias"](%168)
  %178 : Tensor = prim::GetAttr[name="weight"](%168)
  %out.5 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.9, %178, %177, %176, %175, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.conv3/__module.model.backbone.bottom_up.res2.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %180 : __torch__.detectron2.layers.batch_norm.___torch_mangle_8.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%138)
  %181 : Tensor = prim::GetAttr[name="weight"](%138)
  %182 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut
  %183 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut
  %184 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut
  %185 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut
  %input.11 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.7, %181, %92, %182, %183, %184, %96, %185, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %187 : Tensor = prim::GetAttr[name="running_var"](%180)
  %188 : Tensor = prim::GetAttr[name="running_mean"](%180)
  %189 : Tensor = prim::GetAttr[name="bias"](%180)
  %190 : Tensor = prim::GetAttr[name="weight"](%180)
  %shortcut.1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.11, %190, %189, %188, %187, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0/__module.model.backbone.bottom_up.res2.0.shortcut/__module.model.backbone.bottom_up.res2.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.7 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::add_(%out.5, %shortcut.1, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.13 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.7), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %194 : __torch__.detectron2.layers.wrappers.___torch_mangle_21.Conv2d = prim::GetAttr[name="conv3"](%136)
  %195 : __torch__.detectron2.layers.wrappers.___torch_mangle_19.Conv2d = prim::GetAttr[name="conv2"](%136)
  %196 : __torch__.detectron2.layers.wrappers.___torch_mangle_17.Conv2d = prim::GetAttr[name="conv1"](%136)
  %197 : __torch__.detectron2.layers.batch_norm.___torch_mangle_16.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%196)
  %198 : Tensor = prim::GetAttr[name="weight"](%196)
  %199 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1
  %200 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1
  %201 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1
  %202 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1
  %input.13 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.13, %198, %92, %199, %200, %201, %96, %202, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %204 : Tensor = prim::GetAttr[name="running_var"](%197)
  %205 : Tensor = prim::GetAttr[name="running_mean"](%197)
  %206 : Tensor = prim::GetAttr[name="bias"](%197)
  %207 : Tensor = prim::GetAttr[name="weight"](%197)
  %out.9 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.13, %207, %206, %205, %204, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv1/__module.model.backbone.bottom_up.res2.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.15 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.9), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %210 : __torch__.detectron2.layers.batch_norm.___torch_mangle_18.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%195)
  %211 : Tensor = prim::GetAttr[name="weight"](%195)
  %212 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2
  %213 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2
  %214 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2
  %215 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2
  %input.15 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.15, %211, %92, %212, %213, %214, %96, %215, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %217 : Tensor = prim::GetAttr[name="running_var"](%210)
  %218 : Tensor = prim::GetAttr[name="running_mean"](%210)
  %219 : Tensor = prim::GetAttr[name="bias"](%210)
  %220 : Tensor = prim::GetAttr[name="weight"](%210)
  %out.11 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.15, %220, %219, %218, %217, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv2/__module.model.backbone.bottom_up.res2.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.17 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.11), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %223 : __torch__.detectron2.layers.batch_norm.___torch_mangle_20.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%194)
  %224 : Tensor = prim::GetAttr[name="weight"](%194)
  %225 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3
  %226 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3
  %227 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3
  %228 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3
  %input.17 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.17, %224, %92, %225, %226, %227, %96, %228, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %230 : Tensor = prim::GetAttr[name="running_var"](%223)
  %231 : Tensor = prim::GetAttr[name="running_mean"](%223)
  %232 : Tensor = prim::GetAttr[name="bias"](%223)
  %233 : Tensor = prim::GetAttr[name="weight"](%223)
  %out.13 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.17, %233, %232, %231, %230, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1/__module.model.backbone.bottom_up.res2.1.conv3/__module.model.backbone.bottom_up.res2.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.15 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::add_(%out.13, %x.13, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.19 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.15), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %237 : __torch__.detectron2.layers.wrappers.___torch_mangle_28.Conv2d = prim::GetAttr[name="conv3"](%135)
  %238 : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d = prim::GetAttr[name="conv2"](%135)
  %239 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d = prim::GetAttr[name="conv1"](%135)
  %240 : __torch__.detectron2.layers.batch_norm.___torch_mangle_23.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%239)
  %241 : Tensor = prim::GetAttr[name="weight"](%239)
  %242 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1
  %243 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1
  %244 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1
  %245 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1
  %input.19 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.19, %241, %92, %242, %243, %244, %96, %245, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %247 : Tensor = prim::GetAttr[name="running_var"](%240)
  %248 : Tensor = prim::GetAttr[name="running_mean"](%240)
  %249 : Tensor = prim::GetAttr[name="bias"](%240)
  %250 : Tensor = prim::GetAttr[name="weight"](%240)
  %out.17 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.19, %250, %249, %248, %247, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv1/__module.model.backbone.bottom_up.res2.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.21 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.17), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %253 : __torch__.detectron2.layers.batch_norm.___torch_mangle_25.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%238)
  %254 : Tensor = prim::GetAttr[name="weight"](%238)
  %255 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2
  %256 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2
  %257 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2
  %258 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2
  %input.21 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.21, %254, %92, %255, %256, %257, %96, %258, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %260 : Tensor = prim::GetAttr[name="running_var"](%253)
  %261 : Tensor = prim::GetAttr[name="running_mean"](%253)
  %262 : Tensor = prim::GetAttr[name="bias"](%253)
  %263 : Tensor = prim::GetAttr[name="weight"](%253)
  %out.19 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.21, %263, %262, %261, %260, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv2/__module.model.backbone.bottom_up.res2.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.23 : Float(1, 64, 200, 272, strides=[3481600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.19), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %266 : __torch__.detectron2.layers.batch_norm.___torch_mangle_27.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%237)
  %267 : Tensor = prim::GetAttr[name="weight"](%237)
  %268 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3
  %269 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3
  %270 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3
  %271 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3
  %input.23 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.23, %267, %92, %268, %269, %270, %96, %271, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %273 : Tensor = prim::GetAttr[name="running_var"](%266)
  %274 : Tensor = prim::GetAttr[name="running_mean"](%266)
  %275 : Tensor = prim::GetAttr[name="bias"](%266)
  %276 : Tensor = prim::GetAttr[name="weight"](%266)
  %out.21 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.23, %276, %275, %274, %273, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2/__module.model.backbone.bottom_up.res2.2.conv3/__module.model.backbone.bottom_up.res2.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.23 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::add_(%out.21, %x.19, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.25 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu_(%out.23), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res2/__module.model.backbone.bottom_up.res2.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %280 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_59.BottleneckBlock = prim::GetAttr[name="3"](%113)
  %281 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_52.BottleneckBlock = prim::GetAttr[name="2"](%113)
  %282 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_45.BottleneckBlock = prim::GetAttr[name="1"](%113)
  %283 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_38.BottleneckBlock = prim::GetAttr[name="0"](%113)
  %284 : __torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d = prim::GetAttr[name="shortcut"](%283)
  %285 : __torch__.detectron2.layers.wrappers.___torch_mangle_37.Conv2d = prim::GetAttr[name="conv3"](%283)
  %286 : __torch__.detectron2.layers.wrappers.___torch_mangle_35.Conv2d = prim::GetAttr[name="conv2"](%283)
  %287 : __torch__.detectron2.layers.wrappers.___torch_mangle_33.Conv2d = prim::GetAttr[name="conv1"](%283)
  %288 : __torch__.detectron2.layers.batch_norm.___torch_mangle_32.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%287)
  %289 : Tensor = prim::GetAttr[name="weight"](%287)
  %290 : int[] = prim::ListConstruct(%93, %93), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1
  %291 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1
  %292 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1
  %293 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1
  %input.25 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.25, %289, %92, %290, %291, %292, %96, %293, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %295 : Tensor = prim::GetAttr[name="running_var"](%288)
  %296 : Tensor = prim::GetAttr[name="running_mean"](%288)
  %297 : Tensor = prim::GetAttr[name="bias"](%288)
  %298 : Tensor = prim::GetAttr[name="weight"](%288)
  %out.25 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.25, %298, %297, %296, %295, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv1/__module.model.backbone.bottom_up.res3.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.27 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.25), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %301 : __torch__.detectron2.layers.batch_norm.___torch_mangle_34.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%286)
  %302 : Tensor = prim::GetAttr[name="weight"](%286)
  %303 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2
  %304 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2
  %305 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2
  %306 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2
  %input.27 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.27, %302, %92, %303, %304, %305, %96, %306, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %308 : Tensor = prim::GetAttr[name="running_var"](%301)
  %309 : Tensor = prim::GetAttr[name="running_mean"](%301)
  %310 : Tensor = prim::GetAttr[name="bias"](%301)
  %311 : Tensor = prim::GetAttr[name="weight"](%301)
  %out.27 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.27, %311, %310, %309, %308, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv2/__module.model.backbone.bottom_up.res3.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.29 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.27), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %314 : __torch__.detectron2.layers.batch_norm.___torch_mangle_36.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%285)
  %315 : Tensor = prim::GetAttr[name="weight"](%285)
  %316 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3
  %317 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3
  %318 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3
  %319 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3
  %input.29 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.29, %315, %92, %316, %317, %318, %96, %319, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %321 : Tensor = prim::GetAttr[name="running_var"](%314)
  %322 : Tensor = prim::GetAttr[name="running_mean"](%314)
  %323 : Tensor = prim::GetAttr[name="bias"](%314)
  %324 : Tensor = prim::GetAttr[name="weight"](%314)
  %out.29 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.29, %324, %323, %322, %321, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.conv3/__module.model.backbone.bottom_up.res3.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %326 : __torch__.detectron2.layers.batch_norm.___torch_mangle_30.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%284)
  %327 : Tensor = prim::GetAttr[name="weight"](%284)
  %328 : int[] = prim::ListConstruct(%93, %93), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut
  %329 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut
  %330 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut
  %331 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut
  %input.31 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.25, %327, %92, %328, %329, %330, %96, %331, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %333 : Tensor = prim::GetAttr[name="running_var"](%326)
  %334 : Tensor = prim::GetAttr[name="running_mean"](%326)
  %335 : Tensor = prim::GetAttr[name="bias"](%326)
  %336 : Tensor = prim::GetAttr[name="weight"](%326)
  %shortcut.3 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.31, %336, %335, %334, %333, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0/__module.model.backbone.bottom_up.res3.0.shortcut/__module.model.backbone.bottom_up.res3.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.31 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::add_(%out.29, %shortcut.3, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.31 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.31), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %340 : __torch__.detectron2.layers.wrappers.___torch_mangle_44.Conv2d = prim::GetAttr[name="conv3"](%282)
  %341 : __torch__.detectron2.layers.wrappers.___torch_mangle_42.Conv2d = prim::GetAttr[name="conv2"](%282)
  %342 : __torch__.detectron2.layers.wrappers.___torch_mangle_40.Conv2d = prim::GetAttr[name="conv1"](%282)
  %343 : __torch__.detectron2.layers.batch_norm.___torch_mangle_39.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%342)
  %344 : Tensor = prim::GetAttr[name="weight"](%342)
  %345 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1
  %346 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1
  %347 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1
  %348 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1
  %input.33 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.31, %344, %92, %345, %346, %347, %96, %348, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %350 : Tensor = prim::GetAttr[name="running_var"](%343)
  %351 : Tensor = prim::GetAttr[name="running_mean"](%343)
  %352 : Tensor = prim::GetAttr[name="bias"](%343)
  %353 : Tensor = prim::GetAttr[name="weight"](%343)
  %out.33 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.33, %353, %352, %351, %350, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv1/__module.model.backbone.bottom_up.res3.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.33 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.33), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %356 : __torch__.detectron2.layers.batch_norm.___torch_mangle_41.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%341)
  %357 : Tensor = prim::GetAttr[name="weight"](%341)
  %358 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2
  %359 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2
  %360 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2
  %361 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2
  %input.35 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.33, %357, %92, %358, %359, %360, %96, %361, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %363 : Tensor = prim::GetAttr[name="running_var"](%356)
  %364 : Tensor = prim::GetAttr[name="running_mean"](%356)
  %365 : Tensor = prim::GetAttr[name="bias"](%356)
  %366 : Tensor = prim::GetAttr[name="weight"](%356)
  %out.35 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.35, %366, %365, %364, %363, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv2/__module.model.backbone.bottom_up.res3.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.35 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.35), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %369 : __torch__.detectron2.layers.batch_norm.___torch_mangle_43.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%340)
  %370 : Tensor = prim::GetAttr[name="weight"](%340)
  %371 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3
  %372 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3
  %373 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3
  %374 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3
  %input.37 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.35, %370, %92, %371, %372, %373, %96, %374, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %376 : Tensor = prim::GetAttr[name="running_var"](%369)
  %377 : Tensor = prim::GetAttr[name="running_mean"](%369)
  %378 : Tensor = prim::GetAttr[name="bias"](%369)
  %379 : Tensor = prim::GetAttr[name="weight"](%369)
  %out.37 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.37, %379, %378, %377, %376, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1/__module.model.backbone.bottom_up.res3.1.conv3/__module.model.backbone.bottom_up.res3.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.39 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::add_(%out.37, %x.31, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.37 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.39), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %383 : __torch__.detectron2.layers.wrappers.___torch_mangle_51.Conv2d = prim::GetAttr[name="conv3"](%281)
  %384 : __torch__.detectron2.layers.wrappers.___torch_mangle_49.Conv2d = prim::GetAttr[name="conv2"](%281)
  %385 : __torch__.detectron2.layers.wrappers.___torch_mangle_47.Conv2d = prim::GetAttr[name="conv1"](%281)
  %386 : __torch__.detectron2.layers.batch_norm.___torch_mangle_46.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%385)
  %387 : Tensor = prim::GetAttr[name="weight"](%385)
  %388 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1
  %389 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1
  %390 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1
  %391 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1
  %input.39 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.37, %387, %92, %388, %389, %390, %96, %391, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %393 : Tensor = prim::GetAttr[name="running_var"](%386)
  %394 : Tensor = prim::GetAttr[name="running_mean"](%386)
  %395 : Tensor = prim::GetAttr[name="bias"](%386)
  %396 : Tensor = prim::GetAttr[name="weight"](%386)
  %out.41 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.39, %396, %395, %394, %393, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv1/__module.model.backbone.bottom_up.res3.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.39 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.41), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %399 : __torch__.detectron2.layers.batch_norm.___torch_mangle_48.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%384)
  %400 : Tensor = prim::GetAttr[name="weight"](%384)
  %401 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2
  %402 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2
  %403 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2
  %404 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2
  %input.41 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.39, %400, %92, %401, %402, %403, %96, %404, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %406 : Tensor = prim::GetAttr[name="running_var"](%399)
  %407 : Tensor = prim::GetAttr[name="running_mean"](%399)
  %408 : Tensor = prim::GetAttr[name="bias"](%399)
  %409 : Tensor = prim::GetAttr[name="weight"](%399)
  %out.43 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.41, %409, %408, %407, %406, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv2/__module.model.backbone.bottom_up.res3.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.41 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.43), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %412 : __torch__.detectron2.layers.batch_norm.___torch_mangle_50.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%383)
  %413 : Tensor = prim::GetAttr[name="weight"](%383)
  %414 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3
  %415 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3
  %416 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3
  %417 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3
  %input.43 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.41, %413, %92, %414, %415, %416, %96, %417, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %419 : Tensor = prim::GetAttr[name="running_var"](%412)
  %420 : Tensor = prim::GetAttr[name="running_mean"](%412)
  %421 : Tensor = prim::GetAttr[name="bias"](%412)
  %422 : Tensor = prim::GetAttr[name="weight"](%412)
  %out.45 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.43, %422, %421, %420, %419, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2/__module.model.backbone.bottom_up.res3.2.conv3/__module.model.backbone.bottom_up.res3.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.47 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::add_(%out.45, %x.37, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.43 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.47), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %426 : __torch__.detectron2.layers.wrappers.___torch_mangle_58.Conv2d = prim::GetAttr[name="conv3"](%280)
  %427 : __torch__.detectron2.layers.wrappers.___torch_mangle_56.Conv2d = prim::GetAttr[name="conv2"](%280)
  %428 : __torch__.detectron2.layers.wrappers.___torch_mangle_54.Conv2d = prim::GetAttr[name="conv1"](%280)
  %429 : __torch__.detectron2.layers.batch_norm.___torch_mangle_53.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%428)
  %430 : Tensor = prim::GetAttr[name="weight"](%428)
  %431 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1
  %432 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1
  %433 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1
  %434 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1
  %input.45 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.43, %430, %92, %431, %432, %433, %96, %434, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %436 : Tensor = prim::GetAttr[name="running_var"](%429)
  %437 : Tensor = prim::GetAttr[name="running_mean"](%429)
  %438 : Tensor = prim::GetAttr[name="bias"](%429)
  %439 : Tensor = prim::GetAttr[name="weight"](%429)
  %out.49 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.45, %439, %438, %437, %436, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv1/__module.model.backbone.bottom_up.res3.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.45 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.49), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %442 : __torch__.detectron2.layers.batch_norm.___torch_mangle_55.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%427)
  %443 : Tensor = prim::GetAttr[name="weight"](%427)
  %444 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2
  %445 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2
  %446 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2
  %447 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2
  %input.47 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.45, %443, %92, %444, %445, %446, %96, %447, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %449 : Tensor = prim::GetAttr[name="running_var"](%442)
  %450 : Tensor = prim::GetAttr[name="running_mean"](%442)
  %451 : Tensor = prim::GetAttr[name="bias"](%442)
  %452 : Tensor = prim::GetAttr[name="weight"](%442)
  %out.51 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.47, %452, %451, %450, %449, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv2/__module.model.backbone.bottom_up.res3.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.47 : Float(1, 128, 100, 136, strides=[1740800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.51), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %455 : __torch__.detectron2.layers.batch_norm.___torch_mangle_57.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%426)
  %456 : Tensor = prim::GetAttr[name="weight"](%426)
  %457 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3
  %458 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3
  %459 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3
  %460 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3
  %input.49 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.47, %456, %92, %457, %458, %459, %96, %460, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %462 : Tensor = prim::GetAttr[name="running_var"](%455)
  %463 : Tensor = prim::GetAttr[name="running_mean"](%455)
  %464 : Tensor = prim::GetAttr[name="bias"](%455)
  %465 : Tensor = prim::GetAttr[name="weight"](%455)
  %out.53 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.49, %465, %464, %463, %462, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3/__module.model.backbone.bottom_up.res3.3.conv3/__module.model.backbone.bottom_up.res3.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.55 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::add_(%out.53, %x.43, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.49 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu_(%out.55), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res3/__module.model.backbone.bottom_up.res3.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %469 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_104.BottleneckBlock = prim::GetAttr[name="5"](%112)
  %470 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_97.BottleneckBlock = prim::GetAttr[name="4"](%112)
  %471 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_90.BottleneckBlock = prim::GetAttr[name="3"](%112)
  %472 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_83.BottleneckBlock = prim::GetAttr[name="2"](%112)
  %473 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_76.BottleneckBlock = prim::GetAttr[name="1"](%112)
  %474 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_69.BottleneckBlock = prim::GetAttr[name="0"](%112)
  %475 : __torch__.detectron2.layers.wrappers.___torch_mangle_62.Conv2d = prim::GetAttr[name="shortcut"](%474)
  %476 : __torch__.detectron2.layers.wrappers.___torch_mangle_68.Conv2d = prim::GetAttr[name="conv3"](%474)
  %477 : __torch__.detectron2.layers.wrappers.___torch_mangle_66.Conv2d = prim::GetAttr[name="conv2"](%474)
  %478 : __torch__.detectron2.layers.wrappers.___torch_mangle_64.Conv2d = prim::GetAttr[name="conv1"](%474)
  %479 : __torch__.detectron2.layers.batch_norm.___torch_mangle_63.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%478)
  %480 : Tensor = prim::GetAttr[name="weight"](%478)
  %481 : int[] = prim::ListConstruct(%93, %93), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1
  %482 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1
  %483 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1
  %484 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1
  %input.51 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.49, %480, %92, %481, %482, %483, %96, %484, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %486 : Tensor = prim::GetAttr[name="running_var"](%479)
  %487 : Tensor = prim::GetAttr[name="running_mean"](%479)
  %488 : Tensor = prim::GetAttr[name="bias"](%479)
  %489 : Tensor = prim::GetAttr[name="weight"](%479)
  %out.57 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.51, %489, %488, %487, %486, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv1/__module.model.backbone.bottom_up.res4.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.51 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.57), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %492 : __torch__.detectron2.layers.batch_norm.___torch_mangle_65.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%477)
  %493 : Tensor = prim::GetAttr[name="weight"](%477)
  %494 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2
  %495 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2
  %496 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2
  %497 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2
  %input.53 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.51, %493, %92, %494, %495, %496, %96, %497, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %499 : Tensor = prim::GetAttr[name="running_var"](%492)
  %500 : Tensor = prim::GetAttr[name="running_mean"](%492)
  %501 : Tensor = prim::GetAttr[name="bias"](%492)
  %502 : Tensor = prim::GetAttr[name="weight"](%492)
  %out.59 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.53, %502, %501, %500, %499, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv2/__module.model.backbone.bottom_up.res4.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.53 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.59), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %505 : __torch__.detectron2.layers.batch_norm.___torch_mangle_67.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%476)
  %506 : Tensor = prim::GetAttr[name="weight"](%476)
  %507 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3
  %508 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3
  %509 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3
  %510 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3
  %input.55 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.53, %506, %92, %507, %508, %509, %96, %510, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %512 : Tensor = prim::GetAttr[name="running_var"](%505)
  %513 : Tensor = prim::GetAttr[name="running_mean"](%505)
  %514 : Tensor = prim::GetAttr[name="bias"](%505)
  %515 : Tensor = prim::GetAttr[name="weight"](%505)
  %out.61 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.55, %515, %514, %513, %512, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.conv3/__module.model.backbone.bottom_up.res4.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %517 : __torch__.detectron2.layers.batch_norm.___torch_mangle_61.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%475)
  %518 : Tensor = prim::GetAttr[name="weight"](%475)
  %519 : int[] = prim::ListConstruct(%93, %93), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut
  %520 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut
  %521 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut
  %522 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut
  %input.57 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.49, %518, %92, %519, %520, %521, %96, %522, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %524 : Tensor = prim::GetAttr[name="running_var"](%517)
  %525 : Tensor = prim::GetAttr[name="running_mean"](%517)
  %526 : Tensor = prim::GetAttr[name="bias"](%517)
  %527 : Tensor = prim::GetAttr[name="weight"](%517)
  %shortcut.5 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.57, %527, %526, %525, %524, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0/__module.model.backbone.bottom_up.res4.0.shortcut/__module.model.backbone.bottom_up.res4.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.63 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%out.61, %shortcut.5, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.55 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.63), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %531 : __torch__.detectron2.layers.wrappers.___torch_mangle_75.Conv2d = prim::GetAttr[name="conv3"](%473)
  %532 : __torch__.detectron2.layers.wrappers.___torch_mangle_73.Conv2d = prim::GetAttr[name="conv2"](%473)
  %533 : __torch__.detectron2.layers.wrappers.___torch_mangle_71.Conv2d = prim::GetAttr[name="conv1"](%473)
  %534 : __torch__.detectron2.layers.batch_norm.___torch_mangle_70.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%533)
  %535 : Tensor = prim::GetAttr[name="weight"](%533)
  %536 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1
  %537 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1
  %538 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1
  %539 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1
  %input.59 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.55, %535, %92, %536, %537, %538, %96, %539, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %541 : Tensor = prim::GetAttr[name="running_var"](%534)
  %542 : Tensor = prim::GetAttr[name="running_mean"](%534)
  %543 : Tensor = prim::GetAttr[name="bias"](%534)
  %544 : Tensor = prim::GetAttr[name="weight"](%534)
  %out.65 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.59, %544, %543, %542, %541, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv1/__module.model.backbone.bottom_up.res4.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.57 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.65), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %547 : __torch__.detectron2.layers.batch_norm.___torch_mangle_72.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%532)
  %548 : Tensor = prim::GetAttr[name="weight"](%532)
  %549 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2
  %550 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2
  %551 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2
  %552 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2
  %input.61 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.57, %548, %92, %549, %550, %551, %96, %552, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %554 : Tensor = prim::GetAttr[name="running_var"](%547)
  %555 : Tensor = prim::GetAttr[name="running_mean"](%547)
  %556 : Tensor = prim::GetAttr[name="bias"](%547)
  %557 : Tensor = prim::GetAttr[name="weight"](%547)
  %out.67 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.61, %557, %556, %555, %554, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv2/__module.model.backbone.bottom_up.res4.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.59 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.67), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %560 : __torch__.detectron2.layers.batch_norm.___torch_mangle_74.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%531)
  %561 : Tensor = prim::GetAttr[name="weight"](%531)
  %562 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3
  %563 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3
  %564 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3
  %565 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3
  %input.63 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.59, %561, %92, %562, %563, %564, %96, %565, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %567 : Tensor = prim::GetAttr[name="running_var"](%560)
  %568 : Tensor = prim::GetAttr[name="running_mean"](%560)
  %569 : Tensor = prim::GetAttr[name="bias"](%560)
  %570 : Tensor = prim::GetAttr[name="weight"](%560)
  %out.69 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.63, %570, %569, %568, %567, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1/__module.model.backbone.bottom_up.res4.1.conv3/__module.model.backbone.bottom_up.res4.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.71 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%out.69, %x.55, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.61 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.71), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %574 : __torch__.detectron2.layers.wrappers.___torch_mangle_82.Conv2d = prim::GetAttr[name="conv3"](%472)
  %575 : __torch__.detectron2.layers.wrappers.___torch_mangle_80.Conv2d = prim::GetAttr[name="conv2"](%472)
  %576 : __torch__.detectron2.layers.wrappers.___torch_mangle_78.Conv2d = prim::GetAttr[name="conv1"](%472)
  %577 : __torch__.detectron2.layers.batch_norm.___torch_mangle_77.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%576)
  %578 : Tensor = prim::GetAttr[name="weight"](%576)
  %579 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1
  %580 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1
  %581 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1
  %582 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1
  %input.65 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.61, %578, %92, %579, %580, %581, %96, %582, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %584 : Tensor = prim::GetAttr[name="running_var"](%577)
  %585 : Tensor = prim::GetAttr[name="running_mean"](%577)
  %586 : Tensor = prim::GetAttr[name="bias"](%577)
  %587 : Tensor = prim::GetAttr[name="weight"](%577)
  %out.73 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.65, %587, %586, %585, %584, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv1/__module.model.backbone.bottom_up.res4.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.63 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.73), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %590 : __torch__.detectron2.layers.batch_norm.___torch_mangle_79.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%575)
  %591 : Tensor = prim::GetAttr[name="weight"](%575)
  %592 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2
  %593 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2
  %594 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2
  %595 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2
  %input.67 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.63, %591, %92, %592, %593, %594, %96, %595, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %597 : Tensor = prim::GetAttr[name="running_var"](%590)
  %598 : Tensor = prim::GetAttr[name="running_mean"](%590)
  %599 : Tensor = prim::GetAttr[name="bias"](%590)
  %600 : Tensor = prim::GetAttr[name="weight"](%590)
  %out.75 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.67, %600, %599, %598, %597, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv2/__module.model.backbone.bottom_up.res4.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.65 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.75), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %603 : __torch__.detectron2.layers.batch_norm.___torch_mangle_81.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%574)
  %604 : Tensor = prim::GetAttr[name="weight"](%574)
  %605 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3
  %606 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3
  %607 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3
  %608 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3
  %input.69 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.65, %604, %92, %605, %606, %607, %96, %608, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %610 : Tensor = prim::GetAttr[name="running_var"](%603)
  %611 : Tensor = prim::GetAttr[name="running_mean"](%603)
  %612 : Tensor = prim::GetAttr[name="bias"](%603)
  %613 : Tensor = prim::GetAttr[name="weight"](%603)
  %out.77 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.69, %613, %612, %611, %610, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2/__module.model.backbone.bottom_up.res4.2.conv3/__module.model.backbone.bottom_up.res4.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.79 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%out.77, %x.61, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.67 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.79), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %617 : __torch__.detectron2.layers.wrappers.___torch_mangle_89.Conv2d = prim::GetAttr[name="conv3"](%471)
  %618 : __torch__.detectron2.layers.wrappers.___torch_mangle_87.Conv2d = prim::GetAttr[name="conv2"](%471)
  %619 : __torch__.detectron2.layers.wrappers.___torch_mangle_85.Conv2d = prim::GetAttr[name="conv1"](%471)
  %620 : __torch__.detectron2.layers.batch_norm.___torch_mangle_84.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%619)
  %621 : Tensor = prim::GetAttr[name="weight"](%619)
  %622 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1
  %623 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1
  %624 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1
  %625 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1
  %input.71 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.67, %621, %92, %622, %623, %624, %96, %625, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %627 : Tensor = prim::GetAttr[name="running_var"](%620)
  %628 : Tensor = prim::GetAttr[name="running_mean"](%620)
  %629 : Tensor = prim::GetAttr[name="bias"](%620)
  %630 : Tensor = prim::GetAttr[name="weight"](%620)
  %out.81 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.71, %630, %629, %628, %627, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv1/__module.model.backbone.bottom_up.res4.3.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.69 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.81), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %633 : __torch__.detectron2.layers.batch_norm.___torch_mangle_86.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%618)
  %634 : Tensor = prim::GetAttr[name="weight"](%618)
  %635 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2
  %636 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2
  %637 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2
  %638 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2
  %input.73 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.69, %634, %92, %635, %636, %637, %96, %638, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %640 : Tensor = prim::GetAttr[name="running_var"](%633)
  %641 : Tensor = prim::GetAttr[name="running_mean"](%633)
  %642 : Tensor = prim::GetAttr[name="bias"](%633)
  %643 : Tensor = prim::GetAttr[name="weight"](%633)
  %out.83 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.73, %643, %642, %641, %640, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv2/__module.model.backbone.bottom_up.res4.3.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.71 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.83), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %646 : __torch__.detectron2.layers.batch_norm.___torch_mangle_88.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%617)
  %647 : Tensor = prim::GetAttr[name="weight"](%617)
  %648 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3
  %649 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3
  %650 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3
  %651 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3
  %input.75 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.71, %647, %92, %648, %649, %650, %96, %651, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %653 : Tensor = prim::GetAttr[name="running_var"](%646)
  %654 : Tensor = prim::GetAttr[name="running_mean"](%646)
  %655 : Tensor = prim::GetAttr[name="bias"](%646)
  %656 : Tensor = prim::GetAttr[name="weight"](%646)
  %out.85 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.75, %656, %655, %654, %653, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3/__module.model.backbone.bottom_up.res4.3.conv3/__module.model.backbone.bottom_up.res4.3.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.87 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%out.85, %x.67, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.73 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.87), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %660 : __torch__.detectron2.layers.wrappers.___torch_mangle_96.Conv2d = prim::GetAttr[name="conv3"](%470)
  %661 : __torch__.detectron2.layers.wrappers.___torch_mangle_94.Conv2d = prim::GetAttr[name="conv2"](%470)
  %662 : __torch__.detectron2.layers.wrappers.___torch_mangle_92.Conv2d = prim::GetAttr[name="conv1"](%470)
  %663 : __torch__.detectron2.layers.batch_norm.___torch_mangle_91.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%662)
  %664 : Tensor = prim::GetAttr[name="weight"](%662)
  %665 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1
  %666 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1
  %667 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1
  %668 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1
  %input.77 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.73, %664, %92, %665, %666, %667, %96, %668, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %670 : Tensor = prim::GetAttr[name="running_var"](%663)
  %671 : Tensor = prim::GetAttr[name="running_mean"](%663)
  %672 : Tensor = prim::GetAttr[name="bias"](%663)
  %673 : Tensor = prim::GetAttr[name="weight"](%663)
  %out.89 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.77, %673, %672, %671, %670, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv1/__module.model.backbone.bottom_up.res4.4.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.75 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.89), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %676 : __torch__.detectron2.layers.batch_norm.___torch_mangle_93.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%661)
  %677 : Tensor = prim::GetAttr[name="weight"](%661)
  %678 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2
  %679 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2
  %680 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2
  %681 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2
  %input.79 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.75, %677, %92, %678, %679, %680, %96, %681, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %683 : Tensor = prim::GetAttr[name="running_var"](%676)
  %684 : Tensor = prim::GetAttr[name="running_mean"](%676)
  %685 : Tensor = prim::GetAttr[name="bias"](%676)
  %686 : Tensor = prim::GetAttr[name="weight"](%676)
  %out.91 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.79, %686, %685, %684, %683, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv2/__module.model.backbone.bottom_up.res4.4.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.77 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.91), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %689 : __torch__.detectron2.layers.batch_norm.___torch_mangle_95.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%660)
  %690 : Tensor = prim::GetAttr[name="weight"](%660)
  %691 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3
  %692 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3
  %693 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3
  %694 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3
  %input.81 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.77, %690, %92, %691, %692, %693, %96, %694, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %696 : Tensor = prim::GetAttr[name="running_var"](%689)
  %697 : Tensor = prim::GetAttr[name="running_mean"](%689)
  %698 : Tensor = prim::GetAttr[name="bias"](%689)
  %699 : Tensor = prim::GetAttr[name="weight"](%689)
  %out.93 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.81, %699, %698, %697, %696, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4/__module.model.backbone.bottom_up.res4.4.conv3/__module.model.backbone.bottom_up.res4.4.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.95 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%out.93, %x.73, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.79 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %703 : __torch__.detectron2.layers.wrappers.___torch_mangle_103.Conv2d = prim::GetAttr[name="conv3"](%469)
  %704 : __torch__.detectron2.layers.wrappers.___torch_mangle_101.Conv2d = prim::GetAttr[name="conv2"](%469)
  %705 : __torch__.detectron2.layers.wrappers.___torch_mangle_99.Conv2d = prim::GetAttr[name="conv1"](%469)
  %706 : __torch__.detectron2.layers.batch_norm.___torch_mangle_98.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%705)
  %707 : Tensor = prim::GetAttr[name="weight"](%705)
  %708 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1
  %709 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1
  %710 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1
  %711 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1
  %input.83 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.79, %707, %92, %708, %709, %710, %96, %711, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %713 : Tensor = prim::GetAttr[name="running_var"](%706)
  %714 : Tensor = prim::GetAttr[name="running_mean"](%706)
  %715 : Tensor = prim::GetAttr[name="bias"](%706)
  %716 : Tensor = prim::GetAttr[name="weight"](%706)
  %out.97 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.83, %716, %715, %714, %713, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv1/__module.model.backbone.bottom_up.res4.5.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.81 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %719 : __torch__.detectron2.layers.batch_norm.___torch_mangle_100.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%704)
  %720 : Tensor = prim::GetAttr[name="weight"](%704)
  %721 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2
  %722 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2
  %723 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2
  %724 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2
  %input.85 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.81, %720, %92, %721, %722, %723, %96, %724, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %726 : Tensor = prim::GetAttr[name="running_var"](%719)
  %727 : Tensor = prim::GetAttr[name="running_mean"](%719)
  %728 : Tensor = prim::GetAttr[name="bias"](%719)
  %729 : Tensor = prim::GetAttr[name="weight"](%719)
  %out.99 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.85, %729, %728, %727, %726, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv2/__module.model.backbone.bottom_up.res4.5.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.83 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.99), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %732 : __torch__.detectron2.layers.batch_norm.___torch_mangle_102.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%703)
  %733 : Tensor = prim::GetAttr[name="weight"](%703)
  %734 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3
  %735 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3
  %736 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3
  %737 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3
  %input.87 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.83, %733, %92, %734, %735, %736, %96, %737, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %739 : Tensor = prim::GetAttr[name="running_var"](%732)
  %740 : Tensor = prim::GetAttr[name="running_mean"](%732)
  %741 : Tensor = prim::GetAttr[name="bias"](%732)
  %742 : Tensor = prim::GetAttr[name="weight"](%732)
  %out.101 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.87, %742, %741, %740, %739, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5/__module.model.backbone.bottom_up.res4.5.conv3/__module.model.backbone.bottom_up.res4.5.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.103 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add_(%out.101, %x.79, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.85 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu_(%out.103), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res4/__module.model.backbone.bottom_up.res4.5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %746 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_128.BottleneckBlock = prim::GetAttr[name="2"](%111)
  %747 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_121.BottleneckBlock = prim::GetAttr[name="1"](%111)
  %748 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_114.BottleneckBlock = prim::GetAttr[name="0"](%111)
  %749 : __torch__.detectron2.layers.wrappers.___torch_mangle_107.Conv2d = prim::GetAttr[name="shortcut"](%748)
  %750 : __torch__.detectron2.layers.wrappers.___torch_mangle_113.Conv2d = prim::GetAttr[name="conv3"](%748)
  %751 : __torch__.detectron2.layers.wrappers.___torch_mangle_111.Conv2d = prim::GetAttr[name="conv2"](%748)
  %752 : __torch__.detectron2.layers.wrappers.___torch_mangle_109.Conv2d = prim::GetAttr[name="conv1"](%748)
  %753 : __torch__.detectron2.layers.batch_norm.___torch_mangle_108.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%752)
  %754 : Tensor = prim::GetAttr[name="weight"](%752)
  %755 : int[] = prim::ListConstruct(%93, %93), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1
  %756 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1
  %757 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1
  %758 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1
  %input.89 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.85, %754, %92, %755, %756, %757, %96, %758, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %760 : Tensor = prim::GetAttr[name="running_var"](%753)
  %761 : Tensor = prim::GetAttr[name="running_mean"](%753)
  %762 : Tensor = prim::GetAttr[name="bias"](%753)
  %763 : Tensor = prim::GetAttr[name="weight"](%753)
  %out.105 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.89, %763, %762, %761, %760, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv1/__module.model.backbone.bottom_up.res5.0.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.87 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out.105), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %766 : __torch__.detectron2.layers.batch_norm.___torch_mangle_110.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%751)
  %767 : Tensor = prim::GetAttr[name="weight"](%751)
  %768 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2
  %769 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2
  %770 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2
  %771 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2
  %input.91 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.87, %767, %92, %768, %769, %770, %96, %771, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %773 : Tensor = prim::GetAttr[name="running_var"](%766)
  %774 : Tensor = prim::GetAttr[name="running_mean"](%766)
  %775 : Tensor = prim::GetAttr[name="bias"](%766)
  %776 : Tensor = prim::GetAttr[name="weight"](%766)
  %out.107 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.91, %776, %775, %774, %773, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv2/__module.model.backbone.bottom_up.res5.0.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.89 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out.107), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %779 : __torch__.detectron2.layers.batch_norm.___torch_mangle_112.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%750)
  %780 : Tensor = prim::GetAttr[name="weight"](%750)
  %781 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3
  %782 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3
  %783 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3
  %784 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3
  %input.93 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.89, %780, %92, %781, %782, %783, %96, %784, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %786 : Tensor = prim::GetAttr[name="running_var"](%779)
  %787 : Tensor = prim::GetAttr[name="running_mean"](%779)
  %788 : Tensor = prim::GetAttr[name="bias"](%779)
  %789 : Tensor = prim::GetAttr[name="weight"](%779)
  %out.109 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.93, %789, %788, %787, %786, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.conv3/__module.model.backbone.bottom_up.res5.0.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %791 : __torch__.detectron2.layers.batch_norm.___torch_mangle_106.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%749)
  %792 : Tensor = prim::GetAttr[name="weight"](%749)
  %793 : int[] = prim::ListConstruct(%93, %93), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut
  %794 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut
  %795 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut
  %796 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut
  %input.95 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.85, %792, %92, %793, %794, %795, %96, %796, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %798 : Tensor = prim::GetAttr[name="running_var"](%791)
  %799 : Tensor = prim::GetAttr[name="running_mean"](%791)
  %800 : Tensor = prim::GetAttr[name="bias"](%791)
  %801 : Tensor = prim::GetAttr[name="weight"](%791)
  %shortcut : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.95, %801, %800, %799, %798, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0/__module.model.backbone.bottom_up.res5.0.shortcut/__module.model.backbone.bottom_up.res5.0.shortcut.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.111 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::add_(%out.109, %shortcut, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.91 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out.111), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %805 : __torch__.detectron2.layers.wrappers.___torch_mangle_120.Conv2d = prim::GetAttr[name="conv3"](%747)
  %806 : __torch__.detectron2.layers.wrappers.___torch_mangle_118.Conv2d = prim::GetAttr[name="conv2"](%747)
  %807 : __torch__.detectron2.layers.wrappers.___torch_mangle_116.Conv2d = prim::GetAttr[name="conv1"](%747)
  %808 : __torch__.detectron2.layers.batch_norm.___torch_mangle_115.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%807)
  %809 : Tensor = prim::GetAttr[name="weight"](%807)
  %810 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1
  %811 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1
  %812 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1
  %813 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1
  %input.97 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.91, %809, %92, %810, %811, %812, %96, %813, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %815 : Tensor = prim::GetAttr[name="running_var"](%808)
  %816 : Tensor = prim::GetAttr[name="running_mean"](%808)
  %817 : Tensor = prim::GetAttr[name="bias"](%808)
  %818 : Tensor = prim::GetAttr[name="weight"](%808)
  %out.113 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.97, %818, %817, %816, %815, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv1/__module.model.backbone.bottom_up.res5.1.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.93 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out.113), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %821 : __torch__.detectron2.layers.batch_norm.___torch_mangle_117.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%806)
  %822 : Tensor = prim::GetAttr[name="weight"](%806)
  %823 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2
  %824 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2
  %825 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2
  %826 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2
  %input.99 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.93, %822, %92, %823, %824, %825, %96, %826, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %828 : Tensor = prim::GetAttr[name="running_var"](%821)
  %829 : Tensor = prim::GetAttr[name="running_mean"](%821)
  %830 : Tensor = prim::GetAttr[name="bias"](%821)
  %831 : Tensor = prim::GetAttr[name="weight"](%821)
  %out.115 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.99, %831, %830, %829, %828, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv2/__module.model.backbone.bottom_up.res5.1.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.95 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out.115), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %834 : __torch__.detectron2.layers.batch_norm.___torch_mangle_119.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%805)
  %835 : Tensor = prim::GetAttr[name="weight"](%805)
  %836 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3
  %837 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3
  %838 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3
  %839 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3
  %input.101 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.95, %835, %92, %836, %837, %838, %96, %839, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %841 : Tensor = prim::GetAttr[name="running_var"](%834)
  %842 : Tensor = prim::GetAttr[name="running_mean"](%834)
  %843 : Tensor = prim::GetAttr[name="bias"](%834)
  %844 : Tensor = prim::GetAttr[name="weight"](%834)
  %out.117 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.101, %844, %843, %842, %841, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1/__module.model.backbone.bottom_up.res5.1.conv3/__module.model.backbone.bottom_up.res5.1.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out.119 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::add_(%out.117, %x.91, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.97 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out.119), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %848 : __torch__.detectron2.layers.wrappers.___torch_mangle_127.Conv2d = prim::GetAttr[name="conv3"](%746)
  %849 : __torch__.detectron2.layers.wrappers.___torch_mangle_125.Conv2d = prim::GetAttr[name="conv2"](%746)
  %850 : __torch__.detectron2.layers.wrappers.___torch_mangle_123.Conv2d = prim::GetAttr[name="conv1"](%746)
  %851 : __torch__.detectron2.layers.batch_norm.___torch_mangle_122.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%850)
  %852 : Tensor = prim::GetAttr[name="weight"](%850)
  %853 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1
  %854 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1
  %855 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1
  %856 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1
  %input.103 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.97, %852, %92, %853, %854, %855, %96, %856, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %858 : Tensor = prim::GetAttr[name="running_var"](%851)
  %859 : Tensor = prim::GetAttr[name="running_mean"](%851)
  %860 : Tensor = prim::GetAttr[name="bias"](%851)
  %861 : Tensor = prim::GetAttr[name="weight"](%851)
  %out.121 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.103, %861, %860, %859, %858, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv1/__module.model.backbone.bottom_up.res5.2.conv1.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.99 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out.121), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:196:0
  %864 : __torch__.detectron2.layers.batch_norm.___torch_mangle_124.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%849)
  %865 : Tensor = prim::GetAttr[name="weight"](%849)
  %866 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2
  %867 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2
  %868 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2
  %869 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2
  %input.105 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.99, %865, %92, %866, %867, %868, %96, %869, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %871 : Tensor = prim::GetAttr[name="running_var"](%864)
  %872 : Tensor = prim::GetAttr[name="running_mean"](%864)
  %873 : Tensor = prim::GetAttr[name="bias"](%864)
  %874 : Tensor = prim::GetAttr[name="weight"](%864)
  %out.123 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.105, %874, %873, %872, %871, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv2/__module.model.backbone.bottom_up.res5.2.conv2.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %x.101 : Float(1, 512, 25, 34, strides=[435200, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out.123), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:199:0
  %877 : __torch__.detectron2.layers.batch_norm.___torch_mangle_126.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%848)
  %878 : Tensor = prim::GetAttr[name="weight"](%848)
  %879 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3
  %880 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3
  %881 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3
  %882 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3
  %input.107 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.101, %878, %92, %879, %880, %881, %96, %882, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %884 : Tensor = prim::GetAttr[name="running_var"](%877)
  %885 : Tensor = prim::GetAttr[name="running_mean"](%877)
  %886 : Tensor = prim::GetAttr[name="bias"](%877)
  %887 : Tensor = prim::GetAttr[name="weight"](%877)
  %out.125 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::batch_norm(%input.107, %887, %886, %885, %884, %96, %100, %99, %98), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2/__module.model.backbone.bottom_up.res5.2.conv3/__module.model.backbone.bottom_up.res5.2.conv3.norm # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:2282:0
  %out : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::add_(%out.125, %x.97, %95), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:208:0
  %x.103 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu_(%out), scope: __module.model.backbone/__module.model.backbone.bottom_up/__module.model.backbone.bottom_up.res5/__module.model.backbone.bottom_up.res5.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/resnet.py:209:0
  %891 : (Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu), Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu), Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%x.103, %x.85, %x.49, %x.25)
  %892 : Float(1, 2048, 25, 34, strides=[1740800, 850, 34, 1], requires_grad=0, device=cpu), %893 : Float(1, 1024, 50, 68, strides=[3481600, 3400, 68, 1], requires_grad=0, device=cpu), %894 : Float(1, 512, 100, 136, strides=[6963200, 13600, 136, 1], requires_grad=0, device=cpu), %895 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = prim::TupleUnpack(%891)
  %896 : Tensor = prim::GetAttr[name="bias"](%109)
  %897 : Tensor = prim::GetAttr[name="weight"](%109)
  %898 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5
  %899 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5
  %900 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5
  %901 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5
  %x.105 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%892, %897, %896, %898, %899, %900, %96, %901, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.fpn_lateral5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %903 : Tensor = prim::GetAttr[name="bias"](%108)
  %904 : Tensor = prim::GetAttr[name="weight"](%108)
  %905 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output5
  %906 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output5
  %907 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output5
  %908 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_output5
  %input.109 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.105, %904, %903, %905, %906, %907, %96, %908, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.fpn_output5 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %910 : float[] = prim::ListConstruct(%91, %91), scope: __module.model.backbone
  %top_down_features.1 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::upsample_nearest2d(%x.105, %92, %910), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
  %912 : Tensor = prim::GetAttr[name="bias"](%107)
  %913 : Tensor = prim::GetAttr[name="weight"](%107)
  %914 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4
  %915 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4
  %916 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4
  %917 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4
  %lateral_features.1 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%893, %913, %912, %914, %915, %916, %96, %917, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.fpn_lateral4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %x.107 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::add(%lateral_features.1, %top_down_features.1, %95), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/fpn.py:155:0
  %920 : Tensor = prim::GetAttr[name="bias"](%106)
  %921 : Tensor = prim::GetAttr[name="weight"](%106)
  %922 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output4
  %923 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output4
  %924 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output4
  %925 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_output4
  %feature_map.5 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.107, %921, %920, %922, %923, %924, %96, %925, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.fpn_output4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %927 : float[] = prim::ListConstruct(%91, %91), scope: __module.model.backbone
  %top_down_features.3 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::upsample_nearest2d(%x.107, %92, %927), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
  %929 : Tensor = prim::GetAttr[name="bias"](%105)
  %930 : Tensor = prim::GetAttr[name="weight"](%105)
  %931 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3
  %932 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3
  %933 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3
  %934 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3
  %lateral_features.3 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%894, %930, %929, %931, %932, %933, %96, %934, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.fpn_lateral3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %x.109 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::add(%lateral_features.3, %top_down_features.3, %95), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/fpn.py:155:0
  %937 : Tensor = prim::GetAttr[name="bias"](%104)
  %938 : Tensor = prim::GetAttr[name="weight"](%104)
  %939 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output3
  %940 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output3
  %941 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output3
  %942 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_output3
  %feature_map.3 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.109, %938, %937, %939, %940, %941, %96, %942, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.fpn_output3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %944 : float[] = prim::ListConstruct(%91, %91), scope: __module.model.backbone
  %top_down_features : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::upsample_nearest2d(%x.109, %92, %944), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:3690:0
  %946 : Tensor = prim::GetAttr[name="bias"](%103)
  %947 : Tensor = prim::GetAttr[name="weight"](%103)
  %948 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2
  %949 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2
  %950 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2
  %951 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2
  %lateral_features : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%895, %947, %946, %948, %949, %950, %96, %951, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.fpn_lateral2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %x.111 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::add(%lateral_features, %top_down_features, %95), scope: __module.model.backbone # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/backbone/fpn.py:155:0
  %954 : Tensor = prim::GetAttr[name="bias"](%102)
  %955 : Tensor = prim::GetAttr[name="weight"](%102)
  %956 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output2
  %957 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output2
  %958 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.fpn_output2
  %959 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.fpn_output2
  %feature_map.1 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.111, %955, %954, %956, %957, %958, %96, %959, %95, %96, %96, %98, %98), scope: __module.model.backbone/__module.model.backbone.fpn_output2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %961 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.top_block
  %962 : int[] = prim::ListConstruct(%93, %93), scope: __module.model.backbone/__module.model.backbone.top_block
  %963 : int[] = prim::ListConstruct(%97, %97), scope: __module.model.backbone/__module.model.backbone.top_block
  %964 : int[] = prim::ListConstruct(%95, %95), scope: __module.model.backbone/__module.model.backbone.top_block
  %feature_map : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu) = aten::max_pool2d(%input.109, %961, %962, %963, %964, %96), scope: __module.model.backbone/__module.model.backbone.top_block # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:718:0
  %966 : (Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu), Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu), Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%feature_map.1, %feature_map.3, %feature_map.5, %input.109, %input.109, %input.109, %input.109, %feature_map, %input.109, %input.109, %input.109)
  %69 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu), %70 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu), %71 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu), %72 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %73 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %74 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %75 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %76 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu), %77 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %78 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu), %79 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu) = prim::TupleUnpack(%966)
  %967 : float = prim::Constant[value=0.69999999999999996](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
  %968 : int = prim::Constant[value=11](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
  %969 : int = prim::Constant[value=1000](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
  %970 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
  %971 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %972 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %973 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %974 : int = prim::Constant[value=-2](), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %975 : bool = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %976 : int = prim::Constant[value=2](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %977 : int = prim::Constant[value=3](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %978 : Long(requires_grad=0, device=cpu) = prim::Constant[value={4}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %979 : float = prim::Constant[value=0.](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %980 : int = prim::Constant[value=4](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %981 : int = prim::Constant[value=6](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %982 : int = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %983 : Device = prim::Constant[value="cpu"](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %984 : bool = prim::Constant[value=0](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %985 : NoneType = prim::Constant()
  %986 : int = prim::Constant[value=-1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
  %987 : int = prim::Constant[value=1](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
  %988 : Long(requires_grad=0, device=cpu) = prim::Constant[value={8}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %989 : int = prim::Constant[value=8](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %990 : Long(requires_grad=0, device=cpu) = prim::Constant[value={16}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %991 : int = prim::Constant[value=16](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %992 : Long(requires_grad=0, device=cpu) = prim::Constant[value={32}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %993 : int = prim::Constant[value=32](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %994 : Long(requires_grad=0, device=cpu) = prim::Constant[value={64}](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %995 : int = prim::Constant[value=64](), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %996 : __torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead = prim::GetAttr[name="rpn_head"](%5)
  %997 : __torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator = prim::GetAttr[name="anchor_generator"](%5)
  %998 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%997)
  %999 : Tensor = prim::GetAttr[name="4"](%998)
  %1000 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%997)
  %1001 : Tensor = prim::GetAttr[name="3"](%1000)
  %1002 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%997)
  %1003 : Tensor = prim::GetAttr[name="2"](%1002)
  %1004 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%997)
  %1005 : Tensor = prim::GetAttr[name="1"](%1004)
  %1006 : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%997)
  %1007 : Tensor = prim::GetAttr[name="0"](%1006)
  %1008 : int = aten::size(%69, %976), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %grid_height.1 : Long(device=cpu) = prim::NumToTensor(%1008), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1010 : int = aten::size(%69, %977), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %grid_width.1 : Long(device=cpu) = prim::NumToTensor(%1010), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1012 : int = aten::size(%70, %976), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %grid_height.3 : Long(device=cpu) = prim::NumToTensor(%1012), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1014 : int = aten::size(%70, %977), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %grid_width.3 : Long(device=cpu) = prim::NumToTensor(%1014), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1016 : int = aten::size(%71, %976), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %grid_height.5 : Long(device=cpu) = prim::NumToTensor(%1016), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1018 : int = aten::size(%71, %977), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %grid_width.5 : Long(device=cpu) = prim::NumToTensor(%1018), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1020 : int = aten::size(%74, %976), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %grid_height.7 : Long(device=cpu) = prim::NumToTensor(%1020), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1022 : int = aten::size(%75, %977), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %grid_width.7 : Long(device=cpu) = prim::NumToTensor(%1022), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1024 : int = aten::size(%76, %976), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %grid_height : Long(device=cpu) = prim::NumToTensor(%1024), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1026 : int = aten::size(%76, %977), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:229:0
  %grid_width : Long(device=cpu) = prim::NumToTensor(%1026), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1028 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_width.1, %978), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %1029 : Scalar = aten::ScalarImplicit(%1028), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1030 : Float(272, strides=[1], requires_grad=0, device=cpu) = aten::arange(%979, %1029, %980, %981, %982, %983, %984), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %1031 : Device = prim::device(%1007)
  %1032 : Tensor = aten::to(%1030, %1031, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1033 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_height.1, %978), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
  %1034 : Scalar = aten::ScalarImplicit(%1033), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1035 : Float(200, strides=[1], requires_grad=0, device=cpu) = aten::arange(%979, %1034, %980, %981, %982, %983, %984), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
  %1036 : Device = prim::device(%1007)
  %1037 : Tensor = aten::to(%1035, %1036, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1038 : Tensor[] = prim::ListConstruct(%1037, %1032), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1039 : Tensor[] = aten::meshgrid(%1038), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/functional.py:344:0
  %shift_y.1 : Float(200, 272, strides=[1, 0], requires_grad=0, device=cpu), %shift_x.1 : Float(200, 272, strides=[0, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%1039), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1042 : int[] = prim::ListConstruct(%986), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shift_x.3 : Float(54400, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_x.1, %1042), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
  %1044 : int[] = prim::ListConstruct(%986), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shift_y.3 : Float(54400, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_y.1, %1044), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
  %1046 : Tensor[] = prim::ListConstruct(%shift_x.3, %shift_y.3, %shift_x.3, %shift_y.3), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shifts.1 : Float(54400, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%1046, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
  %1048 : int[] = prim::ListConstruct(%986, %987, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1049 : Float(54400, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%shifts.1, %1048), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1050 : int[] = prim::ListConstruct(%987, %986, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1051 : Float(1, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::view(%1007, %1050), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1052 : Float(54400, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::add(%1049, %1051, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1053 : int[] = prim::ListConstruct(%986, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %tensor.1 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1052, %1053), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1055 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_width.3, %988), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %1056 : Scalar = aten::ScalarImplicit(%1055), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1057 : Float(136, strides=[1], requires_grad=0, device=cpu) = aten::arange(%979, %1056, %989, %981, %982, %983, %984), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %1058 : Device = prim::device(%1005)
  %1059 : Tensor = aten::to(%1057, %1058, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1060 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_height.3, %988), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
  %1061 : Scalar = aten::ScalarImplicit(%1060), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1062 : Float(100, strides=[1], requires_grad=0, device=cpu) = aten::arange(%979, %1061, %989, %981, %982, %983, %984), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
  %1063 : Device = prim::device(%1005)
  %1064 : Tensor = aten::to(%1062, %1063, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1065 : Tensor[] = prim::ListConstruct(%1064, %1059), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1066 : Tensor[] = aten::meshgrid(%1065), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/functional.py:344:0
  %shift_y.5 : Float(100, 136, strides=[1, 0], requires_grad=0, device=cpu), %shift_x.5 : Float(100, 136, strides=[0, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%1066), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1069 : int[] = prim::ListConstruct(%986), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shift_x.7 : Float(13600, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_x.5, %1069), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
  %1071 : int[] = prim::ListConstruct(%986), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shift_y.7 : Float(13600, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_y.5, %1071), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
  %1073 : Tensor[] = prim::ListConstruct(%shift_x.7, %shift_y.7, %shift_x.7, %shift_y.7), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shifts.3 : Float(13600, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%1073, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
  %1075 : int[] = prim::ListConstruct(%986, %987, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1076 : Float(13600, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%shifts.3, %1075), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1077 : int[] = prim::ListConstruct(%987, %986, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1078 : Float(1, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::view(%1005, %1077), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1079 : Float(13600, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::add(%1076, %1078, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1080 : int[] = prim::ListConstruct(%986, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %tensor.5 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1079, %1080), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1082 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_width.5, %990), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %1083 : Scalar = aten::ScalarImplicit(%1082), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1084 : Float(68, strides=[1], requires_grad=0, device=cpu) = aten::arange(%979, %1083, %991, %981, %982, %983, %984), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %1085 : Device = prim::device(%1003)
  %1086 : Tensor = aten::to(%1084, %1085, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1087 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_height.5, %990), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
  %1088 : Scalar = aten::ScalarImplicit(%1087), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1089 : Float(50, strides=[1], requires_grad=0, device=cpu) = aten::arange(%979, %1088, %991, %981, %982, %983, %984), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
  %1090 : Device = prim::device(%1003)
  %1091 : Tensor = aten::to(%1089, %1090, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1092 : Tensor[] = prim::ListConstruct(%1091, %1086), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1093 : Tensor[] = aten::meshgrid(%1092), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/functional.py:344:0
  %shift_y.9 : Float(50, 68, strides=[1, 0], requires_grad=0, device=cpu), %shift_x.9 : Float(50, 68, strides=[0, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%1093), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1096 : int[] = prim::ListConstruct(%986), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shift_x.11 : Float(3400, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_x.9, %1096), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
  %1098 : int[] = prim::ListConstruct(%986), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shift_y.11 : Float(3400, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_y.9, %1098), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
  %1100 : Tensor[] = prim::ListConstruct(%shift_x.11, %shift_y.11, %shift_x.11, %shift_y.11), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shifts.5 : Float(3400, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%1100, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
  %1102 : int[] = prim::ListConstruct(%986, %987, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1103 : Float(3400, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%shifts.5, %1102), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1104 : int[] = prim::ListConstruct(%987, %986, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1105 : Float(1, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::view(%1003, %1104), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1106 : Float(3400, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::add(%1103, %1105, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1107 : int[] = prim::ListConstruct(%986, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %tensor.9 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1106, %1107), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1109 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_width.7, %992), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %1110 : Scalar = aten::ScalarImplicit(%1109), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1111 : Float(34, strides=[1], requires_grad=0, device=cpu) = aten::arange(%979, %1110, %993, %981, %982, %983, %984), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %1112 : Device = prim::device(%1001)
  %1113 : Tensor = aten::to(%1111, %1112, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1114 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_height.7, %992), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
  %1115 : Scalar = aten::ScalarImplicit(%1114), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1116 : Float(25, strides=[1], requires_grad=0, device=cpu) = aten::arange(%979, %1115, %993, %981, %982, %983, %984), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
  %1117 : Device = prim::device(%1001)
  %1118 : Tensor = aten::to(%1116, %1117, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1119 : Tensor[] = prim::ListConstruct(%1118, %1113), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1120 : Tensor[] = aten::meshgrid(%1119), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/functional.py:344:0
  %shift_y.13 : Float(25, 34, strides=[1, 0], requires_grad=0, device=cpu), %shift_x.13 : Float(25, 34, strides=[0, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%1120), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1123 : int[] = prim::ListConstruct(%986), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shift_x.15 : Float(850, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_x.13, %1123), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
  %1125 : int[] = prim::ListConstruct(%986), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shift_y.15 : Float(850, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_y.13, %1125), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
  %1127 : Tensor[] = prim::ListConstruct(%shift_x.15, %shift_y.15, %shift_x.15, %shift_y.15), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shifts.7 : Float(850, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%1127, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
  %1129 : int[] = prim::ListConstruct(%986, %987, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1130 : Float(850, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%shifts.7, %1129), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1131 : int[] = prim::ListConstruct(%987, %986, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1132 : Float(1, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::view(%1001, %1131), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1133 : Float(850, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::add(%1130, %1132, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1134 : int[] = prim::ListConstruct(%986, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %tensor.13 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1133, %1134), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1136 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_width, %994), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %1137 : Scalar = aten::ScalarImplicit(%1136), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1138 : Float(17, strides=[1], requires_grad=0, device=cpu) = aten::arange(%979, %1137, %995, %981, %982, %983, %984), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:44:0
  %1139 : Device = prim::device(%999)
  %1140 : Tensor = aten::to(%1138, %1139, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1141 : Long(requires_grad=0, device=cpu) = aten::mul(%grid_height, %994), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
  %1142 : Scalar = aten::ScalarImplicit(%1141), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1143 : Float(13, strides=[1], requires_grad=0, device=cpu) = aten::arange(%979, %1142, %995, %981, %982, %983, %984), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:48:0
  %1144 : Device = prim::device(%999)
  %1145 : Tensor = aten::to(%1143, %1144, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1146 : Tensor[] = prim::ListConstruct(%1145, %1140), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1147 : Tensor[] = aten::meshgrid(%1146), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/functional.py:344:0
  %shift_y.17 : Float(13, 17, strides=[1, 0], requires_grad=0, device=cpu), %shift_x.17 : Float(13, 17, strides=[0, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%1147), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1150 : int[] = prim::ListConstruct(%986), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shift_x : Float(221, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_x.17, %1150), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:53:0
  %1152 : int[] = prim::ListConstruct(%986), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shift_y : Float(221, strides=[1], requires_grad=0, device=cpu) = aten::reshape(%shift_y.17, %1152), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:54:0
  %1154 : Tensor[] = prim::ListConstruct(%shift_x, %shift_y, %shift_x, %shift_y), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %shifts : Float(221, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%1154, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:175:0
  %1156 : int[] = prim::ListConstruct(%986, %987, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1157 : Float(221, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%shifts, %1156), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1158 : int[] = prim::ListConstruct(%987, %986, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %1159 : Float(1, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::view(%999, %1158), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1160 : Float(221, 3, 4, strides=[12, 4, 1], requires_grad=0, device=cpu) = aten::add(%1157, %1159, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %1161 : int[] = prim::ListConstruct(%986, %980), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator
  %tensor.17 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1160, %1161), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/anchor_generator.py:177:0
  %tensor.3 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.1, %981, %984, %984, %985), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
  %tensor.7 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.5, %981, %984, %984, %985), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
  %tensor.11 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.9, %981, %984, %984, %985), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
  %tensor.15 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.13, %981, %984, %984, %985), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
  %tensor.19 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.17, %981, %984, %984, %985), scope: __module.model.proposal_generator/__module.model.proposal_generator.anchor_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
  %1168 : (Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu), Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu), Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu), Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu), Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%tensor.3, %tensor.7, %tensor.11, %tensor.15, %tensor.19)
  %1169 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu), %1170 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu), %1171 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu), %1172 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu), %1173 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = prim::TupleUnpack(%1168)
  %1174 : __torch__.torch.nn.modules.conv.___torch_mangle_131.Conv2d = prim::GetAttr[name="anchor_deltas"](%996)
  %1175 : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="objectness_logits"](%996)
  %1176 : __torch__.detectron2.layers.wrappers.___torch_mangle_130.Conv2d = prim::GetAttr[name="conv"](%996)
  %1177 : Tensor = prim::GetAttr[name="bias"](%1176)
  %1178 : Tensor = prim::GetAttr[name="weight"](%1176)
  %1179 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1180 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1181 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1182 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %input.111 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%69, %1178, %1177, %1179, %1180, %1181, %984, %1182, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %input.113 : Float(1, 256, 200, 272, strides=[13926400, 54400, 272, 1], requires_grad=0, device=cpu) = aten::relu(%input.111), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv/__module.model.proposal_generator.rpn_head.conv.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %1185 : Tensor = prim::GetAttr[name="bias"](%1175)
  %1186 : Tensor = prim::GetAttr[name="weight"](%1175)
  %1187 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1188 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1189 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1190 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %score.1 : Float(1, 3, 200, 272, strides=[163200, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%input.113, %1186, %1185, %1187, %1188, %1189, %984, %1190, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
  %1192 : Tensor = prim::GetAttr[name="bias"](%1174)
  %1193 : Tensor = prim::GetAttr[name="weight"](%1174)
  %1194 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1195 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1196 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1197 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %x.113 : Float(1, 12, 200, 272, strides=[652800, 54400, 272, 1], requires_grad=0, device=cpu) = aten::_convolution(%input.113, %1193, %1192, %1194, %1195, %1196, %984, %1197, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
  %1199 : Tensor = prim::GetAttr[name="bias"](%1176)
  %1200 : Tensor = prim::GetAttr[name="weight"](%1176)
  %1201 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1202 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1203 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1204 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %input.115 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%70, %1200, %1199, %1201, %1202, %1203, %984, %1204, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %input.117 : Float(1, 256, 100, 136, strides=[3481600, 13600, 136, 1], requires_grad=0, device=cpu) = aten::relu(%input.115), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv/__module.model.proposal_generator.rpn_head.conv.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %1207 : Tensor = prim::GetAttr[name="bias"](%1175)
  %1208 : Tensor = prim::GetAttr[name="weight"](%1175)
  %1209 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1210 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1211 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1212 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %score.3 : Float(1, 3, 100, 136, strides=[40800, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%input.117, %1208, %1207, %1209, %1210, %1211, %984, %1212, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
  %1214 : Tensor = prim::GetAttr[name="bias"](%1174)
  %1215 : Tensor = prim::GetAttr[name="weight"](%1174)
  %1216 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1217 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1218 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1219 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %x.115 : Float(1, 12, 100, 136, strides=[163200, 13600, 136, 1], requires_grad=0, device=cpu) = aten::_convolution(%input.117, %1215, %1214, %1216, %1217, %1218, %984, %1219, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
  %1221 : Tensor = prim::GetAttr[name="bias"](%1176)
  %1222 : Tensor = prim::GetAttr[name="weight"](%1176)
  %1223 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1224 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1225 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1226 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %input.119 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%71, %1222, %1221, %1223, %1224, %1225, %984, %1226, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %input.121 : Float(1, 256, 50, 68, strides=[870400, 3400, 68, 1], requires_grad=0, device=cpu) = aten::relu(%input.119), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv/__module.model.proposal_generator.rpn_head.conv.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %1229 : Tensor = prim::GetAttr[name="bias"](%1175)
  %1230 : Tensor = prim::GetAttr[name="weight"](%1175)
  %1231 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1232 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1233 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1234 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %score.5 : Float(1, 3, 50, 68, strides=[10200, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%input.121, %1230, %1229, %1231, %1232, %1233, %984, %1234, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
  %1236 : Tensor = prim::GetAttr[name="bias"](%1174)
  %1237 : Tensor = prim::GetAttr[name="weight"](%1174)
  %1238 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1239 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1240 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1241 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %x.117 : Float(1, 12, 50, 68, strides=[40800, 3400, 68, 1], requires_grad=0, device=cpu) = aten::_convolution(%input.121, %1237, %1236, %1238, %1239, %1240, %984, %1241, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
  %1243 : Tensor = prim::GetAttr[name="bias"](%1176)
  %1244 : Tensor = prim::GetAttr[name="weight"](%1176)
  %1245 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1246 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1247 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1248 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %input.123 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%77, %1244, %1243, %1245, %1246, %1247, %984, %1248, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %input.125 : Float(1, 256, 25, 34, strides=[217600, 850, 34, 1], requires_grad=0, device=cpu) = aten::relu(%input.123), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv/__module.model.proposal_generator.rpn_head.conv.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %1251 : Tensor = prim::GetAttr[name="bias"](%1175)
  %1252 : Tensor = prim::GetAttr[name="weight"](%1175)
  %1253 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1254 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1255 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1256 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %score.7 : Float(1, 3, 25, 34, strides=[2550, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%input.125, %1252, %1251, %1253, %1254, %1255, %984, %1256, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
  %1258 : Tensor = prim::GetAttr[name="bias"](%1174)
  %1259 : Tensor = prim::GetAttr[name="weight"](%1174)
  %1260 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1261 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1262 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1263 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %x.119 : Float(1, 12, 25, 34, strides=[10200, 850, 34, 1], requires_grad=0, device=cpu) = aten::_convolution(%input.125, %1259, %1258, %1260, %1261, %1262, %984, %1263, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
  %1265 : Tensor = prim::GetAttr[name="bias"](%1176)
  %1266 : Tensor = prim::GetAttr[name="weight"](%1176)
  %1267 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1268 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1269 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %1270 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv
  %input.127 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu) = aten::_convolution(%76, %1266, %1265, %1267, %1268, %1269, %984, %1270, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %input.129 : Float(1, 256, 13, 17, strides=[56576, 221, 17, 1], requires_grad=0, device=cpu) = aten::relu(%input.127), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.conv/__module.model.proposal_generator.rpn_head.conv.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %1273 : Tensor = prim::GetAttr[name="bias"](%1175)
  %1274 : Tensor = prim::GetAttr[name="weight"](%1175)
  %1275 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1276 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1277 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %1278 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits
  %score : Float(1, 3, 13, 17, strides=[663, 221, 17, 1], requires_grad=0, device=cpu) = aten::_convolution(%input.129, %1274, %1273, %1275, %1276, %1277, %984, %1278, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.objectness_logits # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
  %1280 : Tensor = prim::GetAttr[name="bias"](%1174)
  %1281 : Tensor = prim::GetAttr[name="weight"](%1174)
  %1282 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1283 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1284 : int[] = prim::ListConstruct(%987, %987), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %1285 : int[] = prim::ListConstruct(%982, %982), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas
  %x.121 : Float(1, 12, 13, 17, strides=[2652, 221, 17, 1], requires_grad=0, device=cpu) = aten::_convolution(%input.129, %1281, %1280, %1282, %1283, %1284, %984, %1285, %987, %984, %984, %975, %975), scope: __module.model.proposal_generator/__module.model.proposal_generator.rpn_head/__module.model.proposal_generator.rpn_head.anchor_deltas # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:440:0
  %1287 : (Float(1, 3, 200, 272, strides=[163200, 54400, 272, 1], requires_grad=0, device=cpu), Float(1, 3, 100, 136, strides=[40800, 13600, 136, 1], requires_grad=0, device=cpu), Float(1, 3, 50, 68, strides=[10200, 3400, 68, 1], requires_grad=0, device=cpu), Float(1, 3, 25, 34, strides=[2550, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 3, 13, 17, strides=[663, 221, 17, 1], requires_grad=0, device=cpu), Float(1, 12, 200, 272, strides=[652800, 54400, 272, 1], requires_grad=0, device=cpu), Float(1, 12, 100, 136, strides=[163200, 13600, 136, 1], requires_grad=0, device=cpu), Float(1, 12, 50, 68, strides=[40800, 3400, 68, 1], requires_grad=0, device=cpu), Float(1, 12, 25, 34, strides=[10200, 850, 34, 1], requires_grad=0, device=cpu), Float(1, 12, 13, 17, strides=[2652, 221, 17, 1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%score.1, %score.3, %score.5, %score.7, %score, %x.113, %x.115, %x.117, %x.119, %x.121)
  %1288 : Float(1, 3, 200, 272, strides=[163200, 54400, 272, 1], requires_grad=0, device=cpu), %1289 : Float(1, 3, 100, 136, strides=[40800, 13600, 136, 1], requires_grad=0, device=cpu), %1290 : Float(1, 3, 50, 68, strides=[10200, 3400, 68, 1], requires_grad=0, device=cpu), %1291 : Float(1, 3, 25, 34, strides=[2550, 850, 34, 1], requires_grad=0, device=cpu), %1292 : Float(1, 3, 13, 17, strides=[663, 221, 17, 1], requires_grad=0, device=cpu), %1293 : Float(1, 12, 200, 272, strides=[652800, 54400, 272, 1], requires_grad=0, device=cpu), %1294 : Float(1, 12, 100, 136, strides=[163200, 13600, 136, 1], requires_grad=0, device=cpu), %1295 : Float(1, 12, 50, 68, strides=[40800, 3400, 68, 1], requires_grad=0, device=cpu), %1296 : Float(1, 12, 25, 34, strides=[10200, 850, 34, 1], requires_grad=0, device=cpu), %1297 : Float(1, 12, 13, 17, strides=[2652, 221, 17, 1], requires_grad=0, device=cpu) = prim::TupleUnpack(%1287)
  %1298 : int[] = prim::ListConstruct(%982, %976, %977, %987), scope: __module.model.proposal_generator
  %1299 : Float(1, 200, 272, 3, strides=[163200, 272, 1, 54400], requires_grad=0, device=cpu) = aten::permute(%1288, %1298), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
  %logits_i.1 : Float(1, 163200, strides=[163200, 1], requires_grad=0, device=cpu) = aten::flatten(%1299, %987, %986), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
  %1301 : int[] = prim::ListConstruct(%982, %976, %977, %987), scope: __module.model.proposal_generator
  %1302 : Float(1, 100, 136, 3, strides=[40800, 136, 1, 13600], requires_grad=0, device=cpu) = aten::permute(%1289, %1301), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
  %logits_i.3 : Float(1, 40800, strides=[40800, 1], requires_grad=0, device=cpu) = aten::flatten(%1302, %987, %986), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
  %1304 : int[] = prim::ListConstruct(%982, %976, %977, %987), scope: __module.model.proposal_generator
  %1305 : Float(1, 50, 68, 3, strides=[10200, 68, 1, 3400], requires_grad=0, device=cpu) = aten::permute(%1290, %1304), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
  %logits_i.5 : Float(1, 10200, strides=[10200, 1], requires_grad=0, device=cpu) = aten::flatten(%1305, %987, %986), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
  %1307 : int[] = prim::ListConstruct(%982, %976, %977, %987), scope: __module.model.proposal_generator
  %1308 : Float(1, 25, 34, 3, strides=[2550, 34, 1, 850], requires_grad=0, device=cpu) = aten::permute(%1291, %1307), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
  %logits_i.7 : Float(1, 2550, strides=[2550, 1], requires_grad=0, device=cpu) = aten::flatten(%1308, %987, %986), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
  %1310 : int[] = prim::ListConstruct(%982, %976, %977, %987), scope: __module.model.proposal_generator
  %1311 : Float(1, 13, 17, 3, strides=[663, 17, 1, 221], requires_grad=0, device=cpu) = aten::permute(%1292, %1310), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
  %logits_i : Float(1, 663, strides=[663, 1], requires_grad=0, device=cpu) = aten::flatten(%1311, %987, %986), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:471:0
  %1313 : int = aten::size(%1293, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1314 : int = aten::size(%1293, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1315 : int = aten::size(%1293, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1316 : int[] = prim::ListConstruct(%1313, %986, %980, %1314, %1315), scope: __module.model.proposal_generator
  %1317 : Float(1, 3, 4, 200, 272, strides=[652800, 217600, 54400, 272, 1], requires_grad=0, device=cpu) = aten::view(%1293, %1316), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1318 : int[] = prim::ListConstruct(%982, %977, %980, %987, %976), scope: __module.model.proposal_generator
  %1319 : Float(1, 200, 272, 3, 4, strides=[652800, 272, 1, 217600, 54400], requires_grad=0, device=cpu) = aten::permute(%1317, %1318), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %pred_anchor_deltas_i.1 : Float(1, 163200, 4, strides=[652800, 4, 1], requires_grad=0, device=cpu) = aten::flatten(%1319, %987, %974), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1321 : int = aten::size(%1294, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1322 : int = aten::size(%1294, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1323 : int = aten::size(%1294, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1324 : int[] = prim::ListConstruct(%1321, %986, %980, %1322, %1323), scope: __module.model.proposal_generator
  %1325 : Float(1, 3, 4, 100, 136, strides=[163200, 54400, 13600, 136, 1], requires_grad=0, device=cpu) = aten::view(%1294, %1324), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1326 : int[] = prim::ListConstruct(%982, %977, %980, %987, %976), scope: __module.model.proposal_generator
  %1327 : Float(1, 100, 136, 3, 4, strides=[163200, 136, 1, 54400, 13600], requires_grad=0, device=cpu) = aten::permute(%1325, %1326), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %pred_anchor_deltas_i.3 : Float(1, 40800, 4, strides=[163200, 4, 1], requires_grad=0, device=cpu) = aten::flatten(%1327, %987, %974), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1329 : int = aten::size(%1295, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1330 : int = aten::size(%1295, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1331 : int = aten::size(%1295, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1332 : int[] = prim::ListConstruct(%1329, %986, %980, %1330, %1331), scope: __module.model.proposal_generator
  %1333 : Float(1, 3, 4, 50, 68, strides=[40800, 13600, 3400, 68, 1], requires_grad=0, device=cpu) = aten::view(%1295, %1332), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1334 : int[] = prim::ListConstruct(%982, %977, %980, %987, %976), scope: __module.model.proposal_generator
  %1335 : Float(1, 50, 68, 3, 4, strides=[40800, 68, 1, 13600, 3400], requires_grad=0, device=cpu) = aten::permute(%1333, %1334), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %pred_anchor_deltas_i.5 : Float(1, 10200, 4, strides=[40800, 4, 1], requires_grad=0, device=cpu) = aten::flatten(%1335, %987, %974), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1337 : int = aten::size(%1296, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1338 : int = aten::size(%1296, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1339 : int = aten::size(%1296, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1340 : int[] = prim::ListConstruct(%1337, %986, %980, %1338, %1339), scope: __module.model.proposal_generator
  %1341 : Float(1, 3, 4, 25, 34, strides=[10200, 3400, 850, 34, 1], requires_grad=0, device=cpu) = aten::view(%1296, %1340), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1342 : int[] = prim::ListConstruct(%982, %977, %980, %987, %976), scope: __module.model.proposal_generator
  %1343 : Float(1, 25, 34, 3, 4, strides=[10200, 34, 1, 3400, 850], requires_grad=0, device=cpu) = aten::permute(%1341, %1342), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %pred_anchor_deltas_i.7 : Float(1, 2550, 4, strides=[10200, 4, 1], requires_grad=0, device=cpu) = aten::flatten(%1343, %987, %974), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1345 : int = aten::size(%1297, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1346 : int = aten::size(%1297, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1347 : int = aten::size(%1297, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1348 : int[] = prim::ListConstruct(%1345, %986, %980, %1346, %1347), scope: __module.model.proposal_generator
  %1349 : Float(1, 3, 4, 13, 17, strides=[2652, 884, 221, 17, 1], requires_grad=0, device=cpu) = aten::view(%1297, %1348), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1350 : int[] = prim::ListConstruct(%982, %977, %980, %987, %976), scope: __module.model.proposal_generator
  %1351 : Float(1, 13, 17, 3, 4, strides=[2652, 17, 1, 884, 221], requires_grad=0, device=cpu) = aten::permute(%1349, %1350), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %pred_anchor_deltas_i : Float(1, 663, 4, strides=[2652, 4, 1], requires_grad=0, device=cpu) = aten::flatten(%1351, %987, %974), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:478:0
  %1353 : int = aten::size(%pred_anchor_deltas_i.1, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:534:0
  %1354 : int = aten::size(%1169, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
  %1355 : int[] = prim::ListConstruct(%986, %1354), scope: __module.model.proposal_generator
  %deltas.1 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_anchor_deltas_i.1, %1355), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
  %1357 : Float(1, 163200, 4, strides=[652800, 4, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1169, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %1358 : int[] = prim::ListConstruct(%1353, %986, %986), scope: __module.model.proposal_generator
  %1359 : Float(1, 163200, 4, strides=[652800, 4, 1], requires_grad=0, device=cpu) = aten::expand(%1357, %1358, %984), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %1360 : int[] = prim::ListConstruct(%986, %1354), scope: __module.model.proposal_generator
  %boxes.1 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1359, %1360), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %deltas.3 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%deltas.1, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
  %boxes.3 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.1, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
  %1364 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1365 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1364, %987, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1366 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1367 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1366, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %widths.1 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1365, %1367, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1369 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1370 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1369, %987, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1371 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1372 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1371, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %heights.1 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1370, %1372, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1374 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1375 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1374, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1376 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths.1, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %ctr_x.1 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::add(%1375, %1376, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1378 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1379 : Float(163200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1378, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1380 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights.1, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %ctr_y.1 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::add(%1379, %1380, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1382 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %1383 : Float(163200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1382, %987, %982, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %dx.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1383, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %1385 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %1386 : Float(163200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1385, %987, %987, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %dy.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1386, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %1388 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %1389 : Float(163200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1388, %987, %976, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %dw.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1389, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %1391 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %1392 : Float(163200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1391, %987, %977, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dh.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1392, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dw.3 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.1, %985, %970), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
  %dh.3 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.1, %985, %970), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
  %1396 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.1, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1397 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1396, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1398 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx.1, %1397), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1399 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x.1, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1400 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1399, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %pred_ctr_x.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1398, %1400, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1402 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.1, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1403 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1402, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1404 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy.1, %1403), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1405 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y.1, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1406 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1405, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %pred_ctr_y.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1404, %1406, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1408 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw.3), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1409 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.1, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1410 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1409, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %pred_w.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1408, %1410), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1412 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh.3), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1413 : Float(163200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.1, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1414 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1413, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %pred_h.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1412, %1414), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1416 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.1, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %x1.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x.1, %1416, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %1418 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.1, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %y1.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y.1, %1418, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %1420 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.1, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %x2.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x.1, %1420, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %1422 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.1, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %y2.1 : Float(163200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y.1, %1422, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %1424 : Tensor[] = prim::ListConstruct(%x1.1, %y1.1, %x2.1, %y2.1), scope: __module.model.proposal_generator
  %pred_boxes.1 : Float(163200, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%1424, %986), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
  %1426 : int = aten::size(%deltas.3, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1427 : int = aten::size(%deltas.3, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1428 : int[] = prim::ListConstruct(%1426, %1427), scope: __module.model.proposal_generator
  %proposals_i.1 : Float(163200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes.1, %1428), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1430 : int[] = prim::ListConstruct(%1353, %986, %1354), scope: __module.model.proposal_generator
  %proposals_i.11 : Float(1, 163200, 4, strides=[652800, 4, 1], requires_grad=0, device=cpu) = aten::view(%proposals_i.1, %1430), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
  %1432 : int = aten::size(%1170, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
  %1433 : int[] = prim::ListConstruct(%986, %1432), scope: __module.model.proposal_generator
  %deltas.5 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_anchor_deltas_i.3, %1433), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
  %1435 : Float(1, 40800, 4, strides=[163200, 4, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1170, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %1436 : int[] = prim::ListConstruct(%1353, %986, %986), scope: __module.model.proposal_generator
  %1437 : Float(1, 40800, 4, strides=[163200, 4, 1], requires_grad=0, device=cpu) = aten::expand(%1435, %1436, %984), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %1438 : int[] = prim::ListConstruct(%986, %1432), scope: __module.model.proposal_generator
  %boxes.5 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1437, %1438), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %deltas.7 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%deltas.5, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
  %boxes.7 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.5, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
  %1442 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1443 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%1442, %987, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1444 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1445 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%1444, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %widths.3 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1443, %1445, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1447 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1448 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%1447, %987, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1449 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1450 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%1449, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %heights.3 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1448, %1450, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1452 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1453 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%1452, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1454 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths.3, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %ctr_x.3 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::add(%1453, %1454, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1456 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1457 : Float(40800, strides=[4], requires_grad=0, device=cpu) = aten::select(%1456, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1458 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights.3, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %ctr_y.3 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::add(%1457, %1458, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1460 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %1461 : Float(40800, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1460, %987, %982, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %dx.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1461, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %1463 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %1464 : Float(40800, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1463, %987, %987, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %dy.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1464, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %1466 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %1467 : Float(40800, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1466, %987, %976, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %dw.5 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1467, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %1469 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %1470 : Float(40800, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1469, %987, %977, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dh.5 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1470, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dw.7 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.5, %985, %970), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
  %dh.7 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.5, %985, %970), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
  %1474 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1475 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1474, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1476 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx.3, %1475), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1477 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1478 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1477, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %pred_ctr_x.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1476, %1478, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1480 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1481 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1480, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1482 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy.3, %1481), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1483 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1484 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1483, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %pred_ctr_y.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1482, %1484, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1486 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw.7), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1487 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1488 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1487, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %pred_w.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1486, %1488), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1490 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh.7), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1491 : Float(40800, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.3, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1492 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1491, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %pred_h.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1490, %1492), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1494 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.3, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %x1.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x.3, %1494, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %1496 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.3, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %y1.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y.3, %1496, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %1498 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.3, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %x2.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x.3, %1498, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %1500 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.3, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %y2.3 : Float(40800, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y.3, %1500, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %1502 : Tensor[] = prim::ListConstruct(%x1.3, %y1.3, %x2.3, %y2.3), scope: __module.model.proposal_generator
  %pred_boxes.3 : Float(40800, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%1502, %986), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
  %1504 : int = aten::size(%deltas.7, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1505 : int = aten::size(%deltas.7, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1506 : int[] = prim::ListConstruct(%1504, %1505), scope: __module.model.proposal_generator
  %proposals_i.3 : Float(40800, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes.3, %1506), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1508 : int[] = prim::ListConstruct(%1353, %986, %1432), scope: __module.model.proposal_generator
  %proposals_i.13 : Float(1, 40800, 4, strides=[163200, 4, 1], requires_grad=0, device=cpu) = aten::view(%proposals_i.3, %1508), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
  %1510 : int = aten::size(%1171, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
  %1511 : int[] = prim::ListConstruct(%986, %1510), scope: __module.model.proposal_generator
  %deltas.9 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_anchor_deltas_i.5, %1511), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
  %1513 : Float(1, 10200, 4, strides=[40800, 4, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1171, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %1514 : int[] = prim::ListConstruct(%1353, %986, %986), scope: __module.model.proposal_generator
  %1515 : Float(1, 10200, 4, strides=[40800, 4, 1], requires_grad=0, device=cpu) = aten::expand(%1513, %1514, %984), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %1516 : int[] = prim::ListConstruct(%986, %1510), scope: __module.model.proposal_generator
  %boxes.9 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1515, %1516), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %deltas.11 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%deltas.9, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
  %boxes.11 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.9, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
  %1520 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1521 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1520, %987, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1522 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1523 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1522, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %widths.5 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1521, %1523, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1525 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1526 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1525, %987, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1527 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1528 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1527, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %heights.5 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1526, %1528, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1530 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1531 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1530, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1532 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths.5, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %ctr_x.5 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::add(%1531, %1532, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1534 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.11, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1535 : Float(10200, strides=[4], requires_grad=0, device=cpu) = aten::select(%1534, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1536 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights.5, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %ctr_y.5 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::add(%1535, %1536, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1538 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.11, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %1539 : Float(10200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1538, %987, %982, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %dx.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1539, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %1541 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.11, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %1542 : Float(10200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1541, %987, %987, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %dy.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1542, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %1544 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.11, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %1545 : Float(10200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1544, %987, %976, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %dw.9 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1545, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %1547 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.11, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %1548 : Float(10200, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1547, %987, %977, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dh.9 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1548, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dw.11 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.9, %985, %970), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
  %dh.11 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.9, %985, %970), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
  %1552 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.5, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1553 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1552, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1554 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx.5, %1553), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1555 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x.5, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1556 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1555, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %pred_ctr_x.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1554, %1556, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1558 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.5, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1559 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1558, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1560 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy.5, %1559), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1561 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y.5, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1562 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1561, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %pred_ctr_y.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1560, %1562, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1564 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw.11), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1565 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.5, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1566 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1565, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %pred_w.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1564, %1566), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1568 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh.11), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1569 : Float(10200, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.5, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1570 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1569, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %pred_h.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1568, %1570), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1572 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.5, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %x1.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x.5, %1572, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %1574 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.5, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %y1.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y.5, %1574, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %1576 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.5, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %x2.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x.5, %1576, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %1578 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.5, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %y2.5 : Float(10200, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y.5, %1578, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %1580 : Tensor[] = prim::ListConstruct(%x1.5, %y1.5, %x2.5, %y2.5), scope: __module.model.proposal_generator
  %pred_boxes.5 : Float(10200, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%1580, %986), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
  %1582 : int = aten::size(%deltas.11, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1583 : int = aten::size(%deltas.11, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1584 : int[] = prim::ListConstruct(%1582, %1583), scope: __module.model.proposal_generator
  %proposals_i.5 : Float(10200, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes.5, %1584), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1586 : int[] = prim::ListConstruct(%1353, %986, %1510), scope: __module.model.proposal_generator
  %proposals_i.15 : Float(1, 10200, 4, strides=[40800, 4, 1], requires_grad=0, device=cpu) = aten::view(%proposals_i.5, %1586), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
  %1588 : int = aten::size(%1172, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
  %1589 : int[] = prim::ListConstruct(%986, %1588), scope: __module.model.proposal_generator
  %deltas.13 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_anchor_deltas_i.7, %1589), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
  %1591 : Float(1, 2550, 4, strides=[10200, 4, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1172, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %1592 : int[] = prim::ListConstruct(%1353, %986, %986), scope: __module.model.proposal_generator
  %1593 : Float(1, 2550, 4, strides=[10200, 4, 1], requires_grad=0, device=cpu) = aten::expand(%1591, %1592, %984), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %1594 : int[] = prim::ListConstruct(%986, %1588), scope: __module.model.proposal_generator
  %boxes.13 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1593, %1594), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %deltas.15 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%deltas.13, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
  %boxes.15 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.13, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
  %1598 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1599 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1598, %987, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1600 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1601 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1600, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %widths.7 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1599, %1601, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1603 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1604 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1603, %987, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1605 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1606 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1605, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %heights.7 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1604, %1606, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1608 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1609 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1608, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1610 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths.7, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %ctr_x.7 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::add(%1609, %1610, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1612 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.15, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1613 : Float(2550, strides=[4], requires_grad=0, device=cpu) = aten::select(%1612, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1614 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights.7, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %ctr_y.7 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::add(%1613, %1614, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1616 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.15, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %1617 : Float(2550, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1616, %987, %982, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %dx.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1617, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %1619 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.15, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %1620 : Float(2550, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1619, %987, %987, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %dy.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1620, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %1622 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.15, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %1623 : Float(2550, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1622, %987, %976, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %dw.13 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1623, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %1625 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.15, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %1626 : Float(2550, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1625, %987, %977, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dh.13 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1626, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dw.15 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.13, %985, %970), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
  %dh.15 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.13, %985, %970), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
  %1630 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1631 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1630, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1632 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx.7, %1631), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1633 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1634 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1633, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %pred_ctr_x.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1632, %1634, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1636 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1637 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1636, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1638 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy.7, %1637), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1639 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1640 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1639, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %pred_ctr_y.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1638, %1640, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1642 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw.15), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1643 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1644 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1643, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %pred_w.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1642, %1644), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1646 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh.15), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1647 : Float(2550, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.7, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1648 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1647, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %pred_h.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1646, %1648), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1650 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.7, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %x1.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x.7, %1650, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %1652 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.7, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %y1.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y.7, %1652, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %1654 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.7, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %x2.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x.7, %1654, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %1656 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.7, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %y2.7 : Float(2550, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y.7, %1656, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %1658 : Tensor[] = prim::ListConstruct(%x1.7, %y1.7, %x2.7, %y2.7), scope: __module.model.proposal_generator
  %pred_boxes.7 : Float(2550, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%1658, %986), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
  %1660 : int = aten::size(%deltas.15, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1661 : int = aten::size(%deltas.15, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1662 : int[] = prim::ListConstruct(%1660, %1661), scope: __module.model.proposal_generator
  %proposals_i.7 : Float(2550, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes.7, %1662), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1664 : int[] = prim::ListConstruct(%1353, %986, %1588), scope: __module.model.proposal_generator
  %proposals_i.17 : Float(1, 2550, 4, strides=[10200, 4, 1], requires_grad=0, device=cpu) = aten::view(%proposals_i.7, %1664), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
  %1666 : int = aten::size(%1173, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:538:0
  %1667 : int[] = prim::ListConstruct(%986, %1666), scope: __module.model.proposal_generator
  %deltas.17 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_anchor_deltas_i, %1667), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:539:0
  %1669 : Float(1, 663, 4, strides=[2652, 4, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1173, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %1670 : int[] = prim::ListConstruct(%1353, %986, %986), scope: __module.model.proposal_generator
  %1671 : Float(1, 663, 4, strides=[2652, 4, 1], requires_grad=0, device=cpu) = aten::expand(%1669, %1670, %984), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %1672 : int[] = prim::ListConstruct(%986, %1666), scope: __module.model.proposal_generator
  %boxes.17 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%1671, %1672), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:541:0
  %deltas.19 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%deltas.17, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
  %boxes.19 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.17, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
  %1676 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1677 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1676, %987, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1678 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1679 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1678, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %widths.9 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1677, %1679, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %1681 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1682 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1681, %987, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1683 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1684 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1683, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %heights.9 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1682, %1684, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %1686 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1687 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1686, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1688 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths.9, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %ctr_x.9 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::add(%1687, %1688, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1690 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.19, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1691 : Float(663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1690, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1692 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights.9, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %ctr_y.9 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::add(%1691, %1692, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %1694 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.19, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %1695 : Float(663, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1694, %987, %982, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %dx.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1695, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %1697 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.19, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %1698 : Float(663, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1697, %987, %987, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %dy.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1698, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %1700 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.19, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %1701 : Float(663, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1700, %987, %976, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %dw.17 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1701, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %1703 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas.19, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %1704 : Float(663, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%1703, %987, %977, %973, %980), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dh.17 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%1704, %971), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dw.19 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.17, %985, %970), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
  %dh.19 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.17, %985, %970), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
  %1708 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.9, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1709 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1708, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1710 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx.9, %1709), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1711 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x.9, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1712 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1711, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %pred_ctr_x.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1710, %1712, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %1714 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.9, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1715 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1714, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1716 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy.9, %1715), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1717 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y.9, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1718 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1717, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %pred_ctr_y.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%1716, %1718, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %1720 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw.19), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1721 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths.9, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1722 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1721, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %pred_w.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1720, %1722), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %1724 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh.19), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1725 : Float(663, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights.9, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1726 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1725, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %pred_h.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%1724, %1726), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %1728 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.9, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %x1.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x.9, %1728, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %1730 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.9, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %y1.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y.9, %1730, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %1732 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w.9, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %x2.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x.9, %1732, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %1734 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h.9, %972), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %y2.9 : Float(663, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y.9, %1734, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %1736 : Tensor[] = prim::ListConstruct(%x1.9, %y1.9, %x2.9, %y2.9), scope: __module.model.proposal_generator
  %pred_boxes.9 : Float(663, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%1736, %986), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
  %1738 : int = aten::size(%deltas.19, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1739 : int = aten::size(%deltas.19, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1740 : int[] = prim::ListConstruct(%1738, %1739), scope: __module.model.proposal_generator
  %proposals_i.9 : Float(663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes.9, %1740), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %1742 : int[] = prim::ListConstruct(%1353, %986, %1666), scope: __module.model.proposal_generator
  %proposals_i : Float(1, 663, 4, strides=[2652, 4, 1], requires_grad=0, device=cpu) = aten::view(%proposals_i.9, %1742), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/rpn.py:544:0
  %1744 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::arange(%987, %985, %982, %983, %984), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:71:0
  %1745 : Device = prim::device(%proposals_i.11)
  %batch_idx : Tensor = aten::to(%1744, %1745, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1747 : int = aten::size(%logits_i.1, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
  %Hi_Wi_A.1 : Long(device=cpu) = prim::NumToTensor(%1747), scope: __module.model.proposal_generator
  %num_proposals_i.1 : Long(requires_grad=0, device=cpu) = aten::clamp(%Hi_Wi_A.1, %985, %969), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
  %1750 : int = aten::Int(%num_proposals_i.1), scope: __module.model.proposal_generator
  %1751 : int = aten::Int(%num_proposals_i.1), scope: __module.model.proposal_generator
  %1752 : Float(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu), %topk_idx.1 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::topk(%logits_i.1, %1751, %987, %975, %975), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
  %1754 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::slice(%batch_idx, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1755 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1754, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1756 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%1755, %980, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %topk_idx.3 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::to(%topk_idx.1, %980, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1758 : Tensor?[] = prim::ListConstruct(%1756, %topk_idx.3), scope: __module.model.proposal_generator
  %1759 : Float(1, 1000, 4, strides=[4000, 4, 1], requires_grad=0, device=cpu) = aten::index(%proposals_i.11, %1758), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1760 : int[] = prim::ListConstruct(%1750), scope: __module.model.proposal_generator
  %1761 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::full(%1760, %982, %980, %982, %983, %984), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
  %1762 : Device = prim::device(%proposals_i.11)
  %1763 : Tensor = aten::to(%1761, %1762, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1764 : int = aten::size(%logits_i.3, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
  %Hi_Wi_A.3 : Long(device=cpu) = prim::NumToTensor(%1764), scope: __module.model.proposal_generator
  %num_proposals_i.3 : Long(requires_grad=0, device=cpu) = aten::clamp(%Hi_Wi_A.3, %985, %969), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
  %1767 : int = aten::Int(%num_proposals_i.3), scope: __module.model.proposal_generator
  %1768 : int = aten::Int(%num_proposals_i.3), scope: __module.model.proposal_generator
  %1769 : Float(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu), %topk_idx.5 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::topk(%logits_i.3, %1768, %987, %975, %975), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
  %1771 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::slice(%batch_idx, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1772 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1771, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1773 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%1772, %980, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %topk_idx.7 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::to(%topk_idx.5, %980, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1775 : Tensor?[] = prim::ListConstruct(%1773, %topk_idx.7), scope: __module.model.proposal_generator
  %1776 : Float(1, 1000, 4, strides=[4000, 4, 1], requires_grad=0, device=cpu) = aten::index(%proposals_i.13, %1775), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1777 : int[] = prim::ListConstruct(%1767), scope: __module.model.proposal_generator
  %1778 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::full(%1777, %987, %980, %982, %983, %984), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
  %1779 : Device = prim::device(%proposals_i.11)
  %1780 : Tensor = aten::to(%1778, %1779, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1781 : int = aten::size(%logits_i.5, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
  %Hi_Wi_A.5 : Long(device=cpu) = prim::NumToTensor(%1781), scope: __module.model.proposal_generator
  %num_proposals_i.5 : Long(requires_grad=0, device=cpu) = aten::clamp(%Hi_Wi_A.5, %985, %969), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
  %1784 : int = aten::Int(%num_proposals_i.5), scope: __module.model.proposal_generator
  %1785 : int = aten::Int(%num_proposals_i.5), scope: __module.model.proposal_generator
  %1786 : Float(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu), %topk_idx.9 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::topk(%logits_i.5, %1785, %987, %975, %975), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
  %1788 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::slice(%batch_idx, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1789 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1788, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1790 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%1789, %980, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %topk_idx.11 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::to(%topk_idx.9, %980, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1792 : Tensor?[] = prim::ListConstruct(%1790, %topk_idx.11), scope: __module.model.proposal_generator
  %1793 : Float(1, 1000, 4, strides=[4000, 4, 1], requires_grad=0, device=cpu) = aten::index(%proposals_i.15, %1792), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1794 : int[] = prim::ListConstruct(%1784), scope: __module.model.proposal_generator
  %1795 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::full(%1794, %976, %980, %982, %983, %984), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
  %1796 : Device = prim::device(%proposals_i.11)
  %1797 : Tensor = aten::to(%1795, %1796, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1798 : int = aten::size(%logits_i.7, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
  %Hi_Wi_A.7 : Long(device=cpu) = prim::NumToTensor(%1798), scope: __module.model.proposal_generator
  %num_proposals_i.7 : Long(requires_grad=0, device=cpu) = aten::clamp(%Hi_Wi_A.7, %985, %969), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
  %1801 : int = aten::Int(%num_proposals_i.7), scope: __module.model.proposal_generator
  %1802 : int = aten::Int(%num_proposals_i.7), scope: __module.model.proposal_generator
  %1803 : Float(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu), %topk_idx.13 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::topk(%logits_i.7, %1802, %987, %975, %975), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
  %1805 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::slice(%batch_idx, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1806 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1805, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1807 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%1806, %980, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %topk_idx.15 : Long(1, 1000, strides=[1000, 1], requires_grad=0, device=cpu) = aten::to(%topk_idx.13, %980, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1809 : Tensor?[] = prim::ListConstruct(%1807, %topk_idx.15), scope: __module.model.proposal_generator
  %1810 : Float(1, 1000, 4, strides=[4000, 4, 1], requires_grad=0, device=cpu) = aten::index(%proposals_i.17, %1809), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1811 : int[] = prim::ListConstruct(%1801), scope: __module.model.proposal_generator
  %1812 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::full(%1811, %977, %980, %982, %983, %984), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
  %1813 : Device = prim::device(%proposals_i.11)
  %1814 : Tensor = aten::to(%1812, %1813, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1815 : int = aten::size(%logits_i, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:73:0
  %Hi_Wi_A : Long(device=cpu) = prim::NumToTensor(%1815), scope: __module.model.proposal_generator
  %num_proposals_i : Long(requires_grad=0, device=cpu) = aten::clamp(%Hi_Wi_A, %985, %969), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:75:0
  %1818 : int = aten::Int(%num_proposals_i), scope: __module.model.proposal_generator
  %1819 : int = aten::Int(%num_proposals_i), scope: __module.model.proposal_generator
  %1820 : Float(1, 663, strides=[663, 1], requires_grad=0, device=cpu), %topk_idx.17 : Long(1, 663, strides=[663, 1], requires_grad=0, device=cpu) = aten::topk(%logits_i, %1819, %987, %975, %975), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:79:0
  %1822 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::slice(%batch_idx, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1823 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%1822, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1824 : Long(1, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%1823, %980, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %topk_idx : Long(1, 663, strides=[663, 1], requires_grad=0, device=cpu) = aten::to(%topk_idx.17, %980, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1826 : Tensor?[] = prim::ListConstruct(%1824, %topk_idx), scope: __module.model.proposal_generator
  %1827 : Float(1, 663, 4, strides=[2652, 4, 1], requires_grad=0, device=cpu) = aten::index(%proposals_i, %1826), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:82:0
  %1828 : int[] = prim::ListConstruct(%1818), scope: __module.model.proposal_generator
  %1829 : Long(663, strides=[1], requires_grad=0, device=cpu) = aten::full(%1828, %980, %980, %982, %983, %984), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:88:0
  %1830 : Device = prim::device(%proposals_i.11)
  %1831 : Tensor = aten::to(%1829, %1830, %985, %984, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:162:11
  %1832 : Tensor[] = prim::ListConstruct(%1752, %1769, %1786, %1803, %1820), scope: __module.model.proposal_generator
  %topk_scores : Float(1, 4663, strides=[4663, 1], requires_grad=0, device=cpu) = aten::cat(%1832, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:57:0
  %1834 : Tensor[] = prim::ListConstruct(%1759, %1776, %1793, %1810, %1827), scope: __module.model.proposal_generator
  %topk_proposals : Float(1, 4663, 4, strides=[18652, 4, 1], requires_grad=0, device=cpu) = aten::cat(%1834, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:57:0
  %1836 : Tensor[] = prim::ListConstruct(%1763, %1780, %1797, %1814, %1831), scope: __module.model.proposal_generator
  %level_ids : Long(4663, strides=[1], requires_grad=0, device=cpu) = aten::cat(%1836, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:57:0
  %tensor.21 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::select(%topk_proposals, %982, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:101:0
  %tensor.23 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.21, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
  %scores_per_img.1 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::select(%topk_scores, %982, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:102:0
  %1841 : Tensor[] = aten::unbind(%image_size, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:613:0
  %h.1 : Long(requires_grad=0, device=cpu), %w.1 : Long(requires_grad=0, device=cpu) = prim::ListUnpack(%1841), scope: __module.model.proposal_generator
  %1844 : Scalar = aten::ScalarImplicit(%h.1), scope: __module.model.proposal_generator
  %1845 : Scalar = aten::ScalarImplicit(%w.1), scope: __module.model.proposal_generator
  %1846 : Scalar = aten::ScalarImplicit(%h.1), scope: __module.model.proposal_generator
  %1847 : Scalar = aten::ScalarImplicit(%w.1), scope: __module.model.proposal_generator
  %1848 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.23, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
  %1849 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1848, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
  %x1.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%1849, %982, %1847), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
  %1851 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.23, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
  %1852 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1851, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
  %y1.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%1852, %982, %1846), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
  %1854 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.23, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
  %1855 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1854, %987, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
  %x2.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%1855, %982, %1845), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
  %1857 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.23, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
  %1858 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1857, %987, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
  %y2.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%1858, %982, %1844), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
  %1860 : Tensor[] = prim::ListConstruct(%x1.11, %y1.11, %x2.11, %y2.11), scope: __module.model.proposal_generator
  %box : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%1860, %986), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:197:0
  %1862 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%box, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
  %1863 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1862, %987, %976), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
  %1864 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%box, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
  %1865 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1864, %987, %982), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
  %widths.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1863, %1865, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:210:0
  %1867 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%box, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
  %1868 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1867, %987, %977), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
  %1869 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%box, %982, %982, %973, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
  %1870 : Float(4663, strides=[4], requires_grad=0, device=cpu) = aten::select(%1869, %987, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
  %heights.11 : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1868, %1870, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:211:0
  %1872 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::gt(%widths.11, %979), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:212:0
  %1873 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::gt(%heights.11, %979), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:212:0
  %item.1 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::__and__(%1872, %1873), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:212:0
  %item.3 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::to(%item.1, %968, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
  %1876 : Tensor?[] = prim::ListConstruct(%item.3), scope: __module.model.proposal_generator
  %tensor.25 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::index(%box, %1876), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
  %tensor.27 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.25, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
  %keep.1 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::to(%item.3, %968, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
  %1880 : Tensor?[] = prim::ListConstruct(%keep.1), scope: __module.model.proposal_generator
  %scores_per_img : Float(4663, strides=[1], requires_grad=0, device=cpu) = aten::index(%scores_per_img.1, %1880), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
  %keep.4 : Bool(4663, strides=[1], requires_grad=0, device=cpu) = aten::to(%keep.1, %968, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
  %1883 : Tensor?[] = prim::ListConstruct(%keep.4), scope: __module.model.proposal_generator
  %1884 : Long(4663, strides=[1], requires_grad=0, device=cpu) = aten::index(%level_ids, %1883), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:119:0
  %1885 : Float(4663, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.27, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/nms.py:20:0
  %1886 : int = aten::numel(%1885) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:82:7
  %1887 : bool = aten::eq(%1886, %982) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:82:7
  %keep.5 : Tensor = prim::If(%1887) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:82:4
    block0():
      %1889 : Device = prim::device(%1885)
      %1890 : int[] = prim::ListConstruct(%982)
      %1891 : Tensor = aten::empty(%1890, %980, %985, %1889, %985, %985) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:83:15
      -> (%1891)
    block1():
      %max_coordinate.4 : Tensor = aten::max(%1885) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:84:21
      %1893 : Tensor = aten::to(%1884, %1885, %984, %984, %985) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:85:14
      %1894 : Tensor = aten::tensor(%987, %985, %985, %984) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:85:49
      %1895 : Tensor = aten::to(%1894, %1885, %984, %984, %985) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:85:49
      %1896 : Tensor = aten::add(%max_coordinate.4, %1895, %987) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:85:32
      %offsets.4 : Tensor = aten::mul(%1893, %1896) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:85:14
      %1898 : Tensor = aten::slice(%offsets.4, %982, %985, %985, %987) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:86:28
      %1899 : Tensor = aten::unsqueeze(%1898, %987) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:86:28
      %boxes_for_nms.4 : Tensor = aten::add(%1885, %1899, %987) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:86:20
      %keep.6 : Tensor = torchvision::nms(%boxes_for_nms.4, %scores_per_img, %967) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:35:11
      -> (%keep.6)
  %item.5 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%keep.5, %982, %982, %969, %987), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py:129:0
  %item : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::to(%item.5, %980, %982, %983, %985, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
  %1904 : Tensor?[] = prim::ListConstruct(%item), scope: __module.model.proposal_generator
  %tensor.29 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::index(%1885, %1904), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:235:0
  %tensor.31 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.29, %981, %984, %984, %985), scope: __module.model.proposal_generator # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
  %1907 : int = prim::Constant[value=14](), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
  %1908 : int = prim::Constant[value=100](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:168:0
  %1909 : float = prim::Constant[value=0.5](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
  %1910 : int = prim::Constant[value=11](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:0
  %1911 : float = prim::Constant[value=0.050000000000000003](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:155:0
  %1912 : float = prim::Constant[value=4.1351665567423561](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
  %1913 : Double(requires_grad=0, device=cpu) = prim::Constant[value={5}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %1914 : Double(requires_grad=0, device=cpu) = prim::Constant[value={10}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %1915 : Double(requires_grad=0, device=cpu) = prim::Constant[value={0.5}](), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %1916 : int = prim::Constant[value=-1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.flatten # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/flatten.py:40:0
  %1917 : int = prim::Constant[value=0](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:95:0
  %1918 : int = prim::Constant[value=1]() # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:69:46
  %1919 : NoneType = prim::Constant()
  %1920 : bool = prim::Constant[value=0]()
  %1921 : int = prim::Constant[value=9223372036854775807](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1922 : int = prim::Constant[value=2](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1923 : int = prim::Constant[value=3](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1924 : Long(requires_grad=0, device=cpu) = prim::Constant[value={224}](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %1925 : Double(requires_grad=0, device=cpu) = prim::Constant[value={1e-08}](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %1926 : Long(requires_grad=0, device=cpu) = prim::Constant[value={4}](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %1927 : int = prim::Constant[value=5](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:58:0
  %1928 : int = prim::Constant[value=4](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
  %1929 : Long(requires_grad=0, device=cpu) = prim::Constant[value={2}](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
  %1930 : int = prim::Constant[value=256](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
  %1931 : int = prim::Constant[value=7](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/jit/_trace.py:1115:0
  %1932 : Device = prim::Constant[value="cpu"](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %1933 : bool = prim::Constant[value=1](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %1934 : float = prim::Constant[value=0.25](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %1935 : int = prim::Constant[value=6](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
  %1936 : float = prim::Constant[value=0.125](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %1937 : float = prim::Constant[value=0.0625](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %1938 : float = prim::Constant[value=0.03125](), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %1939 : __torch__.detectron2.modeling.roi_heads.mask_head.MaskRCNNConvUpsampleHead = prim::GetAttr[name="mask_head"](%3)
  %1940 : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%3)
  %1941 : __torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead = prim::GetAttr[name="box_head"](%3)
  %1942 : Tensor[] = prim::ListConstruct(%tensor.31), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %1943 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::cat(%1942, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:95:0
  %1944 : int = aten::size(%tensor.31, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
  %1945 : Long(device=cpu) = prim::NumToTensor(%1944), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %1946 : Tensor[] = prim::ListConstruct(%1945), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %1947 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::stack(%1946, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:34:0
  %1948 : Device = prim::device(%1943)
  %sizes.6 : Tensor = aten::to(%1947, %1919, %1919, %1948, %1919, %1920, %1920, %1919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:65:12
  %1950 : int = aten::len(%sizes.6) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:67:21
  %1951 : int = prim::dtype(%1943)
  %1952 : Device = prim::device(%1943)
  %1953 : Tensor = aten::arange(%1950, %1951, %1919, %1952, %1919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:67:8
  %indices.2 : Tensor = aten::repeat_interleave(%1953, %sizes.6, %1919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:66:14
  %1955 : Tensor = aten::slice(%indices.2, %1917, %1919, %1919, %1918) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:69:16
  %1956 : Tensor = aten::unsqueeze(%1955, %1918) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:69:16
  %1957 : Tensor[] = prim::ListConstruct(%1956, %1943)
  %pooler_fmt_boxes.1 : Tensor = aten::cat(%1957, %1918) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:57:11
  %1959 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.31, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1960 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%1959, %1918, %1922), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1961 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.31, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1962 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%1961, %1918, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1963 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1960, %1962, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1964 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.31, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1965 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%1964, %1918, %1923), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1966 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.31, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1967 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%1966, %1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1968 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1965, %1967, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %1969 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::mul(%1963, %1968), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %box_sizes.1 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::sqrt(%1969), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:51:0
  %1971 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::div(%box_sizes.1, %1924), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %1972 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::add(%1971, %1925, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %1973 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::log2(%1972), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %1974 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::add(%1973, %1926, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %level_assignments.1 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::floor(%1974), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %level_assignments.3 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%level_assignments.1, %1922, %1927), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:58:0
  %1977 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::to(%level_assignments.3, %1928, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
  %level_assignments.5 : Long(1000, strides=[1], requires_grad=0, device=cpu) = aten::sub(%1977, %1929, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
  %1979 : int[] = aten::size(%pooler_fmt_boxes.1) # <string>:7:9
  %1980 : int = aten::__getitem__(%1979, %1917) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:109:14
  %1981 : int = prim::dtype(%69)
  %1982 : Device = prim::device(%69)
  %1983 : int[] = prim::ListConstruct(%1980, %1930, %1931, %1931)
  %output.1 : Tensor = aten::zeros(%1983, %1981, %1919, %1982, %1919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:111:11
  %x.123 : Bool(1000, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments.5, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
  %1986 : Tensor[] = aten::nonzero_numpy(%x.123), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
  %inds.1 : Long(630, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%1986), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %inds.3 : Long(630, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.1, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %1989 : Tensor?[] = prim::ListConstruct(%inds.3), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %rois.1 : Float(630, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes.1, %1989), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %boxes.21 : Float(630, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.1, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
  %1992 : Float(630, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%69, %boxes.21, %1934, %1931, %1931, %1917, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %1993 : Tensor?[] = prim::ListConstruct(%inds.3), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %output.3 : Float(1000, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.1, %1993, %1992, %1920), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
  %x.125 : Bool(1000, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments.5, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
  %1996 : Tensor[] = aten::nonzero_numpy(%x.125), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
  %inds.5 : Long(182, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%1996), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %inds.7 : Long(182, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.5, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %1999 : Tensor?[] = prim::ListConstruct(%inds.7), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %rois.3 : Float(182, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes.1, %1999), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %boxes.23 : Float(182, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.3, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
  %2002 : Float(182, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%70, %boxes.23, %1936, %1931, %1931, %1917, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %2003 : Tensor?[] = prim::ListConstruct(%inds.7), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %output.5 : Float(1000, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.3, %2003, %2002, %1920), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
  %x.127 : Bool(1000, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments.5, %1922), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
  %2006 : Tensor[] = aten::nonzero_numpy(%x.127), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
  %inds.9 : Long(161, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%2006), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %inds.11 : Long(161, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.9, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %2009 : Tensor?[] = prim::ListConstruct(%inds.11), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %rois.5 : Float(161, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes.1, %2009), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %boxes.25 : Float(161, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.5, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
  %2012 : Float(161, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%71, %boxes.25, %1937, %1931, %1931, %1917, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %2013 : Tensor?[] = prim::ListConstruct(%inds.11), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %output.7 : Float(1000, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.5, %2013, %2012, %1920), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
  %x.129 : Bool(1000, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments.5, %1923), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
  %2016 : Tensor[] = aten::nonzero_numpy(%x.129), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
  %inds.13 : Long(27, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%2016), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %inds.15 : Long(27, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.13, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %2019 : Tensor?[] = prim::ListConstruct(%inds.15), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %rois.7 : Float(27, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes.1, %2019), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %boxes.27 : Float(27, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.7, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
  %2022 : Float(27, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%78, %boxes.27, %1938, %1931, %1931, %1917, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler/__module.model.roi_heads.box_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %2023 : Tensor?[] = prim::ListConstruct(%inds.15), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler
  %input.131 : Float(1000, 256, 7, 7, strides=[12544, 49, 7, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.7, %2023, %2022, %1920), scope: __module.model.roi_heads/__module.model.roi_heads.box_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
  %2025 : __torch__.torch.nn.modules.linear.___torch_mangle_136.Linear = prim::GetAttr[name="fc2"](%1941)
  %2026 : __torch__.torch.nn.modules.linear.Linear = prim::GetAttr[name="fc1"](%1941)
  %input.133 : Float(1000, 12544, strides=[12544, 1], requires_grad=0, device=cpu) = aten::flatten(%input.131, %1918, %1916), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.flatten # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/flatten.py:40:0
  %2028 : Tensor = prim::GetAttr[name="bias"](%2026)
  %2029 : Tensor = prim::GetAttr[name="weight"](%2026)
  %input.135 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu) = aten::linear(%input.133, %2029, %2028), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.fc1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1847:0
  %input.137 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu) = aten::relu(%input.135), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.fc_relu1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %2032 : Tensor = prim::GetAttr[name="bias"](%2025)
  %2033 : Tensor = prim::GetAttr[name="weight"](%2025)
  %input.139 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu) = aten::linear(%input.137, %2033, %2032), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.fc2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1847:0
  %input.141 : Float(1000, 1024, strides=[1024, 1], requires_grad=0, device=cpu) = aten::relu(%input.139), scope: __module.model.roi_heads/__module.model.roi_heads.box_head/__module.model.roi_heads.box_head.fc_relu2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %2036 : __torch__.torch.nn.modules.linear.___torch_mangle_139.Linear = prim::GetAttr[name="bbox_pred"](%1940)
  %2037 : __torch__.torch.nn.modules.linear.___torch_mangle_138.Linear = prim::GetAttr[name="cls_score"](%1940)
  %2038 : Tensor = prim::GetAttr[name="bias"](%2037)
  %2039 : Tensor = prim::GetAttr[name="weight"](%2037)
  %input.143 : Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::linear(%input.141, %2039, %2038), scope: __module.model.roi_heads/__module.model.roi_heads.box_predictor/__module.model.roi_heads.box_predictor.cls_score # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1847:0
  %2041 : Tensor = prim::GetAttr[name="bias"](%2036)
  %2042 : Tensor = prim::GetAttr[name="weight"](%2036)
  %deltas.21 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::linear(%input.141, %2042, %2041), scope: __module.model.roi_heads/__module.model.roi_heads.box_predictor/__module.model.roi_heads.box_predictor.bbox_pred # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1847:0
  %2044 : (Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu), Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%deltas.21, %input.143)
  %2045 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu), %2046 : Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu) = prim::TupleUnpack(%2044)
  %2047 : int = aten::size(%tensor.31, %1917), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
  %deltas : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%2045, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:88:0
  %boxes.29 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.31, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:89:0
  %2050 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %2051 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%2050, %1918, %1922), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %2052 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %2053 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%2052, %1918, %1917), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %widths : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::sub(%2051, %2053, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:91:0
  %2055 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %2056 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%2055, %1918, %1923), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %2057 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %2058 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%2057, %1918, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %heights : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::sub(%2056, %2058, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:92:0
  %2060 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %2061 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%2060, %1918, %1917), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %2062 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::mul(%widths, %1915), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %ctr_x : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::add(%2061, %2062, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:93:0
  %2064 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%boxes.29, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %2065 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%2064, %1918, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %2066 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::mul(%heights, %1915), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %ctr_y : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::add(%2065, %2066, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:94:0
  %2068 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %2069 : Float(1000, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%2068, %1918, %1917, %1921, %1928), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %dx : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%2069, %1914), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:97:0
  %2071 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %2072 : Float(1000, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%2071, %1918, %1918, %1921, %1928), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %dy : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%2072, %1914), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:98:0
  %2074 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %2075 : Float(1000, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%2074, %1918, %1922, %1921, %1928), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %dw.21 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%2075, %1913), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:99:0
  %2077 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%deltas, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %2078 : Float(1000, 1, strides=[4, 4], requires_grad=0, device=cpu) = aten::slice(%2077, %1918, %1923, %1921, %1928), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dh.21 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::div(%2078, %1913), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:100:0
  %dw : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dw.21, %1919, %1912), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:103:0
  %dh : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::clamp(%dh.21, %1919, %1912), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:104:0
  %2082 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %2083 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%2082, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %2084 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dx, %2083), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %2085 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_x, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %2086 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%2085, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %pred_ctr_x : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%2084, %2086, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:106:0
  %2088 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %2089 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%2088, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %2090 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%dy, %2089), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %2091 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%ctr_y, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %2092 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%2091, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %pred_ctr_y : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%2090, %2092, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:107:0
  %2094 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dw), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %2095 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%widths, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %2096 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%2095, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %pred_w : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%2094, %2096), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:108:0
  %2098 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::exp(%dh), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %2099 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::slice(%heights, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %2100 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::unsqueeze(%2099, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %pred_h : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%2098, %2100), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:109:0
  %2102 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w, %1915), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %x1.13 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_x, %2102, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:111:0
  %2104 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h, %1915), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %y1.13 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::sub(%pred_ctr_y, %2104, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:112:0
  %2106 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_w, %1915), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %x2.13 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_x, %2106, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:113:0
  %2108 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::mul(%pred_h, %1915), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %y2.13 : Float(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::add(%pred_ctr_y, %2108, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:114:0
  %2110 : Tensor[] = prim::ListConstruct(%x1.13, %y1.13, %x2.13, %y2.13), scope: __module.model.roi_heads
  %pred_boxes : Float(1000, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::stack(%2110, %1916), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:115:0
  %2112 : int = aten::size(%deltas, %1917), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %2113 : int = aten::size(%deltas, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %2114 : int[] = prim::ListConstruct(%2112, %2113), scope: __module.model.roi_heads
  %2115 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%pred_boxes, %2114), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/box_regression.py:116:0
  %2116 : int[] = prim::ListConstruct(%2047), scope: __module.model.roi_heads
  %2117 : Tensor[] = aten::split_with_sizes(%2115, %2116, %1917), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:515:0
  %boxes.31 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%2117), scope: __module.model.roi_heads
  %2119 : int = aten::size(%boxes.29, %1917), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
  %2120 : Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::softmax(%2046, %1916, %1919), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1679:0
  %2121 : int[] = prim::ListConstruct(%2119), scope: __module.model.roi_heads
  %2122 : Tensor[] = aten::split_with_sizes(%2120, %2121, %1917), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:515:0
  %scores.1 : Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%2122), scope: __module.model.roi_heads
  %2124 : Float(1000, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::slice(%scores.1, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
  %scores.3 : Float(1000, 1, strides=[2, 1], requires_grad=0, device=cpu) = aten::slice(%2124, %1918, %1917, %1916, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:142:0
  %2126 : int = aten::size(%boxes.31, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:143:0
  %2127 : Long(device=cpu) = prim::NumToTensor(%2126), scope: __module.model.roi_heads
  %num_bbox_reg_classes : Long(requires_grad=0, device=cpu) = aten::floor_divide(%2127, %1926), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:575:0
  %2129 : int = aten::Int(%num_bbox_reg_classes), scope: __module.model.roi_heads
  %2130 : int[] = prim::ListConstruct(%1916, %1928), scope: __module.model.roi_heads
  %tensor.33 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::reshape(%boxes.31, %2130), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:145:0
  %tensor.35 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.33, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
  %2133 : Tensor[] = aten::unbind(%image_size, %1917), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:613:0
  %h : Long(requires_grad=0, device=cpu), %w : Long(requires_grad=0, device=cpu) = prim::ListUnpack(%2133), scope: __module.model.roi_heads
  %2136 : Scalar = aten::ScalarImplicit(%h), scope: __module.model.roi_heads
  %2137 : Scalar = aten::ScalarImplicit(%w), scope: __module.model.roi_heads
  %2138 : Scalar = aten::ScalarImplicit(%h), scope: __module.model.roi_heads
  %2139 : Scalar = aten::ScalarImplicit(%w), scope: __module.model.roi_heads
  %2140 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.35, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
  %2141 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%2140, %1918, %1917), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
  %x1 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%2141, %1917, %2139), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:193:0
  %2143 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.35, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
  %2144 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%2143, %1918, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
  %y1 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%2144, %1917, %2138), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:194:0
  %2146 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.35, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
  %2147 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%2146, %1918, %1922), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
  %x2 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%2147, %1917, %2137), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:195:0
  %2149 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor.35, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
  %2150 : Float(1000, strides=[4], requires_grad=0, device=cpu) = aten::select(%2149, %1918, %1923), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
  %y2 : Float(1000, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%2150, %1917, %2136), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:196:0
  %2152 : Tensor[] = prim::ListConstruct(%x1, %y1, %x2, %y2), scope: __module.model.roi_heads
  %2153 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::stack(%2152, %1916), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:197:0
  %2154 : int[] = prim::ListConstruct(%1916, %2129, %1928), scope: __module.model.roi_heads
  %boxes.33 : Float(1000, 1, 4, strides=[4, 4, 1], requires_grad=0, device=cpu) = aten::view(%2153, %2154), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:147:0
  %filter_mask.1 : Bool(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::gt(%scores.3, %1911), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:155:0
  %filter_inds.1 : Long(51, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::nonzero(%filter_mask.1), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:158:0
  %2158 : Long(51, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::slice(%filter_inds.1, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
  %2159 : Long(51, strides=[2], requires_grad=0, device=cpu) = aten::select(%2158, %1918, %1917), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
  %2160 : Float(1000, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::select(%boxes.33, %1918, %1917), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
  %2161 : Long(51, strides=[2], requires_grad=0, device=cpu) = aten::to(%2159, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
  %2162 : Tensor?[] = prim::ListConstruct(%2161), scope: __module.model.roi_heads
  %boxes.35 : Float(51, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::index(%2160, %2162), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:160:0
  %filter_mask : Bool(1000, 1, strides=[1, 1], requires_grad=0, device=cpu) = aten::to(%filter_mask.1, %1910, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:0
  %2165 : Tensor?[] = prim::ListConstruct(%filter_mask), scope: __module.model.roi_heads
  %scores : Float(51, strides=[1], requires_grad=0, device=cpu) = aten::index(%scores.3, %2165), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:163:0
  %2167 : Long(51, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::slice(%filter_inds.1, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:166:0
  %2168 : Long(51, strides=[2], requires_grad=0, device=cpu) = aten::select(%2167, %1918, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:166:0
  %boxes.37 : Float(51, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%boxes.35, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/nms.py:20:0
  %2170 : int = aten::numel(%boxes.37) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:82:7
  %2171 : bool = aten::eq(%2170, %1917) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:82:7
  %keep.9 : Tensor = prim::If(%2171) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:82:4
    block0():
      %2173 : Device = prim::device(%boxes.37)
      %2174 : int[] = prim::ListConstruct(%1917)
      %2175 : Tensor = aten::empty(%2174, %1928, %1919, %2173, %1919, %1919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:83:15
      -> (%2175)
    block1():
      %max_coordinate.3 : Tensor = aten::max(%boxes.37) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:84:21
      %2177 : Tensor = aten::to(%2168, %boxes.37, %1920, %1920, %1919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:85:14
      %2178 : Tensor = aten::tensor(%1918, %1919, %1919, %1920) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:85:49
      %2179 : Tensor = aten::to(%2178, %boxes.37, %1920, %1920, %1919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:85:49
      %2180 : Tensor = aten::add(%max_coordinate.3, %2179, %1918) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:85:32
      %offsets.3 : Tensor = aten::mul(%2177, %2180) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:85:14
      %2182 : Tensor = aten::slice(%offsets.3, %1917, %1919, %1919, %1918) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:86:28
      %2183 : Tensor = aten::unsqueeze(%2182, %1918) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:86:28
      %boxes_for_nms.3 : Tensor = aten::add(%boxes.37, %2183, %1918) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:86:20
      %keep.3 : Tensor = torchvision::nms(%boxes_for_nms.3, %scores, %1909) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/boxes.py:35:11
      -> (%keep.3)
  %keep.11 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::slice(%keep.9, %1917, %1917, %1908, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:168:0
  %keep.13 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::to(%keep.11, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
  %2188 : Tensor?[] = prim::ListConstruct(%keep.13), scope: __module.model.roi_heads
  %tensor.37 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::index(%boxes.37, %2188), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
  %keep.15 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::to(%keep.13, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
  %2191 : Tensor?[] = prim::ListConstruct(%keep.15), scope: __module.model.roi_heads
  %2192 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::index(%scores, %2191), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
  %keep : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::to(%keep.15, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
  %2194 : Tensor?[] = prim::ListConstruct(%keep), scope: __module.model.roi_heads
  %filter_inds : Long(2, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::index(%filter_inds.1, %2194), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:169:0
  %tensor : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::to(%tensor.37, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:150:0
  %2197 : Long(2, 2, strides=[2, 1], requires_grad=0, device=cpu) = aten::slice(%filter_inds, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:177:0
  %2198 : Long(2, strides=[2], requires_grad=0, device=cpu) = aten::select(%2197, %1918, %1918), scope: __module.model.roi_heads # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/fast_rcnn.py:177:0
  %2199 : Tensor[] = prim::ListConstruct(%tensor), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %2200 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::cat(%2199, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:95:0
  %2201 : int = aten::size(%tensor, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
  %2202 : Long(device=cpu) = prim::NumToTensor(%2201), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %2203 : Tensor[] = prim::ListConstruct(%2202), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %2204 : Long(1, strides=[1], requires_grad=0, device=cpu) = aten::stack(%2203, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:34:0
  %2205 : Device = prim::device(%2200)
  %sizes.5 : Tensor = aten::to(%2204, %1919, %1919, %2205, %1919, %1920, %1920, %1919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:65:12
  %2207 : int = aten::len(%sizes.5) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:67:21
  %2208 : int = prim::dtype(%2200)
  %2209 : Device = prim::device(%2200)
  %2210 : Tensor = aten::arange(%2207, %2208, %1919, %2209, %1919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:67:8
  %indices.1 : Tensor = aten::repeat_interleave(%2210, %sizes.5, %1919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:66:14
  %2212 : Tensor = aten::slice(%indices.1, %1917, %1919, %1919, %1918) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:69:16
  %2213 : Tensor = aten::unsqueeze(%2212, %1918) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:69:16
  %2214 : Tensor[] = prim::ListConstruct(%2213, %2200)
  %pooler_fmt_boxes : Tensor = aten::cat(%2214, %1918) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:57:11
  %2216 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %2217 : Float(2, strides=[4], requires_grad=0, device=cpu) = aten::select(%2216, %1918, %1922), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %2218 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %2219 : Float(2, strides=[4], requires_grad=0, device=cpu) = aten::select(%2218, %1918, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %2220 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::sub(%2217, %2219, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %2221 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %2222 : Float(2, strides=[4], requires_grad=0, device=cpu) = aten::select(%2221, %1918, %1923), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %2223 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu) = aten::slice(%tensor, %1917, %1917, %1921, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %2224 : Float(2, strides=[4], requires_grad=0, device=cpu) = aten::select(%2223, %1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %2225 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::sub(%2222, %2224, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %2226 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::mul(%2220, %2225), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:180:0
  %box_sizes : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::sqrt(%2226), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:51:0
  %2228 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::div(%box_sizes, %1924), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %2229 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::add(%2228, %1925, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %2230 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::log2(%2229), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %2231 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::add(%2230, %1926, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %level_assignments.7 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::floor(%2231), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:54:0
  %level_assignments.9 : Float(2, strides=[1], requires_grad=0, device=cpu) = aten::clamp(%level_assignments.7, %1922, %1927), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:58:0
  %2234 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::to(%level_assignments.9, %1928, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
  %level_assignments : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::sub(%2234, %1929, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:59:0
  %2236 : int[] = aten::size(%pooler_fmt_boxes) # <string>:7:9
  %2237 : int = aten::__getitem__(%2236, %1917) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:109:14
  %2238 : int = prim::dtype(%69)
  %2239 : Device = prim::device(%69)
  %2240 : int[] = prim::ListConstruct(%2237, %1930, %1907, %1907)
  %output.9 : Tensor = aten::zeros(%2240, %2238, %1919, %2239, %1919) # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:111:11
  %x.131 : Bool(2, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
  %2243 : Tensor[] = aten::nonzero_numpy(%x.131), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
  %inds.17 : Long(2, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%2243), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %inds.19 : Long(2, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.17, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %2246 : Tensor?[] = prim::ListConstruct(%inds.19), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %rois.9 : Float(2, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes, %2246), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %boxes.39 : Float(2, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.9, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
  %2249 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%69, %boxes.39, %1934, %1907, %1907, %1917, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.0 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %2250 : Tensor?[] = prim::ListConstruct(%inds.19), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %output.11 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.9, %2250, %2249, %1920), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
  %x.133 : Bool(2, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
  %2253 : Tensor[] = aten::nonzero_numpy(%x.133), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
  %inds.21 : Long(0, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%2253), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %inds.23 : Long(0, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.21, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %2256 : Tensor?[] = prim::ListConstruct(%inds.23), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %rois.11 : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes, %2256), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %boxes.41 : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.11, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
  %2259 : Float(0, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%70, %boxes.41, %1936, %1907, %1907, %1917, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %2260 : Tensor?[] = prim::ListConstruct(%inds.23), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %output.13 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.11, %2260, %2259, %1920), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
  %x.135 : Bool(2, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments, %1922), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
  %2263 : Tensor[] = aten::nonzero_numpy(%x.135), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
  %inds.25 : Long(0, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%2263), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %inds.27 : Long(0, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.25, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %2266 : Tensor?[] = prim::ListConstruct(%inds.27), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %rois.13 : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes, %2266), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %boxes.43 : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois.13, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
  %2269 : Float(0, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%71, %boxes.43, %1937, %1907, %1907, %1917, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %2270 : Tensor?[] = prim::ListConstruct(%inds.27), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %output : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::index_put_(%output.13, %2270, %2269, %1920), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
  %x.137 : Bool(2, strides=[1], requires_grad=0, device=cpu) = aten::eq(%level_assignments, %1923), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:258:0
  %2273 : Tensor[] = aten::nonzero_numpy(%x.137), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:153:0
  %inds.29 : Long(0, strides=[1], requires_grad=0, device=cpu) = prim::ListUnpack(%2273), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %inds : Long(0, strides=[1], requires_grad=0, device=cpu) = aten::to(%inds.29, %1928, %1917, %1932, %1919, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %2276 : Tensor?[] = prim::ListConstruct(%inds), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %rois : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::index(%pooler_fmt_boxes, %2276), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:259:0
  %boxes : Float(0, 5, strides=[5, 1], requires_grad=0, device=cpu) = aten::to(%rois, %1935, %1920, %1920, %1919), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/roi_align.py:60:0
  %2279 : Float(0, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = torchvision::roi_align(%79, %boxes, %1938, %1907, %1907, %1917, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler/__module.model.roi_heads.mask_pooler.level_poolers.3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torchvision/ops/roi_align.py:57:0
  %2280 : Tensor?[] = prim::ListConstruct(%inds), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler
  %x.139 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::index_put_(%output, %2280, %2279, %1920), scope: __module.model.roi_heads/__module.model.roi_heads.mask_pooler # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/poolers.py:261:0
  %2282 : __torch__.detectron2.layers.wrappers.___torch_mangle_155.Conv2d = prim::GetAttr[name="predictor"](%1939)
  %2283 : __torch__.torch.nn.modules.conv.ConvTranspose2d = prim::GetAttr[name="deconv"](%1939)
  %2284 : __torch__.detectron2.layers.wrappers.___torch_mangle_153.Conv2d = prim::GetAttr[name="mask_fcn4"](%1939)
  %2285 : __torch__.detectron2.layers.wrappers.___torch_mangle_151.Conv2d = prim::GetAttr[name="mask_fcn3"](%1939)
  %2286 : __torch__.detectron2.layers.wrappers.___torch_mangle_149.Conv2d = prim::GetAttr[name="mask_fcn2"](%1939)
  %2287 : __torch__.detectron2.layers.wrappers.___torch_mangle_147.Conv2d = prim::GetAttr[name="mask_fcn1"](%1939)
  %2288 : Tensor = prim::GetAttr[name="bias"](%2287)
  %2289 : Tensor = prim::GetAttr[name="weight"](%2287)
  %2290 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1
  %2291 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1
  %2292 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1
  %2293 : int[] = prim::ListConstruct(%1917, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1
  %input.145 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.139, %2289, %2288, %2290, %2291, %2292, %1920, %2293, %1918, %1920, %1920, %1933, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %x.141 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::relu(%input.145), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn1/__module.model.roi_heads.mask_head.mask_fcn1.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %2296 : Tensor = prim::GetAttr[name="bias"](%2286)
  %2297 : Tensor = prim::GetAttr[name="weight"](%2286)
  %2298 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2
  %2299 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2
  %2300 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2
  %2301 : int[] = prim::ListConstruct(%1917, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2
  %input.147 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.141, %2297, %2296, %2298, %2299, %2300, %1920, %2301, %1918, %1920, %1920, %1933, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %x.143 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::relu(%input.147), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn2/__module.model.roi_heads.mask_head.mask_fcn2.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %2304 : Tensor = prim::GetAttr[name="bias"](%2285)
  %2305 : Tensor = prim::GetAttr[name="weight"](%2285)
  %2306 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3
  %2307 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3
  %2308 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3
  %2309 : int[] = prim::ListConstruct(%1917, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3
  %input.149 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.143, %2305, %2304, %2306, %2307, %2308, %1920, %2309, %1918, %1920, %1920, %1933, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %x.145 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::relu(%input.149), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn3/__module.model.roi_heads.mask_head.mask_fcn3.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %2312 : Tensor = prim::GetAttr[name="bias"](%2284)
  %2313 : Tensor = prim::GetAttr[name="weight"](%2284)
  %2314 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4
  %2315 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4
  %2316 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4
  %2317 : int[] = prim::ListConstruct(%1917, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4
  %input.151 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::_convolution(%x.145, %2313, %2312, %2314, %2315, %2316, %1920, %2317, %1918, %1920, %1920, %1933, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4 # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %input.153 : Float(2, 256, 14, 14, strides=[50176, 196, 14, 1], requires_grad=0, device=cpu) = aten::relu(%input.151), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.mask_fcn4/__module.model.roi_heads.mask_head.mask_fcn4.activation # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %2320 : Tensor = prim::GetAttr[name="bias"](%2283)
  %2321 : Tensor = prim::GetAttr[name="weight"](%2283)
  %2322 : int[] = prim::ListConstruct(%1922, %1922), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv
  %2323 : int[] = prim::ListConstruct(%1917, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv
  %2324 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv
  %2325 : int[] = prim::ListConstruct(%1917, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv
  %input : Float(2, 256, 28, 28, strides=[200704, 784, 28, 1], requires_grad=0, device=cpu) = aten::_convolution(%input.153, %2321, %2320, %2322, %2323, %2324, %1933, %2325, %1918, %1920, %1920, %1933, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/modules/conv.py:918:0
  %x : Float(2, 256, 28, 28, strides=[200704, 784, 28, 1], requires_grad=0, device=cpu) = aten::relu(%input), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.deconv_relu # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/nn/functional.py:1298:0
  %2328 : Tensor = prim::GetAttr[name="bias"](%2282)
  %2329 : Tensor = prim::GetAttr[name="weight"](%2282)
  %2330 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor
  %2331 : int[] = prim::ListConstruct(%1917, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor
  %2332 : int[] = prim::ListConstruct(%1918, %1918), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor
  %2333 : int[] = prim::ListConstruct(%1917, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor
  %pred_mask_logits : Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu) = aten::_convolution(%x, %2329, %2328, %2330, %2331, %2332, %1920, %2333, %1918, %1920, %1920, %1933, %1933), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head/__module.model.roi_heads.mask_head.predictor # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/layers/wrappers.py:128:0
  %2335 : Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu) = aten::sigmoid(%pred_mask_logits), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/modeling/roi_heads/mask_head.py:144:0
  %2336 : int = aten::size(%tensor, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/detectron2/structures/boxes.py:240:0
  %2337 : int[] = prim::ListConstruct(%2336), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head
  %2338 : Tensor[] = aten::split_with_sizes(%2335, %2337, %1917), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head # /root/miniconda3/envs/detectron/lib/python3.7/site-packages/torch/_tensor.py:515:0
  %2339 : Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu) = prim::ListUnpack(%2338), scope: __module.model.roi_heads/__module.model.roi_heads.mask_head
  %2340 : (Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu), Long(2, strides=[2], requires_grad=0, device=cpu), Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu), Float(2, strides=[1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%tensor, %2198, %2339, %2192)
  %82 : Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu), %83 : Long(2, strides=[2], requires_grad=0, device=cpu), %84 : Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu), %85 : Float(2, strides=[1], requires_grad=0, device=cpu) = prim::TupleUnpack(%2340)
  %86 : (Float(2, 4, strides=[4, 1], requires_grad=0, device=cpu), Long(2, strides=[2], requires_grad=0, device=cpu), Float(2, 1, 28, 28, strides=[784, 784, 28, 1], requires_grad=0, device=cpu), Float(2, strides=[1], requires_grad=0, device=cpu), Long(2, strides=[1], requires_grad=0, device=cpu)) = prim::TupleConstruct(%82, %83, %84, %85, %image_size)
  return (%86)
